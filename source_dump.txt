# ==================================================
# Path: D:\VSCode\bach-nghe-student-management-website
# Detected tech: docker, javascript, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
bach-nghe-student-management-website/
├── .git/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── controllers/
│   │   │   ├── admin.controller.js
│   │   │   ├── auth.controller.js
│   │   │   ├── errors.controller.js
│   │   │   ├── student.controller.js
│   │   │   └── teacher.controller.js
│   │   ├── database/
│   │   ├── middlewares/
│   │   │   └── auth.middleware.js
│   │   ├── models/
│   │   │   ├── admin.model.js
│   │   │   ├── auth.model.js
│   │   │   ├── student.model.js
│   │   │   └── teacher.model.js
│   │   ├── routes/
│   │   │   ├── admin.router.js
│   │   │   ├── auth.router.js
│   │   │   ├── student.router.js
│   │   │   └── teacher.router.js
│   │   ├── api-error.js
│   │   ├── app.js
│   │   └── jsend.js
│   ├── .env
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
├── database/
├── frontend/
│   ├── admin/
│   │   ├── page_account_management.html
│   │   ├── page_admin.html
│   │   ├── page_admin_statistics.html
│   │   ├── page_class_management.html
│   │   ├── page_create_account.html
│   │   ├── page_student_management.html
│   │   └── page_teacher_management.html
│   ├── css/
│   │   ├── admin.css
│   │   ├── info_student.css
│   │   ├── login.css
│   │   ├── page_student_list_teacher.css
│   │   ├── student.css
│   │   ├── teacher.css
│   │   └── teacher_statistics.css
│   ├── images/
│   │   ├── b1.jpg
│   │   ├── b2.jpg
│   │   ├── b3.jpg
│   │   ├── bg_login.jpg
│   │   └── logo_Truong_Bach_Nghe.png
│   ├── js/
│   │   ├── Administrator/
│   │   │   ├── account_management.js
│   │   │   ├── class_management.js
│   │   │   ├── student_management.js
│   │   │   └── teacher_management.js
│   │   ├── Authentication/
│   │   │   ├── login.js
│   │   │   ├── logout.js
│   │   │   └── storage.js
│   │   ├── Student/
│   │   │   ├── student.js
│   │   │   └── student_information.js
│   │   ├── Teacher/
│   │   │   ├── teacher_chart.js
│   │   │   ├── teacher_home_page.js
│   │   │   ├── teacher_import_excel.js
│   │   │   ├── teacher_information.js
│   │   │   └── teacher_student_list.js
│   │   ├── test_chart.js
│   │   └── toast.js
│   ├── login/
│   │   └── login.html
│   ├── student/
│   │   ├── page_info_student.html
│   │   └── page_student.html
│   └── teacher/
│       ├── page_score_statistics.html
│       ├── page_student_list.html
│       └── page_teacher_home.html
├── .gitignore
└── README.md
```

## FILE CONTENTS

### backend\server.js
```js
require("dotenv").config();
const app = require("./src/app");

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}.`);
});

```

### backend\src\api-error.js
```js
class ApiError extends Error {
    constructor(statusCode, message, headers = {}) {
        super();
        this.statusCode = statusCode;
        this.message = message;
        this.headers = headers;
    }
}

module.exports = ApiError;
```

### backend\src\app.js
```js
const express = require("express");
const cors = require("cors");
const JSend = require("./jsend");
const knex = require("./database/knex");
const session = require("express-session");

const authRouter = require("./routes/auth.router");
const studentRouter = require("./routes/student.router");
const teacherRouter = require("./routes/teacher.router");
const adminRouter = require("./routes/admin.router");

const {
  resourceNotFound,
  handleError,
} = require("./controllers/errors.controller");
const app = express();

app.use(
  cors({
    origin: [
      "http://localhost:5501",
      "http://localhost",
      "http://127.0.0.1:5501",
    ],
    credentials: true, // Cho phép gửi cookie qua CORS
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false },
  })
);

app.get("/api/check-connection", async (req, res) => {
  try {
    await knex.raw("SELECT 1");
    res.json({ message: "Connect Successfully!" });
  } catch (error) {
    res.status(500).json({
      error: "Cannot Connect Successfully!",
      details: error.message,
    });
  }
});

app.get("/", (req, res) => {
  return res.json(JSend.success());
});

app.use("/public", express.static("public"));

authRouter.setup(app);
studentRouter.setup(app);
teacherRouter.setup(app);
adminRouter.setup(app);

//handle 404 response
app.use(resourceNotFound);

app.use(handleError);

module.exports = app;
```

### backend\src\jsend.js
```js
/**
 * @param {object | null} data
 * @returns {{status: 'success', data: object | null}}
 */
function success(data = "Welcome to Bach Nghe Student Management Website!") {
  return {
    status: "success",
    data: data,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'fail', message: string, data: object | undefined}}
 */
function fail(message, data = null) {
  if (data) {
    return {
      status: "fail",
      message,
      data,
    };
  }
  return {
    status: "fail",
    message,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'error', message: string, data: object | undefined}}
 */
function error(message, data = null) {
  if (data) {
    return {
      status: "error",
      message,
      data,
    };
  }
  return {
    status: "error",
    message,
  };
}

module.exports = {
  success,
  fail,
  error,
};

```

### backend\src\controllers\admin.controller.js
```js
const adminService = require("../models/admin.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const { as } = require("../database/knex");

async function createStudentAccount(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const student = await adminService.createStudentAccount({
      username,
      password,
    });

    if (!student) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(student));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function createTeacherAccount(req, res, next) {
  const { username, password, role } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const teacher = await adminService.createTeacherAccount({
      username,
      password,
    });

    if (!teacher) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(teacher));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getStudentAccount(req, res, next) {
  try {
    const students = await adminService.getStudentAccount();
    if (!students) {
      return next(new ApiError(404, "No student accounts found"));
    }
    return res.status(200).json(JSend.success(students));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getAccountList(req, res, next) {
  try {
    const users = await adminService.getAccountList();
    if (!users) {
      return next(new ApiError(404, "No user accounts found"));
    }
    return res.status(200).json(JSend.success(users));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getTeacherAccount(req, res, next) {
  try {
    const users = await adminService.getTeacherAccount();
    if (!users) {
      return next(new ApiError(404, "No user accounts found"));
    }
    return res.status(200).json(JSend.success(users));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function createClassWithTeacher(req, res, next) {
  const { classID, moduleID, semesterID, teacherCode } = req.body;

  if (!classID || !moduleID || !semesterID || !teacherCode) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    const newClass = await adminService.createClassWithTeacher({
      classID,
      moduleID,
      semesterID,
      teacherCode,
    });

    if (!newClass) {
      return next(new ApiError(401, "Create class failed"));
    }

    return res.status(201).json(JSend.success(newClass));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function addStudentsToClass(req, res, next) {
  const { class_subject_id, student_codes } = req.body;

  if (
    typeof class_subject_id === "undefined" ||
    class_subject_id === null ||
    !Array.isArray(student_codes) ||
    student_codes.length === 0
  ) {
    return res.status(400).json(JSend.fail("Missing or invalid data"));
  }

  try {
    const result = await adminService.addStudentsToClass({
      class_subject_id,
      student_codes,
    });

    return res.status(201).json(JSend.success({ added: result }));
  } catch (err) {
    console.error(err);
    return next(new ApiError(500, "Internal server error"));
  }
}

async function updateAccount(req, res, next) {
  const { currentCode, newPassword, newStatus } = req.body;

  console.log(currentCode, newPassword, newStatus);
  if (!currentCode || !newPassword || !newStatus) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    const updatedUser = await adminService.updateAccount({
      currentCode,
      newPassword,
      newStatus,
    });

    if (!updatedUser) {
      return next(new ApiError(404, "Account not found"));
    }

    return res.status(200).json(JSend.success(updatedUser));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}
module.exports = {
  createStudentAccount,
  createTeacherAccount,
  getStudentAccount,
  getTeacherAccount,
  createClassWithTeacher,
  addStudentsToClass,
  getAccountList,
  updateAccount,
};

```

### backend\src\controllers\auth.controller.js
```js
const authService = require("../models/auth.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const jwt = require("jsonwebtoken");

async function login(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return next(new ApiError(400, "Username and password are required"));
  }

  try {
    const user = await authService.login(username, password);

    if (!user) {
      return next(new ApiError(401, "Invalid username or password"));
    }

    // Tạo JWT token (bạn có thể điều chỉnh secret và thời gian hết hạn)
    const token = jwt.sign(
      {
        id: user.user_id,
        username: user.user_username,
        role: user.user_role,
        status: user.user_status,
      },
      process.env.JWT_SECRET,
      {
        expiresIn: "48h",
      }
    );

    res.json(
      JSend.success({
        message: "Login successful",
        token,
        user: {
          id: user.user_id,
          username: user.user_username,
          role: user.user_role,
          status: user.user_status,
        },
      })
    );
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid username or password"));
  }
}

async function logout(req, res) {
  req.session.destroy();
  return res.status(200).json(JSend.success({ message: "Logout successful" }));
}

module.exports = {
  login,
  logout,
};

```

### backend\src\controllers\errors.controller.js
```js
const ApiError = require('../api-error');
const JSend = require('../jsend');

function methodNotAllowed(req, res, next) {
    if (req.route) {
        // Determine which HTTP methods are supported
        const httpMethods = Object.keys(req.route.methods)
            .filter((method) => method !== '_all')
            .map((method) => method.toUpperCase());
        return next(
            new ApiError(405, 'Method Not Allowed', {
                Allow: httpMethods.join(', '),
            })
        );
    }
    return next();
}

function resourceNotFound(req, res, next) {
    // Handler for unknown URL path.
    // Call next() to pass to the error handling function.
    return next(new ApiError(404, 'Resource not found'));
}

function handleError(error, req, res, next) {
    // The centralized error handling function.
    // In any route handler, calling next(error)
    // will pass to this error handling function.
    if (res.headersSent) {
        return next(error);
    }
    const statusCode = error.statusCode || 500;
    const message = error.message || 'Internal Server Error';
    return res
        .status(statusCode)
        .set(error.headers || {})
        .json(
            statusCode >= 500 ? JSend.error(message) : JSend.fail(message)
        );
}

module.exports = {
    methodNotAllowed,
    resourceNotFound,
    handleError,
};
```

### backend\src\controllers\student.controller.js
```js
const studentService = require("../models/student.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");

async function getScore(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const score = await studentService.getAllSubjectScore(studentCode);

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getScoreBySemester(req, res, next) {
  const { studentCode, semester } = req.query;

  if (!studentCode || !semester) {
    return next(new ApiError(400, "Student code and Semester is required"));
  }

  try {
    const score = await studentService.filterSubjectScoreBySemester(
      studentCode,
      semester
    );

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    if (score.length === 0) {
      return next(
        new ApiError(
          404,
          "The student don't have scores found in this semester"
        )
      );
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const studentInfo = await studentService.getStudentInfo(studentCode);

    if (!studentInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(studentInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function updateStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;
  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  const {
    student_date_of_birth,
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
    student_gender,
  } = req.body;

  if (
    !student_address ||
    !student_email ||
    !student_phone ||
    !student_IDCard ||
    !student_country
  ) {
    return next(new ApiError(400, "All fields are required"));
  }
  //   let dateOfBirth = null;
  //   if (student_date_of_birth) {
  //     dateOfBirth = moment(student_date_of_birth, "MM-DD-YYYY").format(
  //       "YYYY-MM-DD"
  //     );
  //   }

  const updateData = {
    student_date_of_birth,
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
    student_gender,
  };

  try {
    const updatedStudent = await studentService.updateStudentInfo(
      studentCode,
      updateData
    );
    if (!updatedStudent) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

module.exports = {
  getScore,
  getScoreBySemester,
  getStudentInfo,
  updateStudentInfo,
};

```

### backend\src\controllers\teacher.controller.js
```js
const teacherService = require("../models/teacher.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const moment = require("moment");

async function getTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const teacherInfo = await teacherService.getTeacherInfo(teacherCode);

    if (!teacherInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(teacherInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function updateTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "Teacher code is required"));
  }

  const {
    teacher_date_of_birth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  } = req.body;

  if (
    !teacher_date_of_birth ||
    !teacher_gender ||
    !teacher_address ||
    !teacher_email ||
    !teacher_phone
  ) {
    return next(new ApiError(400, "All fields are required"));
  }
  let dateOfBirth = null;
  if (teacher_date_of_birth) {
    dateOfBirth = moment(teacher_date_of_birth, "DD-MM-YYYY").format(
      "YYYY-MM-DD"
    );
  }

  const updateData = {
    teacher_date_of_birth: dateOfBirth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  };

  try {
    const updatedTeacher = await teacherService.updateTeacherInfo(
      teacherCode,
      updateData
    );
    if (!updatedTeacher) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

async function getModuleTeaching(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const moduleTeaching = await teacherService.getModuleTeaching(teacherCode);

    if (!moduleTeaching) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(moduleTeaching));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function getStudentInClass(req, res, next) {
  const { teacherCode, moduleCode, classCode } = req.query;

  if (!teacherCode || !moduleCode || !classCode) {
    return next(new ApiError(400, "All parameters are required"));
  }

  try {
    const students = await teacherService.getStudentInClass({
      teacherCode,
      moduleCode,
      classCode,
    });

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function updateStudentScore(req, res, next) {
  const { classSubjectId, studentCode, score } = req.body;

  if (
    !classSubjectId ||
    !studentCode ||
    score === undefined ||
    score === null
  ) {
    return next(new ApiError(400, "All parameters are required"));
  }

  try {
    const scores = await teacherService.updateStudentScore(
      classSubjectId,
      studentCode,
      score
    );

    if (!scores) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(scores));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function getStudentPassing(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getStudentPassing(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getPassingPropotion(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getPassingPropotion(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getAvgScore(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getAvgScore(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getStudentCodeByName(req, res, next) {
  const { studentMiddleName, studentName } = req.query;

  if (!studentMiddleName || !studentName) {
    return next(
      new ApiError(
        400,
        "Both student middle name and student name are required"
      )
    );
  }

  try {
    const studentCode = await teacherService.getStudentCodeByName(
      studentMiddleName,
      studentName
    );

    if (!studentCode) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(studentCode));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function importStudentScores(req, res, next) {
  const { classSubjectId, students } = req.body;

  if (!classSubjectId || !students || !Array.isArray(students)) {
    return next(new ApiError(400, "Invalid input data"));
  }

  try {
    const result = await teacherService.importStudentScores(
      classSubjectId,
      students
    );

    /*
	{
	Testing data structure:
		"classSubjectId" : "2",
		"students" : [
			{"student_code": "0092/24-THUD", "score": ""},
			{"student_code": "0093/24-THUD", "score": 3.006666666666667},
			{"student_code": "0094/24-THUD", "score": 3.8},
			{"student_code": "0095/24-THUD", "score": 7.466666666666667},
			{"student_code": "0096/24-THUD", "score": 5},
			{"student_code": "0097/24-THUD", "score": 6},
			{"student_code": "0098/24-THUD", "score": 7},
			{"student_code": "0099/24-THUD", "score": 8},
			{"student_code": "0100/24-THUD", "score": 9},
			{"student_code": "0101/24-THUD", "score": 10}
		]
	}
	*/

    if (!result) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(result));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function getScoreProgress(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const progress = await teacherService.getScoreProgress(teacherCode);

    if (!progress) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(progress));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getCountTeaching(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const count = await teacherService.getCountTeaching(teacherCode);

    if (count === null) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(count));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getLastUpdate(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }
  try {
    const lastUpdate = await teacherService.getLastUpdate(teacherCode);

    if (!lastUpdate) {
      return next(new ApiError(401, "Data not found"));
    }

    const updatedAt = Object.values(lastUpdate)[0]; // lấy giá trị từ 'max(`updated_at`)' key
    const formatted = moment(updatedAt).format("HH:mm DD/MM/YYYY ");

    return res.json(JSend.success(formatted));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

module.exports = {
  getTeacherInfo,
  updateTeacherInfo,
  getModuleTeaching,
  getStudentInClass,
  updateStudentScore,
  getStudentPassing,
  getPassingPropotion,
  getAvgScore,
  getStudentCodeByName,
  importStudentScores,
  getScoreProgress,
  getCountTeaching,
  getLastUpdate,
};

```

### backend\src\middlewares\auth.middleware.js
```js

```

### backend\src\models\admin.model.js
```js
const knex = require("../database/knex");
const admin = {
  createStudentAccount: async ({ username, password }) => {
    const student = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
    });

    if (student.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedStudent = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedStudent;
    }

    return null;
  },

  createTeacherAccount: async ({ username, password }) => {
    const teacher = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
      user_role: 2, // Assuming a role field exists
    });

    if (teacher.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedTeacher = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedTeacher;
    }

    return null;
  },

  checkUserAccount: async (username) => {
    const user = await knex("system_user")
      .where({ user_username: username })
      .first();

    if (user) {
      return user;
    }

    return null;
  },

  getAccountList: async () => {
    const users = await knex("system_user")
      .select("*")
      .whereNot({ user_role: 0 }) // 0 = admin
      .orderBy("user_role", "asc")
      .orderBy("user_username", "asc");

    if (users.length === 0) return null;

    const result = [];

    for (const user of users) {
      let roleName = "";
      let extraInfo = null;

      if (user.user_role === 1) {
        roleName = "Học viên";
        extraInfo = await knex("student")
          .select(
            "student_middle_name",
            "student_name",
            "student_email",
            "student_phone"
          )
          .where({ student_code: user.user_username })
          .first();
      } else if (user.user_role === 2) {
        roleName = "Giảng viên";
        extraInfo = await knex("teacher")
          .select("teacher_name", "teacher_email", "teacher_phone")
          .where({ teacher_code: user.user_username })
          .first();
      }

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  getStudentAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 1, // Assuming 1 is the role for students
    });

    if (users.length === 0) {
      return null;
    }

    const result = [];

    for (const user of users) {
      let extraInfo = null;
      let roleName = "";
      roleName = "Học viên";
      extraInfo = await knex("student")
        .select(
          "student_middle_name",
          "student_name",
          "student_email",
          "student_phone"
        )
        .where({ student_code: user.user_username })
        .first();

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  getTeacherAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 2, // Assuming 2 is the role for teachers
    });

    if (users.length === 0) {
      return null;
    }

    const result = [];

    for (const user of users) {
      let extraInfo = null;
      let roleName = "";
      roleName = "Giảng viên";
      extraInfo = await knex("teacher")
        .select("teacher_name", "teacher_email", "teacher_phone")
        .where({ teacher_code: user.user_username })
        .first();

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  createClassWithTeacher: async ({
    classID,
    moduleID,
    semesterID,
    teacherCode,
  }) => {
    const trx = await knex.transaction();
    try {
      const [clsId] = await trx("class_subject").insert({
        class_id: classID,
        module_id: moduleID,
        semester_id: semesterID,
      });

      if (!clsId) {
        throw new Error("Failed to insert class_subject");
      }

      await trx("teacher_subject_class").insert({
        teacher_code: teacherCode,
        class_subject_id: clsId,
      });

      await trx.commit();
      const newClass = await knex("class_subject")
        .where("class_subject.class_subject_id", clsId)
        .join("class", "class_subject.class_id", "class.class_id")
        .join("module", "class_subject.module_id", "module.module_id")
        .join("semester", "class_subject.semester_id", "semester.semester_id")
        .join(
          "teacher_subject_class",
          "class_subject.class_subject_id",
          "teacher_subject_class.class_subject_id"
        )
        .join(
          "teacher",
          "teacher_subject_class.teacher_code",
          "teacher.teacher_code"
        )
        .select(
          "class_subject.class_subject_id",
          "module.module_name",
          "class.class_name",
          "semester.semester_number",
          "teacher.teacher_name"
        )
        .first();

      return newClass;
    } catch (error) {
      await trx.rollback();
      console.error("Error creating class_subject:", error.message);
      throw error;
    }
  },

  addStudentsToClass: async ({ class_subject_id, student_codes }) => {
    const trx = await knex.transaction();
    try {
      // Kiểm tra class_subject_id có tồn tại không
      const classSubject = await trx("class_subject")
        .where({ class_subject_id })
        .first();

      if (!classSubject) {
        throw new Error("Class subject not found");
      }

      const students = [];

      for (const studentCode of student_codes) {
        try {
          // Thêm vào class_student
          await trx("class_student").insert({
            class_subject_id,
            student_code: studentCode,
          });

          // Thêm vào score (với điểm NULL ban đầu)
          await trx("score").insert({
            class_subject_id,
            student_code: studentCode,
            score: null, // optional vì mặc định đã là null
          });

          students.push(studentCode);
        } catch (err) {
          // Nếu bị duplicate (đã tồn tại trong class_student hoặc score), ghi log và bỏ qua
          console.error("Lỗi khi thêm sinh viên:", err.message);

          // Nếu lỗi không phải duplicate thì rollback
          if (!err.message.includes("duplicate")) {
            throw err;
          }
        }
      }

      await trx.commit();
      return students;
    } catch (error) {
      await trx.rollback();
      console.error("Error adding students to class subject:", error.message);
      throw error;
    }
  },

  updateAccount: async (currentCode, newPassword, newStatus) => {
    const updatedRows = await knex("system_user")
      .where({ user_username: currentCode })
      .update({ user_status: newStatus, user_pass: newPassword });

    if (updatedRows === 0) {
      throw new Error("User not found or status unchanged");
    }

    return updatedRows;
  },
};

module.exports = admin;

```

### backend\src\models\auth.model.js
```js
const knex = require("../database/knex");

const auth = {
  login: async (username, password) => {
    const user = await knex("system_user")
      .where("user_username", username)
      .andWhere("user_pass", password)
      .select("user_username", "user_role", "user_status", "user_id")
      .limit(1);

    if (user.length > 0) {
      return user[0];
    }
    return null;
  },

  checkAccount: async (username) => {
    const user = await knex("system_user")
      .where("user_name", username)
      .select("user_name")
      .first();
    return user || null;
  },

  register: async (RegisterData) => {
    return knex("userInfo").insert({
      user_name: RegisterData.username,
      user_passwd: RegisterData.password,
      user_phoneNum: RegisterData.userPhone,
    });
  },
};

module.exports = auth;

```

### backend\src\models\student.model.js
```js
const knex = require("../database/knex");

const student = {
  getAllSubjectScore: async (studentCode) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "c.class_name AS Đơn Vị Học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  filterSubjectScoreBySemester: async (studentCode, semester) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .andWhere("se.semester_number", semester)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "c.class_name AS Đơn Vị Học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  getStudentInfo: async (studentCode) => {
    const result = await knex("student").where("student_code", studentCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateStudentInfo: async (studentCode, updateData) => {
    const result = await knex("student")
      .where("student_code", studentCode)
      .update({
        student_date_of_birth: updateData.student_date_of_birth,
        student_address: updateData.student_address,
        student_email: updateData.student_email,
        student_phone: updateData.student_phone,
        student_IDCard: updateData.student_IDCard,
        student_country: updateData.student_country,
        student_gender: updateData.student_gender,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },
};

module.exports = student;

```

### backend\src\models\teacher.model.js
```js
const knex = require("../database/knex");

const teacher = {
  getTeacherInfo: async (teacherCode) => {
    const result = await knex("teacher").where("teacher_code", teacherCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateTeacherInfo: async (teacherCode, updateData) => {
    const result = await knex("teacher")
      .where("teacher_code", teacherCode)
      .update({
        teacher_date_of_birth: updateData.teacher_date_of_birth,
        teacher_gender: updateData.teacher_gender,
        teacher_address: updateData.teacher_address,
        teacher_email: updateData.teacher_email,
        teacher_phone: updateData.teacher_phone,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getModuleTeaching: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join("teacher as t", "tsc.teacher_code", "t.teacher_code")
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .where("t.teacher_code", teacherCode)
      .distinct(
        "csub.class_subject_id",
        "t.teacher_code",
        "t.teacher_name",
        "c.class_code",
        "c.class_name",
        "m.module_code",
        "m.module_name",
        "se.semester_number",
        "se.semester_start_date",
        "se.semester_end_date"
      )
      .orderBy("se.semester_number", "desc");

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getStudentInClass: async ({ teacherCode, moduleCode, classCode }) => {
    const result = await knex("teacher as t")
      .join(
        "teacher_subject_class as tsc",
        "t.teacher_code",
        "tsc.teacher_code"
      )
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join(
        "class_student as cs",
        "csub.class_subject_id",
        "cs.class_subject_id"
      )
      .join("student as s", "cs.student_code", "s.student_code")
      .leftJoin("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("t.teacher_code", teacherCode)
      .andWhere("m.module_code", moduleCode)
      .andWhere("c.class_code", classCode)
      .distinct(
        "t.teacher_name",
        "c.class_name",
        "m.module_name",
        "s.student_code",
        "s.student_middle_name",
        "s.student_name",
        "sc.score"
      )
      .orderBy([{ column: "s.student_code" }]);

    return result;
  },

  updateStudentScore: async (classSubjectId, studentCode, score) => {
    const result = await knex("score")
      .where({
        class_subject_id: classSubjectId,
        student_code: studentCode,
      })
      .update({ score });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getStudentPassing: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join("class as c", "csj.class_id", "c.class_id")
      .join("module as m", "csj.module_id", "m.module_id")
      .join(
        "class_student as cs",
        "csj.class_subject_id",
        "cs.class_subject_id"
      )
      .leftJoin("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        "c.class_code as class",
        "m.module_name as subject",
        knex.raw("COUNT(DISTINCT cs.student_code) as total_students"),
        knex.raw(
          "COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) as passed_students"
        )
      )
      .groupBy(["c.class_code", "m.module_name"])
      .orderBy(["c.class_code", "m.module_name"]);

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getPassingPropotion: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join(
        "class_student as cs",
        "cs.class_subject_id",
        "csj.class_subject_id"
      )
      .leftJoin("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        knex.raw("COUNT(DISTINCT cs.student_code) AS total_students"),
        knex.raw(`
        COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) AS passed_students
      `),
        knex.raw(`
        ROUND(
          COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) * 100.0
          / NULLIF(COUNT(DISTINCT cs.student_code), 0), 2
        ) AS passing_percentage
      `)
      );

    if (!result || result.length === 0) {
      return null;
    }

    return result[0]; // vì chỉ có 1 hàng kết quả
  },

  getAvgScore: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join("class as c", "csj.class_id", "c.class_id")
      .join("module as m", "csj.module_id", "m.module_id")
      .join(
        "class_student as cs",
        "csj.class_subject_id",
        "cs.class_subject_id"
      )
      .join("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        "c.class_code as class",
        "m.module_name as subject",
        knex.raw(" ROUND(AVG(sc.score), 2) as average_score")
      )
      .groupBy(["c.class_code", "m.module_name"])
      .orderBy("c.class_code", "asc");

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getStudentCodeByName: async (studentMiddleName, studentName) => {
    const result = await knex("student")
      .where({
        student_middle_name: studentMiddleName,
        student_name: studentName,
      })
      .select("student_code");

    if (result.length === 0) {
      return null;
    }

    return result[0].student_code;
  },

  importStudentScores: async (classSubjectId, students) => {
    const updated = [];
    const skipped = [];
    for (const student of students) {
      try {
        const exists = await knex("score")
          .where({
            class_subject_id: classSubjectId,
            student_code: student.student_code,
          })
          .select("score")
          .first();

        if (!exists) {
          skipped.push(student.student_code);
          continue;
        }

        if (student.score === "" || student.score === undefined) {
          skipped.push(student.student_code);
          continue;
        }

        if (Number(exists.score) === Number(student.score)) {
          skipped.push(student.student_code);
          continue;
        }

        await knex("score")
          .where({
            class_subject_id: classSubjectId,
            student_code: student.student_code,
          })
          .update({ score: student.score });

        updated.push(student.student_code);
      } catch (error) {
        console.error(
          `Error processing student ${student.student_code}:`,
          error
        );
        continue;
      }
    }
    return {
      updatedCount: updated.length,
      updated,
      skipped,
    };
  },

  getScoreProgress: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_student as cs",
        "cs.class_subject_id",
        "tsc.class_subject_id"
      )
      .leftJoin("score as s", function () {
        this.on("s.class_subject_id", "=", "cs.class_subject_id")
          .andOn("s.student_code", "=", "cs.student_code")
          .andOnNotNull("s.score");
      })
      .where("tsc.teacher_code", teacherCode)
      .countDistinct("cs.student_code as tong_sinh_vien")
      .countDistinct({ so_diem_da_nhap: "s.student_code" })
      .groupBy("tsc.teacher_code");

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  getCountTeaching: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .where("tsc.teacher_code", teacherCode)
      .countDistinct("tsc.class_subject_id as count_teaching");

    if (result.length === 0) {
      return null;
    }

    return result[0].count_teaching;
  },

  getLastUpdate: async (teacherCode) => {
    const result = await knex("score as s")
      .join(
        "teacher_subject_class as tsc",
        "tsc.class_subject_id",
        "s.class_subject_id"
      )
      .where("tsc.teacher_code", teacherCode)
      .whereNotNull("s.score")
      .max("updated_at as last_update")
      .first();

    if (!result) {
      return null;
    }

    return result;
  },
};

module.exports = teacher;

```

### backend\src\routes\admin.router.js
```js
const express = require("express");
const adminController = require("../controllers/admin.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");

const router = express.Router();

router.post("/createStudentAccount", adminController.createStudentAccount);
router.all("/createStudentAccount", methodNotAllowed);
router.post("/createTeacherAccount", adminController.createTeacherAccount);
router.all("/createTeacherAccount", methodNotAllowed);
router.get("/getStudentAccount", adminController.getStudentAccount);
router.all("/getStudentAccount", methodNotAllowed);
router.get("/getTeacherAccount", adminController.getTeacherAccount);
router.all("/getTeacherAccount", methodNotAllowed);
router.post("/createClass", adminController.createClassWithTeacher);
router.all("/createClass", methodNotAllowed);
router.post("/addStudentsToClass", adminController.addStudentsToClass);
router.all("/addStudentsToClass", methodNotAllowed);
router.get("/getAccountList", adminController.getAccountList);
router.all("/getAccountList", methodNotAllowed);
router.put("/updateAccount", adminController.updateAccount);
router.all("/updateAccount", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/admin", router);
};

```

### backend\src\routes\auth.router.js
```js
const express = require("express");
const authController = require("../controllers/auth.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.post("/login", authController.login);
router.post("/logout", authController.logout);
router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/auth", router);
};

```

### backend\src\routes\student.router.js
```js
const express = require("express");
const studentController = require("../controllers/student.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getScore", studentController.getScore);
router.all("/getScore", methodNotAllowed);
router.get("/getScoreBySemester", studentController.getScoreBySemester);
router.all("/getScoreBySemester", methodNotAllowed);
router.get("/getStudentInfo", studentController.getStudentInfo);
router.all("/getStudentInfo", methodNotAllowed);
router.put("/updateStudentInfo", studentController.updateStudentInfo);
router.all("/updateStudentInfo", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/student", router);
};

```

### backend\src\routes\teacher.router.js
```js
const express = require("express");
const teacherController = require("../controllers/teacher.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getTeacherInfo", teacherController.getTeacherInfo);
router.all("/getTeacherInfo", methodNotAllowed);
router.put("/updateTeacherInfo", teacherController.updateTeacherInfo);
router.all("/updateTeacherInfo", methodNotAllowed);
router.get("/getModuleTeaching", teacherController.getModuleTeaching);
router.all("/getModuleTeaching", methodNotAllowed);
router.get("/getStudentInClass", teacherController.getStudentInClass);
router.all("/getStudentInClass", methodNotAllowed);
router.put("/updateStudentScore", teacherController.updateStudentScore);
router.all("/updateStudentScore", methodNotAllowed);
router.get("/getStudentPassing", teacherController.getStudentPassing);
router.all("/getStudentPassing", methodNotAllowed);
router.get("/getPassingPropotion", teacherController.getPassingPropotion);
router.all("/getPassingPropotion", methodNotAllowed);
router.get("/getAvgScore", teacherController.getAvgScore);
router.all("/getAvgScore", methodNotAllowed);
router.get("/getStudentCodeByName", teacherController.getStudentCodeByName);
router.all("/getStudentCodeByName", methodNotAllowed);
router.post("/importStudentScores", teacherController.importStudentScores);
router.all("/importStudentScores", methodNotAllowed);
router.get("/getScoreProgress", teacherController.getScoreProgress);
router.all("/getScoreProgress", methodNotAllowed);
router.get("/getCountTeaching", teacherController.getCountTeaching);
router.all("/getCountTeaching", methodNotAllowed);
router.get("/getLastUpdate", teacherController.getLastUpdate);
router.all("/getLastUpdate", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/teacher", router);
};

```

### frontend\js\test_chart.js
```js
document.addEventListener("DOMContentLoaded", function () {
  const ctx = document.getElementById("classChart").getContext("2d");
  const chart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: ["Lớp A", "Lớp B", "Lớp C", "Lớp D", "Lớp E"],
      datasets: [{
        label: "Số sinh viên",
        data: [30, 45, 25, 50, 40],
        backgroundColor: "#3B82F6",
        borderRadius: 5
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
});

```

### frontend\js\toast.js
```js
function showToast(message, type = "info") {
  const bgColors = {
    success: "linear-gradient(to right, #00b09b, #96c93d)",
    error: "linear-gradient(to right, #e52d27, #b31217)",
    info: "linear-gradient(to right, #2193b0, #6dd5ed)",
    warn: "linear-gradient(to right, #f7971e, #ffd200)",
  };

  const icons = {
    success: "✅",
    error: "❌",
    info: "ℹ️",
    warn: "⚠️",
  };

  const icon = icons[type] || "";
  const textWithIcon = `<span style="display:flex;align-items:center;gap:6px;">${icon} ${message}</span>`;

  Toastify({
    text: textWithIcon,
    duration: 3000,
    close: false,
    gravity: "top",
    position: "right",
    backgroundColor: bgColors[type] || bgColors.info,
    stopOnFocus: true,
    escapeMarkup: false, // <--- Cho phép hiển thị HTML
  }).showToast();
}

window.showToast = showToast;

```

### frontend\js\Administrator\account_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".toggle-password").forEach((icon) => {
    icon.addEventListener("click", function () {
      const input = this.previousElementSibling;
      const isPassword = input.type === "password";

      input.type = isPassword ? "text" : "password";

      // Đổi icon
      this.classList.toggle("bi-eye-fill", isPassword);
      this.classList.toggle("bi-eye-slash-fill", !isPassword);
    });
  });

  const inputs = document.querySelectorAll(".password-field");

  inputs.forEach((input) => {
    input.style.width = input.value.length + 1 + "ch";
  });

  const editModal = document.getElementById("editModal");
  editModal.addEventListener("show.bs.modal", function (event) {
    const button = event.relatedTarget;
    const code = button.getAttribute("data-editMaSV");
    const passwd = button.getAttribute("data-editMatKhau");
    const name = button.getAttribute("data-editTen");
    const status = button.getAttribute("data-editTrangThai");

    document.getElementById("editMaSV").value = code;
    document.getElementById("editMaSV").readOnly = true;
    document.getElementById("editMatKhau").value = passwd;
    document.getElementById("editTen").value = name;
    document.getElementById("editTen").readOnly = true;
    document.getElementById("editTrangThai").value = status;
  });

  document.getElementById("editForm").addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const currentCode = document.getElementById("editMaSV").value;
    const newPassword = document.getElementById("editMatKhau").value;
    const newStatus = document.getElementById("editTrangThai").value;
    console.log("Current Code:", currentCode);
    console.log("New Password:", newPassword);
    console.log("New Status:", newStatus);
    updateAccount(currentCode, newPassword, newStatus);
  });

  getAccountList();
});

async function getAccountList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getAccountList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Account:", result.data);
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderListAccount(datas) {
  const accountList = document.getElementById("account-list");
  accountList.innerHTML = ""; // Clear existing rows

  datas.forEach((account, index) => {
    const row = document.createElement("tr");

    // Tạo input password
    const passwordField = document.createElement("input");
    passwordField.type = "password";
    passwordField.className = "unstyled-input password-field";
    passwordField.value = account.user_pass;
    passwordField.readOnly = true;
    passwordField.style.width = passwordField.value.length + 1 + "ch";

    // Icon toggle
    const eyeIcon = document.createElement("i");
    eyeIcon.className = "bi bi-eye-slash-fill toggle-password";
    eyeIcon.style.cursor = "pointer";
    eyeIcon.addEventListener("click", function () {
      const isHidden = passwordField.type === "password";
      passwordField.type = isHidden ? "text" : "password";
      eyeIcon.className = isHidden
        ? "bi bi-eye-fill toggle-password"
        : "bi bi-eye-slash-fill toggle-password";
    });

    // Tên tài khoản (tuỳ role)
    let name = "-";
    if (account.user_role === "Học viên" && account.info) {
      name = `${account.info.student_middle_name} ${account.info.student_name}`;
    } else if (account.user_role === "Giảng viên" && account.info) {
      name = account.info.teacher_name;
    }

    let statusText =
      account.user_status === 1 ? "Đang hoạt động" : "Ngừng hoạt động";
    if (account.user_status === 0) {
      statusText = `<span class="text-danger">${statusText}</span>`;
    } else if (account.user_status === 1) {
      statusText = `<span class="text-primary">${statusText}</span>`;
    }
    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${account.user_username}</td>
      <td></td>
      <td>${name}</td>
      <td>${account.user_role}</td>
      <td>${statusText}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1 btn-edit" 
			data-bs-toggle="modal"
			data-bs-target="#editModal"
			data-editMaSV="${account.user_username}"
  			data-editMatKhau="${account.user_pass}"
  			data-editTen="${name}"
			data-editTrangThai="${account.user_status}">
          <i class="bi bi-pencil-square"></i> Sửa
        </button>
      </td>
    `;

    // Thêm input password và icon vào cột thứ 3
    const passwordCell = row.children[2];
    passwordCell.appendChild(passwordField);
    passwordCell.appendChild(eyeIcon);

    accountList.appendChild(row);
  });
}

async function getStudentAccount() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getStudentAccount`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student Account:", result.data);
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu sinh viên!", "error");
  }
}

async function getTeacherAccount() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getTeacherAccount`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Teacher Account:", result.data);
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu giảng viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu giảng viên!", "error");
  }
}

function filterAccounts() {
  const fliter = document.getElementById("role_filter").value;

  switch (fliter) {
    case "1":
      getStudentAccount();
      break;
    case "2":
      getTeacherAccount();
      break;
    default:
      getAccountList();
  }
}

async function updateAccount(currentCode, newPassword, newStatus) {
  const API_BASE = "http://localhost:3000";

  if (!currentCode || !newPassword || !newStatus) {
    Swal.fire("Lỗi", "Thiếu dữ liệu để cập nhật điểm!", "error");
    return;
  }

  console.log("update: " + currentCode, newPassword, newStatus);

  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/updateAccount`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        currentCode,
        newPassword,
        newStatus,
      }),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Điểm đã được cập nhật!", "success");
      getAccountList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể cập nhật điểm!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

```

### frontend\js\Administrator\class_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".btn-edit").forEach(btn => {
    btn.addEventListener("click", handleEdit);
  });

  document.querySelectorAll(".btn-delete").forEach(btn => {
    btn.addEventListener("click", handleDelete);
  });

  document.getElementById("btnAddClass").addEventListener("click", function () {
    const maLop = document.getElementById("newMaLop").value.trim();
    const tenLop = document.getElementById("newTenLop").value.trim();
    const khoaHoc = document.getElementById("newKhoaHoc").value.trim();
    const cvht = document.getElementById("newCVHT").value.trim();

    if (!maLop || !tenLop || !khoaHoc || !cvht) {
      alert("Vui lòng điền đầy đủ thông tin lớp học.");
      return;
    }

    const table = document.querySelector("table tbody");
    const newRow = document.createElement("tr");
    const currentRows = table.querySelectorAll("tr").length;

    newRow.innerHTML = `
      <td>${currentRows + 1}</td>
      <td>${maLop}</td>
      <td>${tenLop}</td>
      <td>${khoaHoc}</td>
      <td>${cvht}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1 btn-edit"><i class="bi bi-pencil-square"></i> Sửa</button>
        <button class="btn btn-sm btn-danger btn-delete"><i class="bi bi-trash"></i> Xóa</button>
      </td>
    `;

    table.appendChild(newRow);
    document.getElementById("createClassForm").reset();
    bootstrap.Modal.getInstance(document.getElementById("createClassModal")).hide();

    newRow.querySelector(".btn-edit").addEventListener("click", handleEdit);
    newRow.querySelector(".btn-delete").addEventListener("click", handleDelete);
  });

  function handleEdit() {
    const row = this.closest("tr");
    const cells = row.querySelectorAll("td");

    document.getElementById("maLop").value = cells[1].textContent.trim();
    document.getElementById("tenLop").value = cells[2].textContent.trim();
    document.getElementById("khoaHoc").value = cells[3].textContent.trim();
    document.getElementById("cvht").value = cells[4].textContent.trim();

    bootstrap.Modal.getOrCreateInstance(document.getElementById("editClassModal")).show();
  }

  function handleDelete() {
    if (confirm("Bạn có chắc chắn muốn xóa lớp học này?")) {
      this.closest("tr").remove();
    }
  }
});

```

### frontend\js\Administrator\student_management.js
```js
let selectedRow = null;
const editModal = new bootstrap.Modal(document.getElementById('editModal'));

document.addEventListener('DOMContentLoaded', () => {
  // Xử lý nút Sửa
  document.querySelectorAll('.btn-edit').forEach(button => {
    button.addEventListener('click', function () {
      selectedRow = this.closest('tr');
      const cells = selectedRow.children;

      document.getElementById('editMaSV').value = cells[1].textContent;
      document.getElementById('editMatKhau').value = cells[2].textContent;
      document.getElementById('editHoDem').value = cells[3].textContent;
      document.getElementById('editTen').value = cells[4].textContent;
      document.getElementById('editGioiTinh').value = cells[5].textContent;
      document.getElementById('editDVHT').value = cells[6].textContent;
      document.getElementById('editCVHT').value = cells[7].textContent;
      document.getElementById('editDiaChi').value = cells[8].textContent;
      document.getElementById('editSDT').value = cells[9].textContent;

      editModal.show();
    });
  });

  // Xử lý nút Lưu trong modal
  document.getElementById('btnSaveChanges').addEventListener('click', function () {
    if (selectedRow) {
      const cells = selectedRow.children;

      cells[1].textContent = document.getElementById('editMaSV').value;
      cells[2].textContent = document.getElementById('editMatKhau').value;
      cells[3].textContent = document.getElementById('editHoDem').value;
      cells[4].textContent = document.getElementById('editTen').value;
      cells[5].textContent = document.getElementById('editGioiTinh').value;
      cells[6].textContent = document.getElementById('editDVHT').value;
      cells[7].textContent = document.getElementById('editCVHT').value;
      cells[8].textContent = document.getElementById('editDiaChi').value;
      cells[9].textContent = document.getElementById('editSDT').value;

      editModal.hide();
    }
  });

  // Xử lý nút Xóa
  document.querySelectorAll('.btn-delete').forEach(button => {
    button.addEventListener('click', function () {
      const row = this.closest('tr');
      const hoTen = row.children[3].textContent + ' ' + row.children[4].textContent;
      if (confirm(`Bạn có chắc muốn xóa học viên "${hoTen}" không?`)) {
        row.remove();
      }
    });
  });
});

```

### frontend\js\Administrator\teacher_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById("teacherForm");
  const tableBody = document.getElementById("teacherTableBody");

  form.addEventListener("submit", function (e) {
    e.preventDefault();

    const hoTen = document.getElementById("hoTen").value.trim();
    const chuyenMon = document.getElementById("chuyenMon").value.trim();
    const sdt = document.getElementById("sdt").value.trim();
    const email = document.getElementById("email").value.trim();
    const diaChi = document.getElementById("diaChi").value.trim();

    const rowCount = tableBody.querySelectorAll("tr").length;

    const newRow = document.createElement("tr");
    newRow.innerHTML = `
      <td>${rowCount + 1}</td>
      <td>${hoTen}</td>
      <td>${chuyenMon}</td>
      <td>${sdt}</td>
      <td>${email}</td>
      <td>${diaChi}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1"><i class="bi bi-pencil-square"></i> Sửa</button>
        <button class="btn btn-sm btn-danger"><i class="bi bi-trash"></i> Xóa</button>
      </td>
    `;

    tableBody.appendChild(newRow);
    form.reset();

    const modalElement = document.getElementById("addTeacherModal");
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    modalInstance.hide();
  });
});

```

### frontend\js\Authentication\login.js
```js
const loginForm = document.getElementById("loginForm");
if (loginForm) {
  loginForm.addEventListener("submit", async function (event) {
    event.preventDefault();
    const username = loginForm.querySelector('input[type="text"]').value;
    const password = loginForm.querySelector('input[type="password"]').value;

    if (!username || !password) {
      showToast("Please enter complete information!", "warn");
      return;
    }
    try {
      const API_BASE = "http://localhost:3000";
      const response = await fetch(`${API_BASE}/api/v1/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      const result = await response.json();

      if (result.status === "success") {
        const { token, user } = result.data;
        Storage.saveUser(user, token);

        // Chuyển hướng theo phân quyền
        switch (user.role) {
          case 0:
            window.location.href = "../admin/page_admin.html";
            break;
          case 1:
            window.location.href = "../student/page_student.html";
            break;
          case 2:
            window.location.href = "../teacher/page_teacher_home.html";
            break;
          default:
            showToast("User role not determined!!!", "warn");
        }
      } else {
        showToast(`Login Fail: ${result.message}`, "error");
      }
    } catch (error) {
      console.error(error);
      showToast(`Unable to connect to server: ${error.message}`, "error");
    }
  });
} else {
  console.error("Không tìm thấy form đăng nhập!");
}

```

### frontend\js\Authentication\logout.js
```js
function handleLogout() {
  // Gọi API logout nếu muốn xoá session trên server
  fetch("http://localhost:3000/api/v1/auth/logout", {
    method: "POST",
    credentials: "include",
  }).catch((err) => {
    console.warn("Không thể gọi logout từ server:", err.message);
  });

  Storage.clear();
  window.location.href = "../login/login.html";
}

// Gắn tự động nếu có phần tử logout nào
window.addEventListener("DOMContentLoaded", () => {
  const btns = [
    document.getElementById("logoutBtn"),
    document.getElementById("sidebarLogout"),
  ];

  btns.forEach((btn) => {
    if (btn) {
      btn.addEventListener("click", handleLogout);
    }
  });
});

```

### frontend\js\Authentication\storage.js
```js
const Storage = {
  saveUser: (user, token) => {
    localStorage.setItem("user", JSON.stringify(user));
    localStorage.setItem("token", token);
  },
  getUser: () => {
    const user = localStorage.getItem("user");
    return user ? JSON.parse(user) : null;
  },
  getToken: () => localStorage.getItem("token"),
  getRole: () => {
    const user = Storage.getUser();
    return user ? user.role : null;
  },
  isLoggedIn: () => !!Storage.getToken(),
  clear: () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
  },
};

window.Storage = Storage;

```

### frontend\js\Student\student.js
```js
document.addEventListener("DOMContentLoaded", function () {
  fetchStudentScores();
  displayStudentName();
});

async function fetchStudentScores() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getScore?studentCode=${student.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("data: " + result.data);
      renderScoresToTable(result.data);
      summaryCard(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu điểm!", "error");
  }
}

function renderScoresToTable(scores) {
  const tbody = document.querySelector("table tbody");
  tbody.innerHTML = "";
  console.log(scores);

  scores.forEach((item, index) => {
    var KQ;
    if (item["Tổng điểm"] === null || item["Tổng điểm"] === undefined) {
      KQ = "-";
    } else if (item["Tổng điểm"] >= 4) {
      KQ = "Đạt";
    } else {
      KQ = "Không Đạt";
    }
    const row = document.createElement("tr");

    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${item["Mã Môn học"]}</td>
      <td>${item["Tên Môn học"]}</td>
      <td>${item["Đơn Vị Học"] ?? "-"}</td>
      <td>${item["Học kỳ"] ?? "-"}</td>
      <td>${item["Tổng điểm"] ?? "-"}</td>
      <td>${KQ}</td>
      <td>-</td>
    `;

    tbody.appendChild(row);
  });
}

function summaryCard(scores) {
  const avg10Score = document.querySelector(".card.yellow .h3");
  const avg4Score = document.querySelector(".card.red .h3");
  const result = document.querySelector(".card.blue .h3");
  const letterGrade = document.querySelector(".card.teal .h3");

  const validScores = scores
    .map((s) => parseFloat(s["Tổng điểm"]))
    .filter((score) => !isNaN(score));
  console.log("Điểm hợp lệ:", validScores);

  if (validScores.length !== scores.length || validScores.length === 0) {
    avg10Score.textContent = "-";
    avg4Score.textContent = "-";
    result.textContent = "-";
    letterGrade.textContent = "-";
    return;
  }

  const sum = validScores.reduce((a, b) => a + b, 0);
  const avg10 = sum / validScores.length;
  console.log("Tổng điểm:", sum);
  console.log("Điểm trung bình 10:", avg10);

  const avg4 =
    validScores
      .map((score) => convertToHeSo4(score))
      .reduce((a, b) => a + b, 0) / validScores.length;

  const passed = validScores.every((score) => score >= 4);
  const letter = convertToLetterGrade(avg10);

  avg10Score.textContent = avg10.toFixed(2);
  avg4Score.textContent = avg4.toFixed(2);
  result.textContent = passed ? "Đạt" : "Không đạt";
  letterGrade.textContent = letter;
}

function convertToHeSo4(score) {
  if (score >= 9) return 4.0;
  if (score >= 7.0) return 3.0;
  if (score >= 5.5) return 2.0;
  if (score >= 4.0) return 1.0;
  return 0.0;
}

function convertToLetterGrade(score) {
  if (score >= 8.5) return "A";
  if (score >= 8.0) return "B+";
  if (score >= 7.0) return "B";
  if (score >= 6.5) return "C+";
  if (score >= 5.5) return "C";
  if (score >= 5.0) return "D+";
  if (score >= 4.0) return "D";
  return "F";
}

async function filterStudentScores() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  const semesterInput = document.querySelector("#hocKy");
  const semester = semesterInput.value.trim();

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getScoreBySemester?studentCode=${student.username}&semester=${semester}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Dữ liệu sau khi lọc:", result.data);
      renderScoresToTable(result.data);
      summaryCard(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu điểm!", "error");
  }
}

async function displayStudentName() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getStudentInfo?studentCode=${student.username}`
    );

    const result = await res.json();

    if (result.status === "success") {
      document.querySelector(
        ".studentFullName"
      ).textContent = `${result.data.student_middle_name} ${result.data.student_name}`;
    } else {
      Swal.fire("Thông báo", "Không tìm thấy thông tin sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Không thể kết nối tới máy chủ!", "error");
  }
}

```

### frontend\js\Student\student_information.js
```js
document.addEventListener("DOMContentLoaded", function () {
  fetchStudentInfo();
  updateStudentInfo();
});

async function fetchStudentInfo() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getStudentInfo?studentCode=${student.username}`
    );
    const result = await res.json();

    if (result.status === "success") {
      displayStudentInfo(result.data);
      displayStudentInfoInModal(result.data);
    } else {
      Swal.fire("Thông báo", "Không tìm thấy thông tin sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Không thể kết nối tới máy chủ!", "error");
  }
}

function displayStudentInfo(info) {
  // Họ tên + mã số
  document.querySelector(
    ".studentFullName"
  ).textContent = `${info.student_middle_name} ${info.student_name}`;
  document.querySelector(".studentCode").textContent = info.student_code;

  // Thông tin cá nhân cơ bản
  document.querySelector(".studentMiddleName").textContent =
    info.student_middle_name;
  document.querySelector(".studentName").textContent = info.student_name;
  document.querySelector(".studentGender").textContent = formatGender(
    info.student_gender
  );
  document.querySelector(".studentDateOfBirth").textContent = formatDate(
    info.student_date_of_birth
  );

  // Thông tin liên hệ
  document.querySelector(".studentPhone").textContent = info.student_phone;
  document.querySelector(".studentIDCard").textContent = info.student_IDCard;
  document.querySelector(".studentAddress").textContent = info.student_address;
  document.querySelector(".studentEmail").textContent = info.student_email;
  document.querySelector(".studentCountry").textContent = info.student_country;
  document.querySelector(".studentBorn").textContent = info.student_country;

  // Trạng thái
  document.querySelector(".studentStatus").textContent = formatStatus(
    info.student_status
  );
}

function formatDate(dateStr) {
  if (!dateStr) return "-";
  const date = new Date(dateStr);
  return date.toLocaleDateString("vi-VN");
}

function formatGender(gender) {
  return gender === "male" ? "Nam" : gender === "female" ? "Nữ" : "Khác";
}

function formatStatus(status) {
  switch (status) {
    case "studying":
      return "Đang học";
    case "graduated":
      return "Đã tốt nghiệp";
    case "inactive":
      return "Ngừng học";
    default:
      return "Không rõ";
  }
}

function displayStudentInfoInModal(info) {
  document.getElementById("inputMiddleName").value =
    info.student_middle_name || "";
  document.getElementById("inputName").value = info.student_name || "";
  document.getElementById("inputGender").value = info.student_gender || "other";

  // Định dạng ngày sinh về yyyy-MM-dd cho input type="date"
  const dob = info.student_date_of_birth
    ? new Date(info.student_date_of_birth).toISOString().split("T")[0]
    : "";
  document.getElementById("inputDOB").value = dob;

  document.getElementById("inputPhone").value = info.student_phone || "";
  document.getElementById("inputEmail").value = info.student_email || "";
  document.getElementById("inputIDCard").value = info.student_IDCard || "";
  document.getElementById("inputBorn").value = info.student_country || "";
  document.getElementById("inputCountry").value = info.student_country || "";
  document.getElementById("inputAddress").value = info.student_address || "";
}

function updateStudentInfo() {
  document
    .getElementById("updateStudentForm")
    .addEventListener("submit", async function (e) {
      e.preventDefault();

      const student = Storage.getUser();
      if (!student || !student.username) {
        Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
        return;
      }

      const updatedData = {
        student_gender: document.getElementById("inputGender").value,
        student_date_of_birth: document.getElementById("inputDOB").value,
        student_phone: document.getElementById("inputPhone").value.trim(),
        student_email: document.getElementById("inputEmail").value.trim(),
        student_IDCard: document.getElementById("inputIDCard").value.trim(),
        student_country: document.getElementById("inputCountry").value.trim(),
        student_address: document.getElementById("inputAddress").value.trim(),
      };

      if (!updatedData.student_email.includes("@")) {
        Swal.fire("Lỗi", "Email không hợp lệ!", "error");
        return;
      }
      console.log("Sending data:", updatedData);

      try {
        const API_BASE = "http://localhost:3000";
        const res = await fetch(
          `${API_BASE}/api/v1/student/updateStudentInfo?studentCode=${student.username}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(updatedData),
          }
        );

        const result = await res.json();

        if (result.status === "success") {
          Swal.fire(
            "Thành công",
            "Cập nhật thông tin thành công!",
            "success"
          ).then(() => {
            // Đóng modal, reload lại trang hoặc gọi fetch lại dữ liệu
            const modal = bootstrap.Modal.getInstance(
              document.getElementById("updateModal")
            );
            modal.hide();
            fetchStudentInfo(); // Gọi lại hàm để cập nhật UI
          });
        } else {
          Swal.fire("Thất bại", "Không thể cập nhật thông tin!", "error");
        }
      } catch (error) {
        console.error(error);
        Swal.fire("Lỗi", "Có lỗi khi gửi yêu cầu đến máy chủ!", "error");
      }
    });
}

```

### frontend\js\Teacher\teacher_chart.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentPassing();
  getPassingPropotion();
  getAvgScore();
  getScoreProgress();
  getCountTeaching();
  getLastUpdate();
});

async function getStudentPassing() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentPassing?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student Passing Data:", result.data);
      renderStudentPassingChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getPassingPropotion() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getPassingPropotion?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && result.data) {
      console.log("Passing Proportion Data:", result.data);
      renderPieChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu tổng thể!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getAvgScore() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getAvgScore?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Average Score Data:", result.data);
      renderAvgScoreChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được điểm trung bình!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getScoreProgress() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getScoreProgress?teacherCode=${teacher.username}`
    );
    const result = await res.json();
    console.log("Score Progress Result:", result);

    if (result.status === "success") {
      console.log("Score Progress Data:", result.data);
      renderScoreProgress(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được tiến độ điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu tiến độ điểm!", "error");
  }
}

function renderScoreProgress(datas) {
  const score = document.querySelector(".score_progress");

  if (datas.length === 0) {
    score.textContent = "Không có dữ liệu tiến độ điểm!!";
    return;
  }

  const totalClasses = datas.tong_sinh_vien;
  const enteredScores = datas.so_diem_da_nhap;
  const progressPercentage = ((enteredScores / totalClasses) * 100).toFixed(2);

  score.textContent = progressPercentage + "%";
}

async function getCountTeaching() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getCountTeaching?teacherCode=${teacher.username}`
    );
    const result = await res.json();
    console.log("Count Teaching Result:", result);
    if (result.status === "success" && result.data) {
      console.log("Count Teaching Data:", result.data);
      renderCountTeaching(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được số lượng lớp dạy!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu số lượng lớp dạy!", "error");
  }
}

function renderCountTeaching(data) {
  const countElement = document.querySelector(".count_teaching");
  if (data) {
    countElement.textContent = data;
  } else {
    countElement.textContent = "Không có dữ liệu!";
  }
  console.log("Count Teaching Data:", data);
}

async function getLastUpdate() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getLastUpdate?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && result.data) {
      console.log("Last Update Data:", result.data);
      renderLastUpdate(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được lần cuối cập nhật!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu lần cuối cập nhật!", "error");
  }
}

function renderLastUpdate(data) {
  const lastUpdateElement = document.querySelector(".last_update");
  if (data) {
    lastUpdateElement.textContent = ` ${data}`;
  } else {
    lastUpdateElement.textContent = "Không có dữ liệu cập nhật!";
  }
}

function renderStudentPassingChart(datas) {
  const ctx = document.getElementById("studentPassingChart").getContext("2d");
  const labels = datas.map((item) => `${item.subject}`);
  const totals = datas.map((item) => item.total_students);
  const passed = datas.map((item) => item.passed_students);
  console.log("Labels:", labels);
  console.log("Total Students:", totals);
  console.log("Passed Students:", passed);
  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Tổng học viên",
          data: totals,
          backgroundColor: "#42A5F5",
        },
        {
          label: "Học viên đạt",
          data: passed,
          backgroundColor: "#66BB6A",
        },
      ],
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
        },
      },
    },
  });
}

function renderPieChart(data) {
  const ctx = document.getElementById("pieChart").getContext("2d");

  const passedCount = data.passed_students;
  const notPassedCount = data.total_students - data.passed_students;

  new Chart(ctx, {
    type: "pie",
    data: {
      labels: ["Đạt (≥ 4.0)", "Không đạt (< 4.0)"],
      datasets: [
        {
          data: [passedCount, notPassedCount],
          backgroundColor: ["#4CAF50", "#FF6F61"],
        },
      ],
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          position: "top",
        },
      },
    },
  });
}

function renderAvgScoreChart(datas) {
  const ctx = document.getElementById("avgScoreChart").getContext("2d");

  const labels = datas.map((item) => `${item.class} - ${item.subject}`);
  const scores = datas.map((item) => item.average_score);

  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Điểm trung bình",
          data: scores,
          borderColor: "#FFA726",
          backgroundColor: "rgba(255, 167, 38, 0.6)",
          borderWidth: 1,
        },
      ],
    },
    options: {
      indexAxis: "y", // ✅ vẽ ngang
      responsive: true,
      plugins: {
        legend: {
          position: "top",
        },
        tooltip: {
          callbacks: {
            label: (ctx) => ` ${ctx.raw.toFixed(2)} điểm`,
          },
        },
      },
      scales: {
        x: {
          beginAtZero: true,
          max: 10,
          title: {
            display: true,
            text: "Thang điểm 10",
          },
        },
        y: {
          ticks: {
            autoSkip: false,
            maxRotation: 0,
            minRotation: 0,
          },
        },
      },
    },
  });
}

```

### frontend\js\Teacher\teacher_home_page.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getModules();
});

async function getModules() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getModuleTeaching?teacherCode=${teacher.username}`
    );

    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      const modules = result.data;
      renderModulesList(modules);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderModulesList(modules) {
  const moduleList = document.querySelector(".module-list");
  moduleList.innerHTML = ""; // Xoá nội dung cũ

  modules.forEach((module) => {
    const div = document.createElement("div");
    div.className = "col-md-3 col-sm-6";
    div.innerHTML = `
	<div class="card shadow-sm ">
        <img
          src="../images/b1.jpg"
          class="card-img-top"
          alt="..."
        />
        <div class="card-body">
          <h5 class="card-title marquee-hover">
            <span>${module["module_code"]} - ${module["module_name"]}</span>
          </h5>
          <p class="card-text marquee-hover">
            <span>${module["teacher_name"]}</span>
          </p>
          <p class="card-text card_class_name marquee-hover">
            <span>Class: ${module["class_name"]}</span>
          </p>
          <button class="btn btn-primary"
			onclick="location.href='page_student_list.html?module=${module["module_code"]}&class=${module["class_code"]}&class_subject=${module["class_subject_id"]}&class_name=${module["class_name"]}&module_name=${module["module_name"]}'">
			Access
		  </button>
        </div>
	</div>
	`;
    moduleList.appendChild(div);
  });
}

```

### frontend\js\Teacher\teacher_import_excel.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentList();
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    moduleCode: urlParams.get("module"),
    classCode: urlParams.get("class"),
    classSubjectId: urlParams.get("class_subject"),
    className: urlParams.get("class_name"),
    moduleName: urlParams.get("module_name"),
  };
}

async function getStudentCode(studentMiddleName, studentName) {
  if (!studentMiddleName || !studentName) {
    Swal.fire("Lỗi", "Không nhận được tên của sinh viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentCodeByName?studentMiddleName=${studentMiddleName}&studentName=${studentName}`
    );

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const studentCode = result.data;
      //   console.log("Student Code:", studentCode);
      return studentCode;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function parseExcelFile(file) {
  if (!file) {
    console.error("Không có file Excel được chọn");
    Swal.fire("Lỗi", "Không có file Excel được chọn!", "");
    return null;
  }

  try {
    const data = await file.arrayBuffer();
    const workbook = XLSX.read(await file.arrayBuffer(), { type: "array" });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { range: 7 });

    if (rows.length === 0) {
      console.warn("File Excel không có dữ liệu.");
      Swal.fire("Lỗi", "File Excel không có dữ liệu!", "error");
      return null;
    }

    const parsed = rows.map((row) => {
      const student_code = row["MÃ HS"] || row["MÃ\nHS"] || "";
      const hoDem = row["HỌ ĐỆM"] || row["Họ và tên đệm"] || "";
      const ten = row["TÊN"] || "";
      const score = row["Tổng điểm"] ?? row["Tổng\nđiểm"] ?? null;

      return { student_code, hoDem, ten, score };
    });

    if (parsed.length === 0) {
      console.warn("Không có dữ liệu hợp lệ trong file Excel.");
      Swal.fire("Lỗi", "Không có dữ liệu hợp lệ trong file Excel!", "error");
      return null;
    }

    return parsed;
  } catch (err) {
    console.error("❌ Lỗi khi đọc file Excel:", err);
    return null;
  }
}

async function parseNametoStudentCode(names) {
  names = names.slice(1); // Bỏ qua dòng tiêu đề
  if (!Array.isArray(names) || names.length === 0) {
    console.error("Danh sách tên không hợp lệ");
    Swal.fire("Lỗi", "Danh sách tên không hợp lệ!", "error");
    return [];
  }

  console.log("📄 Danh sách tên:", names);
  const studentCodes = [];

  for (const name of names) {
    if (name["hoDem"] && name["ten"]) {
      try {
        const studentCode = await getStudentCode(name["hoDem"], name["ten"]);
        if (!studentCode) {
          console.warn("⚠️ Không tìm thấy mã sinh viên cho:", name);
          Swal.fire(
            "Thông báo",
            `Không tìm thấy mã sinh viên cho: ${name.hoDem} ${name.ten}`,
            "warning"
          );
          continue;
        }
        studentCodes.push({
          student_code: studentCode,
          score: name.score ?? null,
        });
      } catch (err) {
        console.error("❌ Lỗi khi lấy mã sinh viên:", err);
        Swal.fire("Lỗi", "Không thể lấy mã sinh viên!", "error");
      }
    } else {
      console.warn("⚠️ Tên không hợp lệ:", name);
    }
  }

  return studentCodes;
}

async function importStudentScores(payload) {
  if (!payload || !payload.classSubjectId || !Array.isArray(payload.students)) {
    Swal.fire("Lỗi", "Dữ liệu không hợp lệ!", "error");
    console.error("Dữ liệu không hợp lệ:", payload);
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/teacher/importStudentScores`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();
    if (result.data.updatedCount === 0) {
      Swal.fire(
        "Thông báo",
        "Không có học sinh nào được cập nhật điểm!",
        "info"
      );
      return;
    }

    if (result.status === "success") {
      Swal.fire(
        "Thành công",
        `Nhập điểm thành công thành công cho ${result.data.updatedCount}! học sinh`,
        "success"
      ).then(() => {
        getStudentList();
      });
    } else {
      Swal.fire("Thông báo", "Không thể nhập điểm!", "warning");
      console.error("Lỗi khi nhập điểm:", result.message);
    }
  } catch (error) {
    console.error("❌ Lỗi khi gửi yêu cầu nhập điểm:", error);
    Swal.fire("Lỗi", "Lỗi khi gửi yêu cầu nhập điểm!", "error");
  }
}

document
  .getElementById("excelFile")
  .addEventListener("change", async function () {
    const file = this.files[0];
    const result = await parseExcelFile(file);
    const studentCodes = await parseNametoStudentCode(result);
    console.log("📄 Danh sách mã sinh viên:", studentCodes);
    const { classSubjectId } = getParams(); // lấy từ URL
    if (!classSubjectId) {
      Swal.fire("Lỗi", "Không xác định được mã lớp học!", "error");
      return;
    }

    const payload = {
      classSubjectId: classSubjectId,
      students: studentCodes,
    };
    await importStudentScores(payload);
  });

```

### frontend\js\Teacher\teacher_information.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getTeacherInformation();
});

async function getTeacherInformation() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  console.log("Teacher Information:", teacher.username);
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getTeacherInfo?teacherCode=${teacher.username}`
    );

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const teacherInfo = result.data;
      console.log("Teacher Information Data:", teacherInfo);
      renderDropdownMenu(teacherInfo);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderDropdownMenu(teacherInfo) {
  const name = teacherInfo.teacher_name || "Giảng viên";
  document.querySelectorAll(".teacher_name").forEach((el) => {
    el.textContent = name;
  });
}

```

### frontend\js\Teacher\teacher_student_list.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentList();
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    moduleCode: urlParams.get("module"),
    classCode: urlParams.get("class"),
    classSubjectId: urlParams.get("class_subject"),
    className: urlParams.get("class_name"),
    moduleName: urlParams.get("module_name"),
  };
}

function getStudentList() {
  const { moduleCode, classCode, classSubjectId, className, moduleName } =
    getParams();
  if (!moduleCode || !classCode) {
    Swal.fire("Lỗi", "Không xác định được thông tin lớp học!", "error");
    return;
  }

  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  console.log("Module Code:", moduleCode);
  console.log("Class Code:", classCode);
  console.log("Class Subject ID:", classSubjectId);
  console.log("Teacher Username:", teacher.username);
  console.log("Class Name:", className);
  console.log("Module Name:", moduleName);

  fetchStudentList(
    teacher.username,
    moduleCode,
    classCode,
    className,
    moduleName
  );
}

async function fetchStudentList(
  teacherCode,
  moduleCode,
  classCode,
  className,
  moduleName
) {
  const class_name = document.querySelector(".class_name");
  const module_name = document.querySelector(".module_name");

  if (!className || !moduleName) {
    Swal.fire("Lỗi", "Không xác định được tên lớp học hoặc môn học!", "error");
    return;
  }

  class_name.textContent = className;
  module_name.textContent = moduleName;

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentInClass?teacherCode=${teacherCode}&moduleCode=${moduleCode}&classCode=${classCode}`
    );

    const result = await res.json();
    console.log("API Response:", result);

    if (result.status === "success" && Array.isArray(result.data)) {
      renderStudentList(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu sinh viên!", "error");
  }
}

function renderStudentList(students) {
  const tbody = document.getElementById("studentTable");
  tbody.innerHTML = "";

  students.forEach((student, index) => {
    var score = 0;
    if (student["score"] === null || student["score"] === undefined) {
      score = "-";
    } else {
      score = student["score"];
    }
    const row = document.createElement("tr");
    row.innerHTML = `
	  		<td>${index + 1}</td>
            <td>${student["student_code"]}</td>
            <td>${student["student_middle_name"]}</td>
            <td>${student["student_name"]}</td>
            <td>${student["class_name"]}-1</td>
            <td>${score}</td>
            <td>
              <button
                class="btn btn-sm btn-primary"
                data-bs-toggle="modal"
                data-bs-target="#editModal"
				data-student-code="${student["student_code"]}"
                data-name="${student["student_middle_name"]} ${
      student["student_name"]
    }"
                data-class="${student["class_name"]}"
                data-score="${score}"
              >
                <i class="bi bi-pencil-square"></i> Sửa
              </button>
            </td>
	`;
    tbody.appendChild(row);
  });
}

async function updateStudentScore(studentCode, score) {
  const { classSubjectId } = getParams();

  const API_BASE = "http://localhost:3000";
  console.log("Updating score for:", {
    classSubjectId,
    studentCode,
    score,
  });
  if (!classSubjectId || !studentCode || score === "") {
    Swal.fire("Lỗi", "Thiếu dữ liệu để cập nhật điểm!", "error");
    return;
  }

  try {
    const res = await fetch(`${API_BASE}/api/v1/teacher/updateStudentScore`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        classSubjectId,
        studentCode,
        score: parseFloat(score),
      }),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Điểm đã được cập nhật!", "success");
      getStudentList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể cập nhật điểm!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

let currentStudentCode = "";

const editModal = document.getElementById("editModal");
editModal.addEventListener("show.bs.modal", function (event) {
  const button = event.relatedTarget;
  const name = button.getAttribute("data-name");
  const className = button.getAttribute("data-class");
  const score = button.getAttribute("data-score");
  const studentCode = button.getAttribute("data-student-code");
  currentStudentCode = studentCode;
  console.log("Current Student Code:", currentStudentCode);
  document.getElementById("studentName").value = name;
  document.getElementById("studentClass").value = className;
  document.getElementById("studentScore").value = score;
});

document
  .getElementById("editScoreForm")
  .addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const score = document.getElementById("studentScore").value;
    updateStudentScore(currentStudentCode, score);
  });

```
