# ==================================================
# Path: D:\VSCode\bach-nghe-student-management-website
# Detected tech: docker, javascript, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
bach-nghe-student-management-website/
├── .git/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── controllers/
│   │   │   ├── admin.controller.js
│   │   │   ├── auth.controller.js
│   │   │   ├── errors.controller.js
│   │   │   ├── student.controller.js
│   │   │   └── teacher.controller.js
│   │   ├── database/
│   │   ├── middlewares/
│   │   │   └── auth.middleware.js
│   │   ├── models/
│   │   │   ├── admin.model.js
│   │   │   ├── auth.model.js
│   │   │   ├── student.model.js
│   │   │   └── teacher.model.js
│   │   ├── routes/
│   │   │   ├── admin.router.js
│   │   │   ├── auth.router.js
│   │   │   ├── student.router.js
│   │   │   └── teacher.router.js
│   │   ├── api-error.js
│   │   ├── app.js
│   │   └── jsend.js
│   ├── .env
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
├── database/
├── frontend/
│   ├── admin/
│   │   ├── page_account_management.html
│   │   ├── page_add_certificate.html
│   │   ├── page_add_student_to_class.html
│   │   ├── page_admin.html
│   │   ├── page_certificate.html
│   │   ├── page_class_management.html
│   │   ├── page_create_account.html
│   │   ├── page_list_certificate_class.html
│   │   ├── page_list_student_in_class.html
│   │   ├── page_student_management.html
│   │   └── page_teacher_management.html
│   ├── css/
│   │   ├── account_managenment.css
│   │   ├── addmin_add_student.css
│   │   ├── admin.css
│   │   ├── admin_create_account.css
│   │   ├── certificate_page.css
│   │   ├── info_student.css
│   │   ├── list_certificate_class.css
│   │   ├── login.css
│   │   ├── page_student_list_teacher.css
│   │   ├── student.css
│   │   ├── student_managenment.css
│   │   ├── teacher.css
│   │   └── teacher_statistics.css
│   ├── images/
│   │   ├── b1.jpg
│   │   ├── b2.jpg
│   │   ├── b3.jpg
│   │   ├── bg_login.jpg
│   │   └── logo_Truong_Bach_Nghe.png
│   ├── js/
│   │   ├── Administrator/
│   │   │   ├── manage_account/
│   │   │   │   ├── account_management.js
│   │   │   │   ├── admin_add_account_list.js
│   │   │   │   └── admin_display_account_list.js
│   │   │   ├── manage_certificate/
│   │   │   │   ├── admin_add_certificate.js
│   │   │   │   ├── admin_display_cert_class.js
│   │   │   │   ├── admin_display_certificate.js
│   │   │   │   └── admin_get_student.js
│   │   │   ├── manage_class/
│   │   │   │   ├── admin_add_class.js
│   │   │   │   ├── admin_add_student_to_class.js
│   │   │   │   ├── admin_display_class.js
│   │   │   │   ├── admin_display_class_student.js
│   │   │   │   ├── admin_student_in_class.js
│   │   │   │   └── admin_update_class.js
│   │   │   ├── manage_dashboard/
│   │   │   │   ├── admin_display_stats.js
│   │   │   │   └── dashboard_chart.js
│   │   │   ├── manage_student/
│   │   │   │   ├── admin_add_student.js
│   │   │   │   ├── admin_display_student.js
│   │   │   │   ├── admin_import_student_list.js
│   │   │   │   └── admin_update_student.js
│   │   │   └── manage_teacher/
│   │   │       ├── admin_add_teacher.js
│   │   │       ├── admin_display_teacher.js
│   │   │       └── admin_update_teacher.js
│   │   ├── Authentication/
│   │   │   ├── login.js
│   │   │   ├── logout.js
│   │   │   └── storage.js
│   │   ├── Student/
│   │   │   ├── student.js
│   │   │   ├── student_cert.js
│   │   │   └── student_information.js
│   │   ├── Teacher/
│   │   │   ├── teacher_chart.js
│   │   │   ├── teacher_home_page.js
│   │   │   ├── teacher_import_excel.js
│   │   │   ├── teacher_information.js
│   │   │   └── teacher_student_list.js
│   │   └── toast.js
│   ├── login/
│   │   └── login.html
│   ├── student/
│   │   ├── page_cert_student.html
│   │   ├── page_info_student.html
│   │   └── page_student.html
│   └── teacher/
│       ├── page_score_statistics.html
│       ├── page_student_list.html
│       └── page_teacher_home.html
├── .gitignore
└── README.md
```

## FILE CONTENTS

### backend\server.js
```js
require("dotenv").config();
const app = require("./src/app");

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}.`);
});

```

### backend\src\api-error.js
```js
class ApiError extends Error {
    constructor(statusCode, message, headers = {}) {
        super();
        this.statusCode = statusCode;
        this.message = message;
        this.headers = headers;
    }
}

module.exports = ApiError;
```

### backend\src\app.js
```js
const express = require("express");
const cors = require("cors");
const JSend = require("./jsend");
const knex = require("./database/knex");
const session = require("express-session");

const authRouter = require("./routes/auth.router");
const studentRouter = require("./routes/student.router");
const teacherRouter = require("./routes/teacher.router");
const adminRouter = require("./routes/admin.router");

const {
  resourceNotFound,
  handleError,
} = require("./controllers/errors.controller");
const app = express();

app.use(
  cors({
    origin: [
      "http://localhost:5501",
      "http://localhost",
      "http://127.0.0.1:5501",
    ],
    credentials: true, // Cho phép gửi cookie qua CORS
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false },
  })
);

app.get("/api/check-connection", async (req, res) => {
  try {
    await knex.raw("SELECT 1");
    res.json({ message: "Connect Successfully!" });
  } catch (error) {
    res.status(500).json({
      error: "Cannot Connect Successfully!",
      details: error.message,
    });
  }
});

app.get("/", (req, res) => {
  return res.json(JSend.success());
});

app.use("/public", express.static("public"));

authRouter.setup(app);
studentRouter.setup(app);
teacherRouter.setup(app);
adminRouter.setup(app);

//handle 404 response
app.use(resourceNotFound);

app.use(handleError);

module.exports = app;
```

### backend\src\jsend.js
```js
/**
 * @param {object | null} data
 * @returns {{status: 'success', data: object | null}}
 */
function success(data = "Welcome to Bach Nghe Student Management Website!") {
  return {
    status: "success",
    data: data,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'fail', message: string, data: object | undefined}}
 */
function fail(message, data = null) {
  if (data) {
    return {
      status: "fail",
      message,
      data,
    };
  }
  return {
    status: "fail",
    message,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'error', message: string, data: object | undefined}}
 */
function error(message, data = null) {
  if (data) {
    return {
      status: "error",
      message,
      data,
    };
  }
  return {
    status: "error",
    message,
  };
}

module.exports = {
  success,
  fail,
  error,
};

```

### backend\src\controllers\admin.controller.js
```js
const adminService = require("../models/admin.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");

// Account Management
async function createStudentAccount(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const student = await adminService.createStudentAccount({
      username,
      password,
    });

    if (!student) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(student));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function createTeacherAccount(req, res, next) {
  const { username, password, role } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const teacher = await adminService.createTeacherAccount({
      username,
      password,
    });

    if (!teacher) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(teacher));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getStudentAccount(req, res, next) {
  try {
    const students = await adminService.getStudentAccount();
    if (!students) {
      return next(new ApiError(404, "No student accounts found"));
    }
    return res.status(200).json(JSend.success(students));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getAccountList(req, res, next) {
  try {
    const users = await adminService.getAccountList();
    if (!users) {
      return next(new ApiError(404, "No user accounts found"));
    }
    return res.status(200).json(JSend.success(users));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getTeacherAccount(req, res, next) {
  try {
    const users = await adminService.getTeacherAccount();
    if (!users) {
      return next(new ApiError(404, "No user accounts found"));
    }
    return res.status(200).json(JSend.success(users));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function updateAccount(req, res, next) {
  const { currentCode, newPassword, newStatus } = req.body;

  if (!currentCode || newPassword === undefined || isNaN(newStatus)) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const updatedUser = await adminService.updateAccount({
      currentCode,
      newPassword,
      newStatus,
    });

    if (!updatedUser) {
      return next(new ApiError(404, "Account not found"));
    }

    return res.status(200).json(JSend.success(updatedUser));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function addNewAccount(req, res, next) {
  const datas = req.body;

  if (!datas || !Array.isArray(datas)) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const listAccount = await adminService.addNewAccount(datas);

    if (!listAccount) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(listAccount));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Student Management
async function getStudentList(req, res, next) {
  try {
    const students = await adminService.getStudentList();

    if (!students) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(students));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function importStudentList(req, res, next) {
  const payload = req.body;

  if (!payload || !Array.isArray(payload)) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const studentList = await adminService.importStudentList(payload);

    if (!studentList) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(studentList));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getLastStudentCode(req, res, next) {
  try {
    const studentCode = await adminService.getLastStudentCode();

    if (!studentCode) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(studentCode));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function addNewStudent(req, res, next) {
  const student = req.body;

  if (!student) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const newStudent = await adminService.addNewStudent(student);

    if (!newStudent) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(newStudent));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function updateStudentInfor(req, res, next) {
  const student = req.body;

  if (!student) {
    return next(new ApiError(404, "Don't have any data"));
  }

  try {
    const studentUpdate = await adminService.updateStudentInfor(student);

    if (!studentUpdate) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(studentUpdate));
  } catch (error) {
    console.error(error);
    return res
      .status(500)
      .json(JSend.error("Internal server error", error.message));
  }
}

async function getListStudentCode(req, res, next) {
  try {
    const studentCode = await adminService.getListStudentCode();

    if (!studentCode) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(studentCode));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getStudentNotInClass(req, res, next) {
  const class_subject_id = req.query.class_subject_id;
  try {
    const listStudent = await adminService.getStudentNotInClass(
      class_subject_id
    );

    if (!listStudent) {
      return next(new ApiError(404, "update fail"));
    }

    return res.status(200).json(JSend.success(listStudent));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getStudentInClass(req, res, next) {
  const class_subject_id = req.query.class_subject_id;
  try {
    const listStudent = await adminService.getStudentInClass(class_subject_id);

    if (!listStudent) {
      return next(new ApiError(404, "update fail"));
    }

    return res.status(200).json(JSend.success(listStudent));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Teacher Management

async function getTeacherList(req, res, next) {
  try {
    const teachers = await adminService.getTeacherList();

    if (!teachers) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(teachers));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getLastTeacherCode(req, res, next) {
  try {
    const teacherCode = await adminService.getLastTeacherCode();

    if (!teacherCode) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(teacherCode));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function addNewTeacher(req, res, next) {
  const teacher = req.body;

  if (!teacher) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const newTeacher = await adminService.addNewTeacher(teacher);

    if (!newTeacher) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(newTeacher));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function updateTeacherInfor(req, res, next) {
  const teacher = req.body;

  if (!teacher) {
    return next(new ApiError(404, "Don't have any data"));
  }

  try {
    const teacherUpdate = await adminService.updateTeacherInfor(teacher);

    if (!teacherUpdate) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(teacherUpdate));
  } catch (error) {
    console.error(error);
    return res
      .status(500)
      .json(JSend.error("Internal server error", error.message));
  }
}

async function getListTeacherCode(req, res, next) {
  try {
    const teacherCode = await adminService.getListTeacherCode();

    if (!teacherCode) {
      return next(new ApiError(404, "Don't have any data"));
    }

    return res.status(200).json(JSend.success(teacherCode));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Class & Enrollment

async function createClassWithTeacher(req, res, next) {
  const { classID, moduleID, semesterID, teacherCode } = req.body;

  if (!classID || !moduleID || !semesterID || !teacherCode) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    const newClass = await adminService.createClassWithTeacher({
      classID,
      moduleID,
      semesterID,
      teacherCode,
    });

    if (!newClass) {
      return next(new ApiError(401, "Create class failed"));
    }

    return res.status(201).json(JSend.success(newClass));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function addStudentsToClass(req, res, next) {
  const { class_subject_id, student_codes } = req.body;

  if (
    typeof class_subject_id === "undefined" ||
    class_subject_id === null ||
    !Array.isArray(student_codes) ||
    student_codes.length === 0
  ) {
    return res.status(400).json(JSend.fail("Missing or invalid data"));
  }

  try {
    const result = await adminService.addStudentsToClass({
      class_subject_id,
      student_codes,
    });

    return res.status(201).json(JSend.success({ added: result }));
  } catch (err) {
    console.error(err);
    return next(new ApiError(500, "Internal server error"));
  }
}

async function updateClass(req, res, next) {
  const payload = req.body;

  if (!payload) {
    return res.status(400).json(JSend.fail("Invalid input"));
  }

  try {
    const updateData = await adminService.updateClass(payload);

    if (!updateData) {
      return next(new ApiError(404, "update fail"));
    }

    return res.status(200).json(JSend.success(updateData));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getClassCodeAndSemester(req, res, next) {
  try {
    const listClassWithSemester = await adminService.getClassCodeAndSemester();

    if (!listClassWithSemester) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(listClassWithSemester));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Module Management

async function getModuleList(req, res, next) {
  try {
    const listModule = await adminService.getModuleList();

    if (!listModule) {
      return next(new ApiError(404, "Insert fail"));
    }

    return res.status(200).json(JSend.success(listModule));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getModuleCode(req, res, next) {
  try {
    const listModule = await adminService.getModuleCode();

    if (!listModule) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(listModule));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getModuleFilter(req, res, next) {
  try {
    const listModule = await adminService.getModuleFilter();

    if (!listModule) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(listModule));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Certificate Management
async function getCertificates(req, res, next) {
  class_subject_id = req.query.class_subject_id;

  try {
    const listCertificate = await adminService.getCertificates(
      class_subject_id
    );

    if (!listCertificate) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(listCertificate));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getStudentEligible(req, res, next) {
  try {
    const studentList = await adminService.getStudentEligible();

    if (!studentList) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(studentList));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function addCertificates(req, res, next) {
  const { class_subject_id, student_codes } = req.body;

  try {
    const addCert = await adminService.addCertificates({
      class_subject_id,
      student_codes,
    });

    if (!addCert) {
      return next(new ApiError(404, "Add fail"));
    }

    return res.status(200).json(JSend.success(addCert));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getClassCert(req, res, next) {
  try {
    const listCertClass = await adminService.getClassCert();

    if (!listCertClass) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(listCertClass));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

// Dash Board Admin
async function getDashboardStats(req, res, next) {
  try {
    const dashBoardStats = await adminService.getDashboardStats();

    if (!dashBoardStats) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(dashBoardStats));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getCountStudentInClass(req, res, next) {
  try {
    const counts = await adminService.getCountStudentInClass();

    if (!counts) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(counts));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

async function getModuleCertificateStats(req, res, next) {
  try {
    const counts = await adminService.getModuleCertificateStats();

    if (!counts) {
      return next(new ApiError(404, "Get fail"));
    }

    return res.status(200).json(JSend.success(counts));
  } catch (error) {
    console.error(error);
    return res.status(500).json(JSend.error("Internal server error", error));
  }
}

module.exports = {
  // Account Management
  createStudentAccount,
  createTeacherAccount,
  addNewAccount,
  getAccountList,
  updateAccount,
  getTeacherAccount,
  getStudentAccount,

  // Student Management
  getStudentList,
  getLastStudentCode,
  addNewStudent,
  updateStudentInfor,
  importStudentList,
  getListStudentCode,
  getStudentInClass,
  getStudentNotInClass,

  // Teacher Management
  getTeacherList,
  getLastTeacherCode,
  addNewTeacher,
  updateTeacherInfor,
  getListTeacherCode,

  // Class & Enrollment
  createClassWithTeacher,
  updateClass,
  addStudentsToClass,
  getClassCodeAndSemester,

  // Module Management
  getModuleList,
  getModuleCode,
  getModuleFilter,

  // Certificate Management
  getCertificates,
  getStudentEligible,
  addCertificates,
  getClassCert,

  // DashBoard Admin
  getDashboardStats,
  getCountStudentInClass,
  getModuleCertificateStats,
};

```

### backend\src\controllers\auth.controller.js
```js
const authService = require("../models/auth.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const jwt = require("jsonwebtoken");

async function login(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return next(new ApiError(400, "Username and password are required"));
  }

  try {
    const user = await authService.login(username, password);

    if (!user) {
      return next(new ApiError(401, "Invalid username or password"));
    }

    // Tạo JWT token (bạn có thể điều chỉnh secret và thời gian hết hạn)
    const token = jwt.sign(
      {
        id: user.user_id,
        username: user.user_username,
        role: user.user_role,
        status: user.user_status,
      },
      process.env.JWT_SECRET,
      {
        expiresIn: "48h",
      }
    );

    res.json(
      JSend.success({
        message: "Login successful",
        token,
        user: {
          id: user.user_id,
          username: user.user_username,
          role: user.user_role,
          status: user.user_status,
        },
      })
    );
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid username or password"));
  }
}

async function logout(req, res) {
  req.session.destroy();
  return res.status(200).json(JSend.success({ message: "Logout successful" }));
}

module.exports = {
  login,
  logout,
};

```

### backend\src\controllers\errors.controller.js
```js
const ApiError = require('../api-error');
const JSend = require('../jsend');

function methodNotAllowed(req, res, next) {
    if (req.route) {
        // Determine which HTTP methods are supported
        const httpMethods = Object.keys(req.route.methods)
            .filter((method) => method !== '_all')
            .map((method) => method.toUpperCase());
        return next(
            new ApiError(405, 'Method Not Allowed', {
                Allow: httpMethods.join(', '),
            })
        );
    }
    return next();
}

function resourceNotFound(req, res, next) {
    // Handler for unknown URL path.
    // Call next() to pass to the error handling function.
    return next(new ApiError(404, 'Resource not found'));
}

function handleError(error, req, res, next) {
    // The centralized error handling function.
    // In any route handler, calling next(error)
    // will pass to this error handling function.
    if (res.headersSent) {
        return next(error);
    }
    const statusCode = error.statusCode || 500;
    const message = error.message || 'Internal Server Error';
    return res
        .status(statusCode)
        .set(error.headers || {})
        .json(
            statusCode >= 500 ? JSend.error(message) : JSend.fail(message)
        );
}

module.exports = {
    methodNotAllowed,
    resourceNotFound,
    handleError,
};
```

### backend\src\controllers\student.controller.js
```js
const studentService = require("../models/student.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");

async function getScore(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const score = await studentService.getAllSubjectScore(studentCode);

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getScoreBySemester(req, res, next) {
  const { studentCode, semester } = req.query;

  if (!studentCode || !semester) {
    return next(new ApiError(400, "Student code and Semester is required"));
  }

  try {
    const score = await studentService.filterSubjectScoreBySemester(
      studentCode,
      semester
    );

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    if (score.length === 0) {
      return next(
        new ApiError(
          404,
          "The student don't have scores found in this semester"
        )
      );
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const studentInfo = await studentService.getStudentInfo(studentCode);

    if (!studentInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(studentInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function updateStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;
  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  const {
    student_date_of_birth,
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
    student_gender,
  } = req.body;

  if (
    !student_address ||
    !student_email ||
    !student_phone ||
    !student_IDCard ||
    !student_country
  ) {
    return next(new ApiError(400, "All fields are required"));
  }
  //   let dateOfBirth = null;
  //   if (student_date_of_birth) {
  //     dateOfBirth = moment(student_date_of_birth, "MM-DD-YYYY").format(
  //       "YYYY-MM-DD"
  //     );
  //   }

  const updateData = {
    student_date_of_birth,
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
    student_gender,
  };

  try {
    const updatedStudent = await studentService.updateStudentInfo(
      studentCode,
      updateData
    );
    if (!updatedStudent) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

async function getCertificatesOfStudent(req, res, next) {
  const studentCode = req.query.studentCode;

  try {
    const listCerts = await studentService.getCertificatesOfStudent(
      studentCode
    );
    if (!listCerts) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(listCerts));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

module.exports = {
  getScore,
  getScoreBySemester,
  getStudentInfo,
  updateStudentInfo,
  getCertificatesOfStudent,
};

```

### backend\src\controllers\teacher.controller.js
```js
const teacherService = require("../models/teacher.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const moment = require("moment");

async function getTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const teacherInfo = await teacherService.getTeacherInfo(teacherCode);

    if (!teacherInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(teacherInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function updateTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "Teacher code is required"));
  }

  const {
    teacher_date_of_birth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  } = req.body;

  if (
    !teacher_date_of_birth ||
    !teacher_gender ||
    !teacher_address ||
    !teacher_email ||
    !teacher_phone
  ) {
    return next(new ApiError(400, "All fields are required"));
  }
  let dateOfBirth = null;
  if (teacher_date_of_birth) {
    dateOfBirth = moment(teacher_date_of_birth, "DD-MM-YYYY").format(
      "YYYY-MM-DD"
    );
  }

  const updateData = {
    teacher_date_of_birth: dateOfBirth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  };

  try {
    const updatedTeacher = await teacherService.updateTeacherInfo(
      teacherCode,
      updateData
    );
    if (!updatedTeacher) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

async function getModuleTeaching(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const moduleTeaching = await teacherService.getModuleTeaching(teacherCode);

    if (!moduleTeaching) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(moduleTeaching));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function getStudentInClass(req, res, next) {
  const { teacherCode, moduleCode, classCode } = req.query;

  if (!teacherCode || !moduleCode || !classCode) {
    return next(new ApiError(400, "All parameters are required"));
  }

  try {
    const students = await teacherService.getStudentInClass({
      teacherCode,
      moduleCode,
      classCode,
    });

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function updateStudentScore(req, res, next) {
  const { classSubjectId, studentCode, score } = req.body;

  if (
    !classSubjectId ||
    !studentCode ||
    score === undefined ||
    score === null
  ) {
    return next(new ApiError(400, "All parameters are required"));
  }

  try {
    const scores = await teacherService.updateStudentScore(
      classSubjectId,
      studentCode,
      score
    );

    if (!scores) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(scores));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function getStudentPassing(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getStudentPassing(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getPassingPropotion(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getPassingPropotion(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getAvgScore(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const students = await teacherService.getAvgScore(teacherCode);

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getStudentCodeByName(req, res, next) {
  const { studentMiddleName, studentName } = req.query;

  if (!studentMiddleName || !studentName) {
    return next(
      new ApiError(
        400,
        "Both student middle name and student name are required"
      )
    );
  }

  try {
    const studentCode = await teacherService.getStudentCodeByName(
      studentMiddleName,
      studentName
    );

    if (!studentCode) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(studentCode));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function importStudentScores(req, res, next) {
  const { classSubjectId, students } = req.body;

  if (!classSubjectId || !students || !Array.isArray(students)) {
    return next(new ApiError(400, "Invalid input data"));
  }

  try {
    const result = await teacherService.importStudentScores(
      classSubjectId,
      students
    );

    /*
	{
	Testing data structure:
		"classSubjectId" : "2",
		"students" : [
			{"student_code": "0092/24-THUD", "score": ""},
			{"student_code": "0093/24-THUD", "score": 3.006666666666667},
			{"student_code": "0094/24-THUD", "score": 3.8},
			{"student_code": "0095/24-THUD", "score": 7.466666666666667},
			{"student_code": "0096/24-THUD", "score": 5},
			{"student_code": "0097/24-THUD", "score": 6},
			{"student_code": "0098/24-THUD", "score": 7},
			{"student_code": "0099/24-THUD", "score": 8},
			{"student_code": "0100/24-THUD", "score": 9},
			{"student_code": "0101/24-THUD", "score": 10}
		]
	}
	*/

    if (!result) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(result));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

async function getScoreProgress(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const progress = await teacherService.getScoreProgress(teacherCode);

    if (!progress) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(progress));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getCountTeaching(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const count = await teacherService.getCountTeaching(teacherCode);

    if (count === null) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(count));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

async function getLastUpdate(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }
  try {
    const lastUpdate = await teacherService.getLastUpdate(teacherCode);

    if (!lastUpdate) {
      return next(new ApiError(401, "Data not found"));
    }

    const updatedAt = Object.values(lastUpdate)[0]; // lấy giá trị từ 'max(`updated_at`)' key
    const formatted = moment(updatedAt).format("HH:mm DD/MM/YYYY ");

    return res.json(JSend.success(formatted));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, `${error.message}`));
  }
}

module.exports = {
  getTeacherInfo,
  updateTeacherInfo,
  getModuleTeaching,
  getStudentInClass,
  updateStudentScore,
  getStudentPassing,
  getPassingPropotion,
  getAvgScore,
  getStudentCodeByName,
  importStudentScores,
  getScoreProgress,
  getCountTeaching,
  getLastUpdate,
};

```

### backend\src\middlewares\auth.middleware.js
```js

```

### backend\src\models\admin.model.js
```js
const knex = require("../database/knex");
const moment = require("moment");

const admin = {
  createStudentAccount: async ({ username, password }) => {
    const student = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
    });

    if (student.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedStudent = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedStudent;
    }

    return null;
  },

  createTeacherAccount: async ({ username, password }) => {
    const teacher = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
      user_role: 2, // Assuming a role field exists
    });

    if (teacher.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedTeacher = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedTeacher;
    }

    return null;
  },

  checkUserAccount: async (username) => {
    const user = await knex("system_user")
      .where({ user_username: username })
      .first();

    if (user) {
      return user;
    }

    return null;
  },

  getAccountList: async () => {
    const users = await knex("system_user")
      .select("*")
      .whereNot({ user_role: 0 }) // 0 = admin
      .orderBy("user_role", "asc")
      .orderBy("user_username", "asc");

    if (users.length === 0) return null;

    const result = [];

    for (const user of users) {
      let roleName = "";
      let extraInfo = null;

      if (user.user_role === 1) {
        roleName = "Học viên";
        extraInfo = await knex("student")
          .select(
            "student_middle_name",
            "student_name",
            "student_email",
            "student_phone"
          )
          .where({ student_code: user.user_username })
          .first();
      } else if (user.user_role === 2) {
        roleName = "Giảng viên";
        extraInfo = await knex("teacher")
          .select("teacher_name", "teacher_email", "teacher_phone")
          .where({ teacher_code: user.user_username })
          .first();
      }

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  getStudentAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 1, // Assuming 1 is the role for students
    });

    if (users.length === 0) {
      return null;
    }

    const result = [];

    for (const user of users) {
      let extraInfo = null;
      let roleName = "";
      roleName = "Học viên";
      extraInfo = await knex("student")
        .select(
          "student_middle_name",
          "student_name",
          "student_email",
          "student_phone"
        )
        .where({ student_code: user.user_username })
        .first();

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  getTeacherAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 2, // Assuming 2 is the role for teachers
    });

    if (users.length === 0) {
      return null;
    }

    const result = [];

    for (const user of users) {
      let extraInfo = null;
      let roleName = "";
      roleName = "Giảng viên";
      extraInfo = await knex("teacher")
        .select("teacher_name", "teacher_email", "teacher_phone")
        .where({ teacher_code: user.user_username })
        .first();

      result.push({
        user_id: user.user_id,
        user_username: user.user_username,
        user_pass: user.user_pass,
        user_role: roleName,
        user_status: user.user_status,
        info: extraInfo || null,
      });
    }

    return result;
  },

  createClassWithTeacher: async ({
    classID,
    moduleID,
    semesterID,
    teacherCode,
  }) => {
    const trx = await knex.transaction();
    try {
      const [clsId] = await trx("class_subject").insert({
        class_id: classID,
        module_id: moduleID,
        semester_id: semesterID,
      });

      if (!clsId) {
        throw new Error("Failed to insert class_subject");
      }

      await trx("teacher_subject_class").insert({
        teacher_code: teacherCode,
        class_subject_id: clsId,
      });

      await trx.commit();
      const newClass = await knex("class_subject")
        .where("class_subject.class_subject_id", clsId)
        .join("class", "class_subject.class_id", "class.class_id")
        .join("module", "class_subject.module_id", "module.module_id")
        .join("semester", "class_subject.semester_id", "semester.semester_id")
        .join(
          "teacher_subject_class",
          "class_subject.class_subject_id",
          "teacher_subject_class.class_subject_id"
        )
        .join(
          "teacher",
          "teacher_subject_class.teacher_code",
          "teacher.teacher_code"
        )
        .select(
          "class_subject.class_subject_id",
          "module.module_name",
          "class.class_name",
          "semester.semester_number",
          "teacher.teacher_name"
        )
        .first();

      return newClass;
    } catch (error) {
      await trx.rollback();
      console.error("Error creating class_subject:", error.message);
      throw error;
    }
  },

  updateClass: async (payload) => {
    if (!payload.classSubjectID) {
      throw new Error("Thiếu class_subject_id");
    }

    const trx = await knex.transaction();
    try {
      const updateStatus = await trx("class_subject")
        .where({ class_subject_id: payload.classSubjectID })
        .update({
          semester_id: payload.semesterID,
          class_status: payload.classStatus,
        });

      const exist = await trx("teacher_subject_class")
        .select("*")
        .where({ class_subject_id: payload.classSubjectID });

      if (exist.length === 0) {
        await trx("teacher_subject_class").insert({
          teacher_code: payload.teacherCode,
          class_subject_id: payload.classSubjectID,
        });
      } else {
        await trx("teacher_subject_class")
          .update({ teacher_code: payload.teacherCode })
          .where({ class_subject_id: payload.classSubjectID });
      }

      await trx.commit();

      return {
        class_subject_updated: updateStatus,
        teacher_updated: payload.teacherCode,
      };
    } catch (error) {
      await trx.rollback();
      console.error("Error updating class_subject:", error.message);
      throw error;
    }
  },

  getClassCodeAndSemester: async () => {
    const classes = await knex("class").select("*");
    const result = [];

    if (classes && classes.length > 0) {
      for (const classItem of classes) {
        const semester = await knex("semester")
          .select("*")
          .where({ class_id: classItem.class_id });

        result.push({ class: classItem, semesters: semester });
      }
    }

    return result;
  },

  getModuleCode: async () => {
    const module = await knex("module").select("*");

    if (!module) {
      return null;
    }

    return module;
  },

  addStudentsToClass: async ({ class_subject_id, student_codes }) => {
    const trx = await knex.transaction();
    try {
      // Kiểm tra class_subject_id có tồn tại không
      const classSubject = await trx("class_subject")
        .where({ class_subject_id })
        .first();

      if (!classSubject) {
        throw new Error("Class subject not found");
      }

      const students = [];

      for (const studentCode of student_codes) {
        try {
          // Thêm vào class_student
          await trx("class_student").insert({
            class_subject_id,
            student_code: studentCode,
          });

          // Thêm vào score (với điểm NULL ban đầu)
          await trx("score").insert({
            class_subject_id,
            student_code: studentCode,
            score: null, // optional vì mặc định đã là null
          });

          students.push(studentCode);
        } catch (err) {
          // Nếu bị duplicate (đã tồn tại trong class_student hoặc score), ghi log và bỏ qua
          console.error("Lỗi khi thêm sinh viên:", err.message);

          // Nếu lỗi không phải duplicate thì rollback
          if (!err.message.includes("duplicate")) {
            throw err;
          }
        }
      }

      await trx.commit();
      return students;
    } catch (error) {
      await trx.rollback();
      console.error("Error adding students to class subject:", error.message);
      throw error;
    }
  },

  getModuleList: async () => {
    const result = await knex("class_subject as cs")
      .join("class as c", "cs.class_id", "c.class_id")
      .join("module as m", "cs.module_id", "m.module_id")
      .join("semester as s", "cs.semester_id", "s.semester_id")
      .leftJoin(
        "teacher_subject_class as tsc",
        "cs.class_subject_id",
        "tsc.class_subject_id"
      )
      .leftJoin("teacher as t", "tsc.teacher_code", "t.teacher_code")
      .select(
        "cs.class_subject_id",
        "c.class_id",
        "c.class_code",
        "c.class_name",
        "m.module_code",
        "m.module_name",
        "s.semester_number",
        "cs.class_status",
        "s.semester_id",
        "s.semester_start_date",
        "s.semester_end_date",
        "tsc.teacher_code",
        "t.teacher_name"
      )
      .orderBy("s.semester_number", "asc");

    if (!result) return null;

    return result;
  },

  updateAccount: async ({ currentCode, newPassword, newStatus }) => {
    const updates = {};

    // chỉ thêm nếu có giá trị
    if (typeof newPassword === "string" && newPassword.trim() !== "") {
      updates.user_pass = newPassword.trim();
    }

    if (typeof newStatus === "number") {
      updates.user_status = newStatus;
    }

    // nếu không có gì để update, thì báo lỗi
    if (Object.keys(updates).length === 0) {
      throw new Error("No valid fields provided for update.");
    }

    const updatedRows = await knex("system_user")
      .where({ user_username: currentCode })
      .update(updates);

    return updatedRows;
  },

  getStudentList: async () => {
    const students = await knex("student").select("*");

    if (students.length === 0) {
      return null;
    }

    const result = [];
    let formatted = 0;
    for (const student of students) {
      if (student.student_date_of_birth) {
        const dateOfBirth = student.student_date_of_birth; // lấy giá trị từ 'max(`updated_at`)' key
        formatted = moment(dateOfBirth).format("DD/MM/YYYY ");
      }

      result.push({
        student_code: student.student_code,
        student_middle_name: student.student_middle_name,
        student_name: student.student_name,
        student_date_of_birth: formatted,
        student_gender: student.student_gender,
        student_address: student.student_address,
        student_email: student.student_email,
        student_phone: student.student_phone,
        student_status: student.student_status,
        student_IDCard: student.student_IDCard,
        student_country: student.student_country,
      });
    }

    return result;
  },

  importStudentList: async (students) => {
    const inserted = [];
    const skipped = [];
    for (const student of students) {
      try {
        const exists = await knex("student")
          .where({
            student_middle_name: student.student_middle_name,
            student_name: student.student_name,
          })
          .select("*")
          .first();

        if (exists) {
          skipped.push(
            student.student_middle_name + " " + student.student_name
          );
          continue;
        }

        if (student.student_middle_name === "" || student.student_name === "") {
          skipped.push(
            student.student_middle_name + " " + student.student_name
          );
          continue;
        }

        let formatted = 0;
        if (student.student_date_of_birth) {
          formatted = moment(
            student.student_date_of_birth,
            "DD/MM/YYYY"
          ).format("YYYY-MM-DD");
        }

        if (
          student.student_gender === null ||
          student.student_gender === "" ||
          student.student_gender === undefined
        ) {
          student.student_gender = "other";
        }

        await knex("student").insert({
          student_code: student.student_code,
          student_middle_name: student.student_middle_name,
          student_name: student.student_name,
          student_date_of_birth: formatted,
          student_gender: student.student_gender,
        });
        inserted.push(student.student_middle_name + " " + student.student_name);
      } catch (error) {
        console.error(
          `Error processing student ${student.student_code}:`,
          error
        );
        continue;
      }
    }
    // console.log("skip: \n" + skipped);
    // console.log("insert: \n" + inserted);
    return {
      insertedCount: inserted.length,
      inserted,
      skipped,
    };
  },

  getLastStudentCode: async () => {
    const stCode = await knex("student")
      .select("student_code")
      .orderBy("student_code", "desc")
      .limit(1);

    if (!stCode) {
      return null;
    }

    return stCode[0];
  },

  addNewStudent: async (student) => {
    let formatted = 0;
    const inserted = [];
    if (student.student_date_of_birth) {
      formatted = moment(student.student_date_of_birth, "DD/MM/YYYY").format(
        "YYYY-MM-DD"
      );
    }
    const newStudent = await knex("student").insert({
      student_code: student.student_code,
      student_middle_name: student.student_middle_name,
      student_name: student.student_name,
      student_phone: student.student_phone,
    });

    if (newStudent) {
      inserted.push({
        student_code: student.student_code,
        student_middle_name: student.student_middle_name,
        student_name: student.student_name,
        student_phone: student.student_phone,
      });
      return inserted[0];
    }

    return null;
  },

  updateStudentInfor: async (student) => {
    const updateCount = await knex("student")
      .where({ student_code: student.student_code })
      .update({
        // student_code: student.student_code,
        student_middle_name: student.student_middle_name,
        student_name: student.student_name,
        student_status: student.student_status,
      });

    if (updateCount === 0) return null;

    return { message: "Cập nhật thành công", updated: updateCount };
  },

  getTeacherList: async () => {
    const teachers = await knex("teacher").select("*");

    if (teachers.length === 0) {
      return null;
    }

    const result = [];
    let formatted = 0;
    for (const teacher of teachers) {
      if (teacher.teacher_date_of_birth) {
        const dateOfBirth = teacher.teacher_date_of_birth; // lấy giá trị từ 'max(`updated_at`)' key
        formatted = moment(dateOfBirth).format("DD/MM/YYYY ");
      }

      result.push({
        teacher_code: teacher.teacher_code,
        teacher_name: teacher.teacher_name,
        teacher_date_of_birth: formatted,
        teacher_gender: teacher.teacher_gender,
        teacher_address: teacher.teacher_address,
        teacher_email: teacher.teacher_email,
        teacher_phone: teacher.teacher_phone,
        teacher_status: teacher.teacher_status,
      });
    }

    return result;
  },

  getLastTeacherCode: async () => {
    const teacherCode = await knex("teacher")
      .select("teacher_code")
      .orderBy("teacher_code", "desc")
      .limit(1);

    if (!teacherCode) {
      return null;
    }

    return teacherCode[0];
  },

  addNewTeacher: async (teacher) => {
    const inserted = [];
    console.log(teacher.teacher_date_of_birth);
    const newTeacher = await knex("teacher").insert({
      teacher_code: teacher.teacher_code,
      teacher_name: teacher.teacher_name,
      teacher_date_of_birth: teacher.teacher_date_of_birth,
      teacher_gender: teacher.teacher_gender,
      teacher_address: teacher.teacher_address,
      teacher_email: teacher.teacher_email,
      teacher_phone: teacher.teacher_phone,
    });

    if (newTeacher) {
      inserted.push({
        teacher_code: teacher.teacher_code,
        teacher_name: teacher.teacher_name,
        teacher_date_of_birth: teacher.teacher_date_of_birth,
        teacher_gender: teacher.teacher_gender,
        teacher_address: teacher.teacher_address,
        teacher_email: teacher.teacher_email,
        teacher_phone: teacher.teacher_phone,
      });
      return inserted[0];
    }

    return null;
  },

  updateTeacherInfor: async (teacher) => {
    let updateCount = 0;
    if (teacher.teacher_date_of_birth) {
      updateCount = await knex("teacher")
        .where({ teacher_code: teacher.teacher_code })
        .update({
          teacher_name: teacher.teacher_name,
          teacher_date_of_birth: teacher.teacher_date_of_birth,
          teacher_gender: teacher.teacher_gender,
          teacher_address: teacher.teacher_address,
          teacher_email: teacher.teacher_email,
          teacher_phone: teacher.teacher_phone,
          teacher_status: teacher.teacher_status,
        });
    } else {
      updateCount = await knex("teacher")
        .where({ teacher_code: teacher.teacher_code })
        .update({
          teacher_name: teacher.teacher_name,
          teacher_gender: teacher.teacher_gender,
          teacher_address: teacher.teacher_address,
          teacher_email: teacher.teacher_email,
          teacher_phone: teacher.teacher_phone,
          teacher_status: teacher.teacher_status,
        });
    }

    if (updateCount === 0) return null;

    return { message: "Cập nhật thành công", updated: updateCount };
  },

  getListStudentCode: async () => {
    const result = await knex("student")
      .select("student_code", "student_middle_name", "student_name")
      .whereNotIn("student_code", function () {
        this.select("user_username").from("system_user");
      });

    if (result.length == 0) {
      return null;
    }

    return result;
  },

  getStudentNotInClass: async (class_subject_id) => {
    const result = await knex("student")
      .select("student_code", "student_middle_name", "student_name")
      .whereNotIn("student_code", function () {
        this.select("student_code")
          .from("class_student")
          .where({ class_subject_id: class_subject_id });
      });

    if (result.length == 0) return null;

    return result;
  },

  getStudentInClass: async (class_subject_id) => {
    const result = await knex("student")
      .select("student_code", "student_middle_name", "student_name")
      .whereIn("student_code", function () {
        this.select("student_code")
          .from("class_student")
          .where({ class_subject_id: class_subject_id });
      });

    if (result.length == 0) return null;

    return result;
  },

  getListTeacherCode: async () => {
    const result = await knex("teacher")
      .select("teacher_code", "teacher_name")
      .whereNotIn("teacher_code", function () {
        this.select("user_username").from("system_user");
      });

    if (!result) {
      return null;
    }

    return result;
  },

  getModuleFilter: async () => {
    const modules = await knex("module")
      .distinct()
      .whereIn("module_id", function () {
        this.select("module_id").from("class_subject");
      });

    return modules || [];
  },

  addNewAccount: async (datas) => {
    const inserted = [];

    for (const data of datas) {
      try {
        const newAccount = await knex("system_user").insert({
          user_username: data.username,
          user_pass: data.pass,
          user_role: data.role,
        });

        if (newAccount) {
          inserted.push({
            user_username: data.username,
            user_pass: data.pass,
            user_role: data.role,
          });
        }
      } catch (err) {
        console.error("Lỗi khi thêm tài khoản:", data.username, err);
        // Bạn có thể bỏ qua hoặc xử lý thêm ở đây
      }
    }

    return inserted.length > 0 ? inserted : null;
  },

  getCertificates: async (class_subject_id) => {
    if (!class_subject_id) {
      return;
    }
    const certificates = await knex("certificate as cert")
      .where({
        "cert.class_subject_id": class_subject_id,
      })
      .select(
        "cert.certificate_id",
        "cert.student_code",
        "s.student_middle_name",
        "s.student_name",
        "s.student_IDCard",
        "s.student_address",
        "s.student_date_of_birth",
        "s.student_gender",
        "m.module_name",
        "c.class_name",
        "cert.cert_number",
        "cert.issued_date",
        "cert.note"
      )
      .join("student as s", "s.student_code", "cert.student_code")
      .join(
        "class_subject as cs",
        "cs.class_subject_id",
        "cert.class_subject_id"
      )
      .join("class as c", "c.class_id", "cs.class_id")
      .join("module as m", "m.module_id", "cs.module_id")
      .orderBy("cert.certificate_id", "desc");

    if (certificates.length == 0) {
      return null;
    }

    return certificates;
  },

  getStudentEligible: async () => {
    const lists = knex("score as sc")
      .select(
        "s.student_code",
        "s.student_middle_name",
        "s.student_name",
        "cs.class_subject_id",
        "m.module_code",
        "m.module_name",
        "sc.score",
        "c.class_name",
        "sem.semester_end_date as issued_date"
      )
      .join("student as s", "s.student_code", "sc.student_code")
      .join("class_subject as cs", "cs.class_subject_id", "sc.class_subject_id")
      .join("class as c", "cs.class_id", "c.class_id")
      .join("module as m", "cs.module_id", "m.module_id")
      .join("semester as sem", "sem.semester_id", "cs.semester_id")
      .where("sc.score", ">=", 5)
      .whereNotExists(function () {
        this.select(knex.raw(1))
          .from("certificate as c")
          .whereRaw("c.student_code = s.student_code")
          .andWhereRaw("c.class_subject_id = cs.class_subject_id");
      });

    if (lists.length == 0) return null;

    return lists;
  },

  addCertificates: async ({ class_subject_id, student_codes }) => {
    const inserted = [];

    for (let student_code of student_codes) {
      // Kiểm tra trùng chứng chỉ
      const exists = await knex("certificate")
        .where({ student_code, class_subject_id })
        .first();

      if (exists) continue;

      // Lấy module_code từ class_subject_id
      const classInfo = await knex("class_subject as cs")
        .join("module as m", "m.module_id", "cs.module_id")
        .join("semester as sem", "sem.semester_id", "cs.semester_id")
        .where("cs.class_subject_id", class_subject_id)
        .select("m.module_code", "sem.semester_end_date")
        .first();

      if (!classInfo) continue;

      const cert_number = `${classInfo.module_code}-${student_code}`;
      const issued_date = classInfo.semester_end_date || new Date();

      // Thêm vào bảng certificate
      const [cert_id] = await knex("certificate").insert({
        student_code,
        class_subject_id,
        cert_number,
        issued_date,
      });

      inserted.push({ student_code, cert_number });
    }

    return inserted;
  },

  getClassCert: async () => {
    const classes = await knex("certificate as cert")
      .join(
        "class_subject as cs",
        "cs.class_subject_id",
        "cert.class_subject_id"
      )
      .join("class as c", "c.class_id", "cs.class_id")
      .join("module as m", "m.module_id", "cs.module_id")
      .join(
        "teacher_subject_class as tsc",
        "tsc.class_subject_id",
        "cert.class_subject_id"
      )
      .join("teacher as t", "t.teacher_code", "tsc.teacher_code")
      .distinct(
        "m.module_code",
        "cert.class_subject_id",
        "c.class_name",
        "m.module_name",
        "t.teacher_name"
      );

    if (classes.length == 0) return null;

    return classes;
  },

  getDashboardStats: async () => {
    try {
      const [classResult] = await knex("class_subject").count(
        "* as total_classes"
      );
      const [studentResult] = await knex("student").count(
        "* as total_students"
      );
      const [teacherResult] = await knex("teacher").count(
        "* as total_teachers"
      );
      const [accountResult] = await knex("system_user").count(
        "* as total_accounts"
      );

      return {
        total_classes: Number(classResult.total_classes),
        total_students: Number(studentResult.total_students),
        total_teachers: Number(teacherResult.total_teachers),
        total_accounts: Number(accountResult.total_accounts),
      };
    } catch (error) {
      console.error("Lỗi khi thống kê dashboard:", error);
      throw error;
    }
  },

  getCountStudentInClass: async () => {
    try {
      const result = await knex("class as c")
        .select("c.class_name")
        .count("cs.student_code as student_count")
        .join("class_subject as csj", "csj.class_id", "c.class_id")
        .join(
          "class_student as cs",
          "cs.class_subject_id",
          "csj.class_subject_id"
        )
        .groupBy("c.class_name");

      if (!result) return null;

      return result;
    } catch (error) {
      console.error("Lỗi thống kê số lượng học viên theo lớp:", error);
      throw error;
    }
  },

  getModuleCertificateStats: async () => {
    const countCert = await knex("module as m")
      .select(
        "m.module_name",
        knex.raw("COUNT(DISTINCT cs.student_code) AS total_students"),
        knex.raw("COUNT(DISTINCT c.student_code) AS certified_students")
      )
      .join("class_subject as csj", "m.module_id", "csj.module_id")
      .join(
        "class_student as cs",
        "csj.class_subject_id",
        "cs.class_subject_id"
      )
      .leftJoin("certificate as c", function () {
        this.on("cs.student_code", "=", "c.student_code").andOn(
          "csj.class_subject_id",
          "=",
          "c.class_subject_id"
        );
      })
      .groupBy("m.module_name");

    if (countCert.length == 0) return null;

    return countCert;
  },
};

module.exports = admin;

```

### backend\src\models\auth.model.js
```js
const knex = require("../database/knex");

const auth = {
  login: async (username, password) => {
    const user = await knex("system_user")
      .where("user_username", username)
      .andWhere("user_pass", password)
      .select("user_username", "user_role", "user_status", "user_id")
      .limit(1);

    if (user.length > 0) {
      return user[0];
    }
    return null;
  },

  checkAccount: async (username) => {
    const user = await knex("system_user")
      .where("user_name", username)
      .select("user_name")
      .first();
    return user || null;
  },

  register: async (RegisterData) => {
    return knex("userInfo").insert({
      user_name: RegisterData.username,
      user_passwd: RegisterData.password,
      user_phoneNum: RegisterData.userPhone,
    });
  },
};

module.exports = auth;

```

### backend\src\models\student.model.js
```js
const knex = require("../database/knex");

const student = {
  getAllSubjectScore: async (studentCode) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "c.class_name AS Đơn Vị Học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  filterSubjectScoreBySemester: async (studentCode, semester) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .andWhere("se.semester_number", semester)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "c.class_name AS Đơn Vị Học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  getStudentInfo: async (studentCode) => {
    const result = await knex("student").where("student_code", studentCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateStudentInfo: async (studentCode, updateData) => {
    const result = await knex("student")
      .where("student_code", studentCode)
      .update({
        student_date_of_birth: updateData.student_date_of_birth,
        student_address: updateData.student_address,
        student_email: updateData.student_email,
        student_phone: updateData.student_phone,
        student_IDCard: updateData.student_IDCard,
        student_country: updateData.student_country,
        student_gender: updateData.student_gender,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getCertificatesOfStudent: async (student_code) => {
    const certs = await knex("certificate as c")
      .join("student as s", "c.student_code", "s.student_code")
      .join(
        "class_subject as csj",
        "c.class_subject_id",
        "csj.class_subject_id"
      )
      .join("class as cl", "csj.class_id", "cl.class_id")
      .join("module as m", "csj.module_id", "m.module_id")
      .where("c.student_code", student_code)
      .select(
        "c.cert_number as so_hieu",
        "s.student_code as ma_so",
        knex.raw("CONCAT(s.student_middle_name, ' ', s.student_name) as ten"),
        "s.student_IDCard as so_CMND",
        "cl.class_name as lop",
        "m.module_code as ma_mon",
        "m.module_name as ten_mon",
        "c.issued_date as ngay_cap"
      );

    if (certs.length == 0) return null;

    return certs;
  },
};

module.exports = student;

```

### backend\src\models\teacher.model.js
```js
const knex = require("../database/knex");

const teacher = {
  getTeacherInfo: async (teacherCode) => {
    const result = await knex("teacher").where("teacher_code", teacherCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateTeacherInfo: async (teacherCode, updateData) => {
    const result = await knex("teacher")
      .where("teacher_code", teacherCode)
      .update({
        teacher_date_of_birth: updateData.teacher_date_of_birth,
        teacher_gender: updateData.teacher_gender,
        teacher_address: updateData.teacher_address,
        teacher_email: updateData.teacher_email,
        teacher_phone: updateData.teacher_phone,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getModuleTeaching: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join("teacher as t", "tsc.teacher_code", "t.teacher_code")
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .where("t.teacher_code", teacherCode)
      .distinct(
        "csub.class_subject_id",
        "t.teacher_code",
        "t.teacher_name",
        "c.class_code",
        "c.class_name",
        "m.module_code",
        "m.module_name",
        "se.semester_number",
        "se.semester_start_date",
        "se.semester_end_date"
      )
      .orderBy("se.semester_number", "desc");

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getStudentInClass: async ({ teacherCode, moduleCode, classCode }) => {
    const result = await knex("teacher as t")
      .join(
        "teacher_subject_class as tsc",
        "t.teacher_code",
        "tsc.teacher_code"
      )
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join(
        "class_student as cs",
        "csub.class_subject_id",
        "cs.class_subject_id"
      )
      .join("student as s", "cs.student_code", "s.student_code")
      .leftJoin("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("t.teacher_code", teacherCode)
      .andWhere("m.module_code", moduleCode)
      .andWhere("c.class_code", classCode)
      .distinct(
        "t.teacher_name",
        "c.class_name",
        "m.module_name",
        "s.student_code",
        "s.student_middle_name",
        "s.student_name",
        "sc.score"
      )
      .orderBy([{ column: "s.student_code" }]);

    return result;
  },

  updateStudentScore: async (classSubjectId, studentCode, score) => {
    const result = await knex("score")
      .where({
        class_subject_id: classSubjectId,
        student_code: studentCode,
      })
      .update({ score });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getStudentPassing: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join("class as c", "csj.class_id", "c.class_id")
      .join("module as m", "csj.module_id", "m.module_id")
      .join(
        "class_student as cs",
        "csj.class_subject_id",
        "cs.class_subject_id"
      )
      .leftJoin("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        "c.class_code as class",
        "m.module_name as subject",
        knex.raw("COUNT(DISTINCT cs.student_code) as total_students"),
        knex.raw(
          "COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) as passed_students"
        )
      )
      .groupBy(["c.class_code", "m.module_name"])
      .orderBy(["c.class_code", "m.module_name"]);

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getPassingPropotion: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join(
        "class_student as cs",
        "cs.class_subject_id",
        "csj.class_subject_id"
      )
      .leftJoin("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        knex.raw("COUNT(DISTINCT cs.student_code) AS total_students"),
        knex.raw(`
        COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) AS passed_students
      `),
        knex.raw(`
        ROUND(
          COUNT(DISTINCT CASE WHEN sc.score >= 4.0 THEN sc.student_code END) * 100.0
          / NULLIF(COUNT(DISTINCT cs.student_code), 0), 2
        ) AS passing_percentage
      `)
      );

    if (!result || result.length === 0) {
      return null;
    }

    return result[0]; // vì chỉ có 1 hàng kết quả
  },

  getAvgScore: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_subject as csj",
        "tsc.class_subject_id",
        "csj.class_subject_id"
      )
      .join("class as c", "csj.class_id", "c.class_id")
      .join("module as m", "csj.module_id", "m.module_id")
      .join(
        "class_student as cs",
        "csj.class_subject_id",
        "cs.class_subject_id"
      )
      .join("score as sc", function () {
        this.on("sc.class_subject_id", "=", "csj.class_subject_id").andOn(
          "sc.student_code",
          "=",
          "cs.student_code"
        );
      })
      .where("tsc.teacher_code", teacherCode)
      .select(
        "c.class_code as class",
        "m.module_name as subject",
        knex.raw(" ROUND(AVG(sc.score), 2) as average_score")
      )
      .groupBy(["c.class_code", "m.module_name"])
      .orderBy("c.class_code", "asc");

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getStudentCodeByName: async (studentMiddleName, studentName) => {
    const result = await knex("student")
      .where({
        student_middle_name: studentMiddleName,
        student_name: studentName,
      })
      .select("student_code");

    if (result.length === 0) {
      return null;
    }

    return result[0].student_code;
  },

  importStudentScores: async (classSubjectId, students) => {
    const updated = [];
    const skipped = [];
    for (const student of students) {
      try {
        const exists = await knex("score")
          .where({
            class_subject_id: classSubjectId,
            student_code: student.student_code,
          })
          .select("score")
          .first();

        if (!exists) {
          skipped.push(student.student_code);
          continue;
        }

        if (student.score === "" || student.score === undefined) {
          skipped.push(student.student_code);
          continue;
        }

        if (Number(exists.score) === Number(student.score)) {
          skipped.push(student.student_code);
          continue;
        }

        await knex("score")
          .where({
            class_subject_id: classSubjectId,
            student_code: student.student_code,
          })
          .update({ score: student.score });

        updated.push(student.student_code);
      } catch (error) {
        console.error(
          `Error processing student ${student.student_code}:`,
          error
        );
        continue;
      }
    }
    return {
      updatedCount: updated.length,
      updated,
      skipped,
    };
  },

  getScoreProgress: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join(
        "class_student as cs",
        "cs.class_subject_id",
        "tsc.class_subject_id"
      )
      .leftJoin("score as s", function () {
        this.on("s.class_subject_id", "=", "cs.class_subject_id")
          .andOn("s.student_code", "=", "cs.student_code")
          .andOnNotNull("s.score");
      })
      .where("tsc.teacher_code", teacherCode)
      .countDistinct("cs.student_code as tong_sinh_vien")
      .countDistinct({ so_diem_da_nhap: "s.student_code" })
      .groupBy("tsc.teacher_code");

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  getCountTeaching: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .where("tsc.teacher_code", teacherCode)
      .countDistinct("tsc.class_subject_id as count_teaching");

    if (result.length === 0) {
      return null;
    }

    return result[0].count_teaching;
  },

  getLastUpdate: async (teacherCode) => {
    const result = await knex("score as s")
      .join(
        "teacher_subject_class as tsc",
        "tsc.class_subject_id",
        "s.class_subject_id"
      )
      .where("tsc.teacher_code", teacherCode)
      .whereNotNull("s.score")
      .max("updated_at as last_update")
      .first();

    if (!result) {
      return null;
    }

    return result;
  },
};

module.exports = teacher;

```

### backend\src\routes\admin.router.js
```js
const express = require("express");
const adminController = require("../controllers/admin.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");

const router = express.Router();

// Account Management
router.post("/createStudentAccount", adminController.createStudentAccount);
router.all("/createStudentAccount", methodNotAllowed);

router.post("/createTeacherAccount", adminController.createTeacherAccount);
router.all("/createTeacherAccount", methodNotAllowed);

router.get("/getAccountList", adminController.getAccountList);
router.all("/getAccountList", methodNotAllowed);

router.put("/updateAccount", adminController.updateAccount);
router.all("/updateAccount", methodNotAllowed);

router.post("/addNewAccount", adminController.addNewAccount);
router.all("/addNewAccount", methodNotAllowed);

router.get("/getStudentAccount", adminController.getStudentAccount);
router.all("/getStudentAccount", methodNotAllowed);

router.get("/getTeacherAccount", adminController.getTeacherAccount);
router.all("/getTeacherAccount", methodNotAllowed);

// Student Management

router.get("/getStudentList", adminController.getStudentList);
router.all("/getStudentList", methodNotAllowed);

router.post("/importStudentList", adminController.importStudentList);
router.all("/importStudentList", methodNotAllowed);

router.get("/getLastStudentCode", adminController.getLastStudentCode);
router.all("/getLastStudentCode", methodNotAllowed);

router.post("/addNewStudent", adminController.addNewStudent);
router.all("/addNewStudent", methodNotAllowed);

router.put("/updateStudentInfor", adminController.updateStudentInfor);
router.all("/updateStudentInfor", methodNotAllowed);

router.get("/getListStudentCode", adminController.getListStudentCode);
router.all("/getListStudentCode", methodNotAllowed);

router.get("/getStudentNotInClass", adminController.getStudentNotInClass);
router.all("/getStudentNotInClass", methodNotAllowed);

router.get("/getStudentInClass", adminController.getStudentInClass);
router.all("/getStudentInClass", methodNotAllowed);

// Teacher Management

router.get("/getTeacherList", adminController.getTeacherList);
router.all("/getTeacherList", methodNotAllowed);

router.get("/getLastTeacherCode", adminController.getLastTeacherCode);
router.all("/getLastTeacherCode", methodNotAllowed);

router.post("/addNewTeacher", adminController.addNewTeacher);
router.all("/addNewTeacher", methodNotAllowed);

router.put("/updateTeacherInfor", adminController.updateTeacherInfor);
router.all("/updateTeacherInfor", methodNotAllowed);

router.get("/getListTeacherCode", adminController.getListTeacherCode);
router.all("/getListTeacherCode", methodNotAllowed);

// Class & Enrollment
router.post("/createClass", adminController.createClassWithTeacher);
router.all("/createClass", methodNotAllowed);

router.post("/addStudentsToClass", adminController.addStudentsToClass);
router.all("/addStudentsToClass", methodNotAllowed);

router.put("/updateClass", adminController.updateClass);
router.all("/updateClass", methodNotAllowed);

router.get("/getClassCodeAndSemester", adminController.getClassCodeAndSemester);
router.all("/getClassCodeAndSemester", methodNotAllowed);

// Module Management
router.get("/getModuleList", adminController.getModuleList);
router.all("/getModuleList", methodNotAllowed);

router.get("/getModuleCode", adminController.getModuleCode);
router.all("/getModuleCode", methodNotAllowed);

router.get("/getModuleFilter", adminController.getModuleFilter);
router.all("/getModuleFilter", methodNotAllowed);

// Certificate Management
router.get("/getCertificates", adminController.getCertificates);
router.all("/getCertificates", methodNotAllowed);

router.get("/getStudentEligible", adminController.getStudentEligible);
router.all("/getStudentEligible", methodNotAllowed);

router.get("/getClassCert", adminController.getClassCert);
router.all("/getClassCert", methodNotAllowed);

router.post("/addCertificates", adminController.addCertificates);
router.all("/addCertificates", methodNotAllowed);

// Admin Dash Board
router.get("/getDashboardStats", adminController.getDashboardStats);
router.all("/getDashboardStats", methodNotAllowed);

router.get("/getCountStudentInClass", adminController.getCountStudentInClass);
router.all("/getCountStudentInClass", methodNotAllowed);

router.get(
  "/getModuleCertificateStats",
  adminController.getModuleCertificateStats
);
router.all("/getModuleCertificateStats", methodNotAllowed);

// Default
router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/admin", router);
};

```

### backend\src\routes\auth.router.js
```js
const express = require("express");
const authController = require("../controllers/auth.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.post("/login", authController.login);
router.post("/logout", authController.logout);
router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/auth", router);
};

```

### backend\src\routes\student.router.js
```js
const express = require("express");
const studentController = require("../controllers/student.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getScore", studentController.getScore);
router.all("/getScore", methodNotAllowed);
router.get("/getScoreBySemester", studentController.getScoreBySemester);
router.all("/getScoreBySemester", methodNotAllowed);
router.get("/getStudentInfo", studentController.getStudentInfo);
router.all("/getStudentInfo", methodNotAllowed);
router.put("/updateStudentInfo", studentController.updateStudentInfo);
router.all("/updateStudentInfo", methodNotAllowed);
router.get(
  "/getCertificatesOfStudent",
  studentController.getCertificatesOfStudent
);
router.all("/getCertificatesOfStudent", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/student", router);
};

```

### backend\src\routes\teacher.router.js
```js
const express = require("express");
const teacherController = require("../controllers/teacher.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getTeacherInfo", teacherController.getTeacherInfo);
router.all("/getTeacherInfo", methodNotAllowed);
router.put("/updateTeacherInfo", teacherController.updateTeacherInfo);
router.all("/updateTeacherInfo", methodNotAllowed);
router.get("/getModuleTeaching", teacherController.getModuleTeaching);
router.all("/getModuleTeaching", methodNotAllowed);
router.get("/getStudentInClass", teacherController.getStudentInClass);
router.all("/getStudentInClass", methodNotAllowed);
router.put("/updateStudentScore", teacherController.updateStudentScore);
router.all("/updateStudentScore", methodNotAllowed);
router.get("/getStudentPassing", teacherController.getStudentPassing);
router.all("/getStudentPassing", methodNotAllowed);
router.get("/getPassingPropotion", teacherController.getPassingPropotion);
router.all("/getPassingPropotion", methodNotAllowed);
router.get("/getAvgScore", teacherController.getAvgScore);
router.all("/getAvgScore", methodNotAllowed);
router.get("/getStudentCodeByName", teacherController.getStudentCodeByName);
router.all("/getStudentCodeByName", methodNotAllowed);
router.post("/importStudentScores", teacherController.importStudentScores);
router.all("/importStudentScores", methodNotAllowed);
router.get("/getScoreProgress", teacherController.getScoreProgress);
router.all("/getScoreProgress", methodNotAllowed);
router.get("/getCountTeaching", teacherController.getCountTeaching);
router.all("/getCountTeaching", methodNotAllowed);
router.get("/getLastUpdate", teacherController.getLastUpdate);
router.all("/getLastUpdate", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/teacher", router);
};

```

### frontend\js\toast.js
```js
function showToast(message, type = "info") {
  const bgColors = {
    success: "linear-gradient(to right, #00b09b, #96c93d)",
    error: "linear-gradient(to right, #e52d27, #b31217)",
    info: "linear-gradient(to right, #2193b0, #6dd5ed)",
    warn: "linear-gradient(to right, #f7971e, #ffd200)",
  };

  const icons = {
    success: "✅",
    error: "❌",
    info: "ℹ️",
    warn: "⚠️",
  };

  const icon = icons[type] || "";
  const textWithIcon = `<span style="display:flex;align-items:center;gap:6px;">${icon} ${message}</span>`;

  Toastify({
    text: textWithIcon,
    duration: 3000,
    close: false,
    gravity: "top",
    position: "right",
    backgroundColor: bgColors[type] || bgColors.info,
    stopOnFocus: true,
    escapeMarkup: false, // <--- Cho phép hiển thị HTML
  }).showToast();
}

window.showToast = showToast;

```

### frontend\js\Administrator\manage_account\account_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".toggle-password").forEach((icon) => {
    icon.addEventListener("click", function () {
      const input = this.previousElementSibling;
      const isPassword = input.type === "password";

      input.type = isPassword ? "text" : "password";

      // Đổi icon
      this.classList.toggle("bi-eye-fill", isPassword);
      this.classList.toggle("bi-eye-slash-fill", !isPassword);
    });
  });

  const inputs = document.querySelectorAll(".password-field");

  inputs.forEach((input) => {
    input.style.width = input.value.length + 1 + "ch";
  });

  const editModal = document.getElementById("editModal");
  editModal.addEventListener("show.bs.modal", function (event) {
    const button = event.relatedTarget;
    const code = button.getAttribute("data-editMaSV");
    const passwd = button.getAttribute("data-editMatKhau");
    const name = button.getAttribute("data-editTen");
    const status = button.getAttribute("data-editTrangThai");

    document.getElementById("editMaSV").value = code;
    document.getElementById("editMaSV").readOnly = true;
    document.getElementById("editMatKhau").value = passwd;
    document.getElementById("editTen").value = name;
    document.getElementById("editTen").readOnly = true;
    document.getElementById("editTrangThai").value = status;
  });

  document.getElementById("editForm").addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const currentCode = document.getElementById("editMaSV").value;
    const newPassword = document.getElementById("editMatKhau").value;
    const newStatus = document.getElementById("editTrangThai").value;
    console.log("Current Code:", currentCode);
    console.log("New Password:", newPassword);
    console.log("New Status:", newStatus);
    updateAccount(currentCode, newPassword, newStatus);
  });

  getAccountList();
});

async function getAccountList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getAccountList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Account:", result.data);
      listAccount = result.data;
      searchAccounts = [...listAccount];
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

const limitRows = 10;
let currentPage = 1;
let listAccount = [];
let searchAccounts = [];

function renderListAccount(datas) {
  searchAccounts = datas;
  displayListAccount(currentPage);
  renderPagination();
}

function renderPagination() {
  const totalPages = Math.ceil(searchAccounts.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

// Tạo nút trang
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayListAccount(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

// Tạo dấu ...
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

function displayListAccount(page) {
  const accountList = document.getElementById("account-list");
  accountList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = searchAccounts.slice(start, end);

  items.forEach((account, index) => {
    const row = document.createElement("tr");

    // Tạo input password
    const passwordField = document.createElement("input");
    passwordField.type = "password";
    passwordField.className = "unstyled-input password-field";
    passwordField.value = account.user_pass;
    passwordField.readOnly = true;
    passwordField.style.width = passwordField.value.length + 1 + "ch";

    // Icon toggle
    const eyeIcon = document.createElement("i");
    eyeIcon.className = "bi bi-eye-slash-fill toggle-password";
    eyeIcon.style.cursor = "pointer";
    eyeIcon.addEventListener("click", function () {
      const isHidden = passwordField.type === "password";
      passwordField.type = isHidden ? "text" : "password";
      eyeIcon.className = isHidden
        ? "bi bi-eye-fill toggle-password"
        : "bi bi-eye-slash-fill toggle-password";
    });

    // Tên tài khoản (tuỳ role)
    let name = "-";
    if (account.user_role === "Học viên" && account.info) {
      name = `${account.info.student_middle_name} ${account.info.student_name}`;
    } else if (account.user_role === "Giảng viên" && account.info) {
      name = account.info.teacher_name;
    }

    let statusText =
      account.user_status === 1 ? "Đang hoạt động" : "Ngừng hoạt động";
    if (account.user_status === 0) {
      statusText = `<span class="text-danger">${statusText}</span>`;
    } else if (account.user_status === 1) {
      statusText = `<span class="text-primary">${statusText}</span>`;
    }
    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${account.user_username}</td>
      <td></td>
      <td>${name}</td>
      <td>${account.user_role}</td>
      <td>${statusText}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1 btn-edit" 
			data-bs-toggle="modal"
			data-bs-target="#editModal"
			data-editMaSV="${account.user_username}"
  			data-editMatKhau="${account.user_pass}"
  			data-editTen="${name}"
			data-editTrangThai="${account.user_status}">
          <i class="bi bi-pencil-square"></i> Sửa
        </button>
      </td>
    `;

    // Thêm input password và icon vào cột thứ 3
    const passwordCell = row.children[2];
    passwordCell.appendChild(passwordField);
    passwordCell.appendChild(eyeIcon);

    accountList.appendChild(row);
  });
}

async function getStudentAccount() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getStudentAccount`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student Account:", result.data);
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu sinh viên!", "error");
  }
}

async function getTeacherAccount() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getTeacherAccount`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Teacher Account:", result.data);
      renderListAccount(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu giảng viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu giảng viên!", "error");
  }
}

function filterAccounts() {
  const fliter = document.getElementById("role_filter").value;

  switch (fliter) {
    case "1":
      getStudentAccount();
      break;
    case "2":
      getTeacherAccount();
      break;
    case "all":
      getAccountList();
  }
}

async function updateAccount(currentCode, newPassword, newStatus) {
  const API_BASE = "http://localhost:3000";

  if (!currentCode || !newPassword || !newStatus) {
    Swal.fire("Lỗi", "Thiếu dữ liệu để cập nhật điểm!", "error");
    return;
  }

  console.log("update: " + currentCode, newPassword, newStatus);
  console.log("Status:", typeof newStatus, JSON.stringify(newStatus));
  newStatus = Number(newStatus);
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/updateAccount`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        currentCode,
        newPassword,
        newStatus,
      }),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Cập nhật thành công!", "success");
      getAccountList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể cập nhật điểm!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

document.getElementById("searchInput").addEventListener("input", function () {
  const keyword = this.value.trim().toLowerCase();

  const filtered = listAccount.filter((account) => {
    const fullName = account.info
      ? `${account.info.student_middle_name || ""} ${
          account.info.student_name || ""
        }`.toLowerCase()
      : "";

    const teacherName = account.info?.teacher_name?.toLowerCase() || "";

    return (
      account.user_username.toLowerCase().includes(keyword) ||
      fullName.includes(keyword) ||
      teacherName.includes(keyword)
    );
  });

  currentPage = 1;
  renderListAccount(filtered);
});

```

### frontend\js\Administrator\manage_account\admin_add_account_list.js
```js
document.addEventListener("DOMContentLoaded", async () => {});

document
  .getElementById("addNewAccountForm")
  .addEventListener("submit", async function (e) {
    e.preventDefault();

    const accounts = selectedRows();
    if (accounts.length === 0) {
      Swal.fire("Thông báo", "Bạn chưa chọn tài khoản nào!", "warning");
      return;
    }

    await addNewAccount(accounts);
  });

function selectedRows() {
  const selectedRows = document.querySelectorAll("#form-list tr");
  const accounts = [];

  selectedRows.forEach((row) => {
    const checkbox = row.querySelector(".checkbox-input");
    const passwordInput = row.querySelector(".password-input");
    const usernameSpan = row.querySelector("td:nth-child(2) span");

    if (checkbox && checkbox.checked) {
      const username = usernameSpan?.textContent?.trim();
      const password = passwordInput?.value?.trim();

      if (username && password) {
        accounts.push({
          username: username,
          pass: password,
          role: currentRole,
        });
      }
    }
  });

  return accounts;
}

async function addNewAccount(datas) {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/addNewAccount`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(datas),
    });

    const result = await res.json();

    if (result.status === "success") {
      Swal.fire("Thành công", "Đã tạo tài khoản thành công!", "success");
      await loadListByRole();
    } else {
      Swal.fire("Lỗi", result.message || "Tạo tài khoản thất bại!", "error");
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu tạo tài khoản!", "error");
  }
}

```

### frontend\js\Administrator\manage_account\admin_display_account_list.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  await loadListByRole();
});

document.getElementById("role").addEventListener("change", async () => {
  currentPage = 1;
  await loadListByRole();
});

function generateRandomPassword(length) {
  const chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*";
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * chars.length);
    password += chars[randomIndex];
  }
  return password;
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 5;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let filterDatas = [];
let currentRole = "1";

async function loadListByRole() {
  const roleValue = document.getElementById("role").value;
  currentRole = roleValue;

  if (roleValue === "2") {
    // Giảng viên
    await getListTeacherCode();
  } else {
    // Sinh viên
    await getListStudentCode();
  }
}

async function getListStudentCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getListStudentCode`);

    const result = await res.json();

    if (result.status === "success" && result.data) {
      filterDatas = [...result.data];
      renderStudentList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getListTeacherCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getListTeacherCode`);

    const result = await res.json();

    if (result.status === "success" && result.data) {
      filterDatas = [...result.data];
      renderTeacherList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((student) => {
    const newPassword = generateRandomPassword(8);
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>
        <input class="form-check-input checkbox-input" type="checkbox" />
	  </td>
      <td><span>${student.student_code}</span></td>
      <td><span>${student.student_middle_name}
	  ${student.student_name}</span></td>
      <td>
			<input
			type="password"
			class="form-control password-input"
			name="password"
			required
			value="${newPassword}"
			/>
		</td>
	`;
    studentList.appendChild(row);
  });
}

function renderTeacherList(teacher) {
  filterDatas = teacher;
  displayTeacherListPage(currentPage);
  renderPagination();
}

function displayTeacherListPage(page) {
  const teacherList = document.getElementById("form-list");
  teacherList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((teacher) => {
    const newPassword = generateRandomPassword(8);
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>
        <input class="form-check-input checkbox-input" type="checkbox"/>
	  </td>
      <td><span>${teacher.teacher_code}</span></td>
      <td><span>${teacher.teacher_name}</span></td>
      <td>
			<input
			type="password"
			class="form-control password-input"
			name="password"
			value="${newPassword}"
			/>
		</td>
	`;
    teacherList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    if (currentRole === "2") {
      displayTeacherListPage(currentPage);
    } else {
      displayStudentListPage(currentPage);
    }

    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

```

### frontend\js\Administrator\manage_certificate\admin_add_certificate.js
```js
let listModule = [];

// ===== SỰ KIỆN CLICK VÀO NÚT CẤP CHỨNG CHỈ =====
document.getElementById("form-list").addEventListener("click", async (e) => {
  const btn = e.target.closest(".btn-addCert");
  if (!btn) return;

  const stCode = btn.getAttribute("data-code");
  const clsID = btn.getAttribute("data-class-subject");

  if (!stCode || !clsID) {
    console.log("Không lấy được dữ liệu");
    return;
  }

  console.log("stCode", stCode);
  console.log("clsID", clsID);

  await addCertificates(stCode, clsID);
});

// ===== HÀM GỬI REQUEST THÊM CHỨNG CHỈ =====
async function addCertificates(stCode, clsID) {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/addCertificates`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        class_subject_id: Number(clsID),
        student_codes: Array.isArray(stCode) ? stCode : [stCode],
      }),
    });

    const result = await res.json();

    if (result.status === "success") {
      getStudentEligible?.(); // nếu có hàm làm mới danh sách
      Swal.fire("Thành Công", "Cấp chứng chỉ thành công!", "success");
    } else {
      Swal.fire("Lỗi", result.message || "Không thành công!", "error");
    }
  } catch (err) {
    console.error("Fetch error:", err);
    Swal.fire("Lỗi", err.message || "Lỗi hệ thống", "error");
  }
}

// ===== LẤY DANH SÁCH HỌC SINH ĐƯỢC CHECK =====
function selectedRows() {
  const checkboxes = document.querySelectorAll(".checkbox-input");
  const students = [];

  checkboxes.forEach((checkbox) => {
    if (checkbox.checked) {
      const row = checkbox.closest("tr");
      const studentCode = row
        ?.querySelector("td:nth-child(2)")
        ?.textContent?.trim();
      if (studentCode) students.push(studentCode);
    }
  });

  return students;
}

// ===== SUBMIT FORM CẤP NHIỀU CHỨNG CHỈ =====
document.getElementById("btnApprove").addEventListener("click", async (e) => {
  e.preventDefault();
  const students = selectedRows();

  if (students.length === 0) {
    Swal.fire("Thông báo", "Bạn chưa chọn học sinh nào!", "warning");
    return;
  }

  await addCertificates(students, class_subject_id);
});

// ===== LẤY DANH SÁCH MÔN HỌC =====
async function getModuleFilter() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getModuleFilter`);
    const result = await res.json();
    if (result.status === "success") return result.data;
    Swal.fire(
      "Lỗi",
      result.message || "Không lấy được danh sách môn học",
      "error"
    );
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể kết nối máy chủ", "error");
  }
  return [];
}

// ===== SỰ KIỆN LOAD TRANG =====
document.addEventListener("DOMContentLoaded", async () => {
  listModule = await getModuleFilter();
  filterDatas = [...listModule];

  const moduleFilter = document.getElementById("courseFilter");
  moduleFilter.innerHTML = `<option value="">-- Chọn môn học --</option>`;

  listModule.forEach((item) => {
    const moduleItem = document.createElement("option");
    moduleItem.value = item.module_code;
    moduleItem.textContent = `${item.module_code} - ${item.module_name}`;
    moduleFilter.appendChild(moduleItem);
  });
});

// ===== SỰ KIỆN CHỌN MÔN HỌC =====
document.getElementById("courseFilter").addEventListener("change", function () {
  const keyword = this.value.trim().toLowerCase();

  const filtered = studentDatas.filter((student) => {
    return (
      student.module_code.toLowerCase().includes(keyword) ||
      student.module_name.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  filterDatas = filtered;
  renderStudentList(filtered); // dùng danh sách học viên
});

```

### frontend\js\Administrator\manage_certificate\admin_display_certificate.js
```js
const urlParams = new URLSearchParams(window.location.search);
let class_subject_id = urlParams.get("class_subject"); // có thể gán trực tiếp

let className = urlParams.get("class_name");
let moduleName = urlParams.get("module_name");

document.addEventListener("DOMContentLoaded", async () => {
  await getCertificates();
  renderModuleName();
});

function renderModuleName() {
  document.querySelector(".module_name").textContent = moduleName;
  document.querySelector(".class_name").textContent = className;
}

async function getCertificates() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/admin/getCertificates?class_subject_id=${class_subject_id}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      console.log("Chưa Có Dữ Liệu!!!");
      //   Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 8;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((student, index) => {
    let day = student.issued_date;
    let idCard = student.student_IDCard || "Chưa có thông tin";
    let address = student.student_address || "Chưa có thông tin";
    formatDate = day ? dayjs(day).format("DD/MM/YYYY") : "-";
    const row = document.createElement("tr");
    row.innerHTML = `
      	<td>${index + start + 1}</td>
		<td>${student.student_code}</td>
		<td>${student.student_middle_name} ${student.student_name}</td>
		<td class="${idCard === "Chưa có thông tin" ? "text-danger" : ""}">
			${idCard}
		</td>
		<td class="${address === "Chưa có thông tin" ? "text-danger" : ""}">
			${address}
		</td>
		<td>${student.cert_number}</td>
		<td>${formatDate}</td>
		<td>
		<button class="btn btn-primary">
			<i class="bi bi-list-ul"></i>
		</button>
		</td>
	`;
    studentList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
// document.getElementById("searchInput").addEventListener("input", function () {
//   const keyword = this.value.trim().toLowerCase();

//   // filter dữ liệu từ danh sách sinh viên gốc
//   const filtered = studentDatas.filter((student) => {
//     const fullName =
//       `${student.student_middle_name} ${student.student_name}`.toLowerCase();
//     return (
//       student.student_code.toLowerCase().includes(keyword) ||
//       fullName.includes(keyword) ||
//       student.student_phone?.toLowerCase().includes(keyword)
//     );
//   });

//   currentPage = 1;
//   renderStudentList(filtered);
// });

```

### frontend\js\Administrator\manage_certificate\admin_display_cert_class.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getCertClass();
});

async function getCertClass() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getClassCert`);

    const result = await res.json();
    console.log("result: ", result);

    if (result.status === "success") {
      const CertClass = result.data;
      renderCertClass(CertClass);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderCertClass(CertClasses) {
  const certClassList = document.querySelector(".class-cert-list");
  certClassList.innerHTML = ""; // Xoá nội dung cũ

  CertClasses.forEach((CertClasses) => {
    const div = document.createElement("div");
    div.className = "col-md-3 col-sm-6";
    div.innerHTML = `
	<div class="card ">
		<img src="../images/b3.jpg" class="card-img-top" alt="..." />
		<div class="card-body">
		<h5 class="card-title marquee-hover text-center">
			<span>${CertClasses.module_code} - ${CertClasses.module_name}</span>
		</h5>
		<p
			class="card-text card_teacher_name marquee-hover text-center"
		>
			<span>${CertClasses.teacher_name}</span>
		</p>
		<p class="card-text card_class_name marquee-hover text-center">
			<span>Class: ${CertClasses.class_name}</span>
		</p>
		<div class="text-center">
			<button
			class="btn btn-primary"
			onclick="location.href='page_certificate.html?module=${CertClasses["module_code"]}&class_subject=${CertClasses["class_subject_id"]}&class_name=${CertClasses["class_name"]}&module_name=${CertClasses["module_name"]}'"
			>
			Access
			</button>
		</div>
		</div>
	</div>
	`;
    certClassList.appendChild(div);
  });
}

```

### frontend\js\Administrator\manage_certificate\admin_get_student.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getStudentEligible();
});
/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getStudentEligible() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getStudentEligible`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      console.log("Chưa Có Dữ Liệu!!!");
      //   Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 5;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm
let class_subject_id = 0;

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  if (items.length > 0) {
    items.forEach((student) => {
      let day = student.issued_date;
      class_subject_id = student.class_subject_id;
      formatDate = day ? dayjs(day).format("DD/MM/YYYY") : "-";
      const row = document.createElement("tr");
      row.innerHTML = `
				<td><input type="checkbox" class="checkbox-input" /></td>
			  <td>${student.student_code}</td>
			  <td>${student.student_middle_name} ${student.student_name}</td>
			  <td>${student.module_name}</td>
			  <td>${student.class_name}</td>
			  <td>${student.score}</td>
			  <td>${formatDate}</td>
			  <td>
				  <button
					  data-code="${student["student_code"]}"
					  data-class-subject="${student["class_subject_id"]}"
					  type="button" class="btn btn-primary btn-addCert"
				  >
				  <i class="bi bi-patch-check"></i> Duyệt Chứng Chỉ
				  </button>
			  </td>
		  `;
      studentList.appendChild(row);
    });
  } else {
    studentList.innerHTML = `
		<tr>
			<td colspan="8" class="text-center text-muted bg-body-secondary">Chưa có học sinh đủ điều kiện</td>
		</tr>
	`;
  }
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
// document.getElementById("searchInput").addEventListener("input", function () {
//   const keyword = this.value.trim().toLowerCase();

//   // filter dữ liệu từ danh sách sinh viên gốc
//   const filtered = studentDatas.filter((student) => {
//     const fullName =
//       `${student.student_middle_name} ${student.student_name}`.toLowerCase();
//     return (
//       student.student_code.toLowerCase().includes(keyword) ||
//       fullName.includes(keyword) ||
//       student.student_phone?.toLowerCase().includes(keyword)
//     );
//   });

//   currentPage = 1;
//   renderStudentList(filtered);
// });

```

### frontend\js\Administrator\manage_class\admin_add_class.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  listModule = await getModuleFilter();
  console.log("list filter: ", listModule);
  const moduleFilter = document.getElementById("courseFilter");
  moduleFilter.innerHTML = `<option value="">-- Chọn môn học --</option>`;

  listModule.forEach((item) => {
    const moduleItem = document.createElement("option");
    moduleItem.value = item.module_code;
    moduleItem.textContent = `${item.module_code} - ${item.module_name}`;
    moduleFilter.appendChild(moduleItem);
  });
});

document
  .getElementById("createClassForm")
  .addEventListener("submit", async function (e) {
    e.preventDefault();

    const classID = document.getElementById("newTenLop").value.trim();
    const moduleID = document.getElementById("newTenMon").value.trim();
    const semesterID = document.getElementById("newHocKi").value.trim();
    const teacherCode = document.getElementById("newGiangVien").value.trim();

    await createClassWithTeacher(classID, moduleID, semesterID, teacherCode);

    const modal = bootstrap.Modal.getInstance(
      document.getElementById("createClassModal")
    );
    modal.hide();
    modal.reset();
  });

async function getClassCodeAndSemester() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getClassCodeAndSemester`);

    const result = await res.json();

    if (result.status === "success") {
      return result.data;
    } else {
      Swal.fire(
        "Lỗi",
        result.message || "Lấy danh sách lớp thất bại!",
        "error"
      );
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu lấy danh sách lớp!", "error");
  }
}

async function getModuleCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getModuleCode`);

    const result = await res.json();

    if (result.status === "success") {
      return result.data;
    } else {
      Swal.fire(
        "Lỗi",
        result.message || "Lấy danh sách lớp thất bại!",
        "error"
      );
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu lấy danh sách lớp!", "error");
  }
}

async function getModuleFilter() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getModuleFilter`);

    const result = await res.json();

    if (result.status === "success") {
      return result.data;
    } else {
      Swal.fire(
        "Lỗi",
        result.message || "Lấy danh sách lớp thất bại!",
        "error"
      );
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu lấy danh sách lớp!", "error");
  }
}

async function getTeacherList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getTeacherList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      return result.data;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function createClassWithTeacher(
  classID,
  moduleID,
  semesterID,
  teacherCode
) {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/createClass`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ classID, moduleID, semesterID, teacherCode }),
    });

    const result = await res.json();

    if (result.status === "success") {
      await getModuleList();
      Swal.fire("Thành công", "Đã tạo tài lớp thành công!", "success");
    } else {
      Swal.fire("Lỗi", result.message || "Tạo lớp thất bại!", "error");
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu tạo lớp!", "error");
  }
}

document
  .getElementById("createClassModal")
  .addEventListener("show.bs.modal", async function (event) {
    classDataWithSemesters = await getClassCodeAndSemester();
    listModule = await getModuleCode();
    listTeacher = await getTeacherList();
    console.log("classDataWithSemesters:", classDataWithSemesters);
    console.log("listModule:", listModule);
    console.log("listTeacher:", listTeacher);

    const classSelect = document.getElementById("newTenLop");
    const semesterSelect = document.getElementById("newHocKi");
    const moduleSelect = document.getElementById("newTenMon");
    const teacherSelect = document.getElementById("newGiangVien");

    classSelect.innerHTML = `<option value="">-- Chọn lớp học --</option>`;
    semesterSelect.innerHTML = `<option value="">-- Chọn học kỳ --</option>`;
    moduleSelect.innerHTML = `<option value="">-- Chọn môn học --</option>`;
    teacherSelect.innerHTML = `<option value="">-- Chọn giảng viên --</option>`;

    semesterSelect.disabled = true;

    classDataWithSemesters.forEach((item) => {
      const option = document.createElement("option");
      option.value = item.class.class_id;
      option.textContent = `${item.class.class_code} - ${item.class.class_name}`;
      classSelect.appendChild(option);
    });

    listModule.forEach((item) => {
      const moduleItem = document.createElement("option");
      moduleItem.value = item.module_id;
      moduleItem.textContent = `${item.module_code} - ${item.module_name}`;
      moduleSelect.appendChild(moduleItem);
    });

    listTeacher.forEach((item) => {
      const teacherItem = document.createElement("option");
      teacherItem.value = item.teacher_code;
      teacherItem.textContent = `${item.teacher_name}`;
      teacherSelect.appendChild(teacherItem);
    });

    classSelect.addEventListener("change", (e) => {
      const selectedId = parseInt(e.target.value);
      const selected = classDataWithSemesters.find(
        (item) => item.class.class_id === selectedId
      );
      semesterSelect.innerHTML = `<option value="">-- Chọn học kỳ --</option>`;
      if (selected) {
        semesterSelect.disabled = false;

        selected.semesters.forEach((sem) => {
          const opt = document.createElement("option");
          opt.value = sem.semester_id;
          opt.textContent = `Học kỳ ${sem.semester_number}`;
          semesterSelect.appendChild(opt);
        });
      } else {
        semesterSelect.disabled = true;
      }
    });
  });

document.getElementById("courseFilter").addEventListener("change", function () {
  const keyword = this.value.trim().toLowerCase();

  const filtered = moduleDatas.filter((module) => {
    return (
      module.module_code.toLowerCase().includes(keyword) ||
      module.module_name.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  filterDatas = filtered;
  renderModuleList(filtered);
});

```

### frontend\js\Administrator\manage_class\admin_add_student_to_class.js
```js
document
  .getElementById("addStudentForm")
  .addEventListener("submit", async function (e) {
    e.preventDefault();

    const students = selectedRows();
    if (students.length === 0) {
      Swal.fire("Thông báo", "Bạn chưa chọn học sinh nào!", "warning");
      return;
    }

    await addStudentsToClass(students);
  });

function selectedRows() {
  const checkboxes = document.querySelectorAll(".checkbox-input");
  const students = [];

  checkboxes.forEach((checkbox) => {
    if (checkbox.checked) {
      const row = checkbox.closest("tr");
      const studentCode = row
        .querySelector("td:nth-child(3)")
        .textContent.trim();
      students.push(studentCode);
    }
  });

  return students;
}

async function addStudentsToClass(datas) {
  const classSubject = getParams();

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/addStudentsToClass`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        class_subject_id: classSubject.class_subject_id,
        student_codes: datas,
      }),
    });

    const result = await res.json();

    if (result.status === "success") {
      await getStudentNotInClass();
      Swal.fire("Thành công", "Đã thêm thành công!", "success");
    } else {
      Swal.fire("Lỗi", result.message || "Thêm thất bại!", "error");
    }
  } catch (err) {
    console.error("Lỗi khi gửi dữ liệu:", err);
    Swal.fire("Lỗi", "Không thể gửi yêu cầu thêm!", "error");
  }
}

```

### frontend\js\Administrator\manage_class\admin_display_class.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getModuleList();
});

/**
 * Chuyển đổi các giá trị kỹ thuật thành dạng dễ đọc cho người dùng.
 * @param {*} value - Giá trị cần chuyển đổi (string, null, undefined)
 * @returns {string} - Giá trị đã chuyển đổi phù hợp để hiển thị
 */

function transferValue(value) {
  if (value === null || value === undefined || value === "") {
    return "-";
  } else if (value === "active") {
    return "Đang hoạt động";
  } else if (value === "inactive") {
    return "Dừng hoạt động";
  } else if (value === "completed") {
    return "Hoàn Thành";
  } else if (value === "draft") {
    return "Đang chuẩn bị";
  } else {
    return value;
  }
}

/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getModuleList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getModuleList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Module List:", result.data);
      moduleDatas = result.data;
      filterDatas = [...moduleDatas];
      renderModuleList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 5;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let moduleDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} modules - Mảng dữ liệu học viên từ server
 */
function renderModuleList(modules) {
  filterDatas = modules;
  displayModuleListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayModuleListPage(page) {
  const moduleList = document.getElementById("module-list");
  moduleList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((module, index) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><span>${start + index + 1}</span></td>
      <td><span>${module.class_name}</span></td>
	  <td>
		<a
			href="./page_add_student_to_class.html?class_subject_id=${
        module["class_subject_id"]
      }&class_name=${module["class_name"]}&module_name=${module["module_name"]}"
			class="text-decoration-none text-body detail_class"
		><span>${module.module_name} </span></a
	  ></td>
      <td><span>${module.semester_number}</span></td>
      <td><span>${transferValue(module.class_status)}</span></td>
      <td>
        <button
		 class="btn btn-sm btn-warning me-1 btn-edit"
		 data-bs-toggle="modal"
         data-bs-target="#editClassModal"
		    data-class-subject-id="${module["class_subject_id"]}"
		 	data-class-id="${module["class_id"]}"
			data-class-code="${module["class_code"]}"
			data-class-name="${module["class_name"]}"
			data-module-id="${module["module_id"]}"
			data-module-code="${module["module_code"]}"
			data-module-name="${module["module_name"]}"
			data-teacher-code="${module["teacher_code"]}"
			data-teacher-name="${module["teacher_name"]}"
			data-semester-id="${module["semester_id"]}"
			data-semester="${module["semester_number"]}"
			data-status="${module["class_status"]}">
			<i class="bi bi-pencil-square"></i> Sửa
		</button>
              <button
                data-bs-toggle="modal"
                data-bs-target="#viewClassModal"
                type="button"
                class="btn btn-primary"
				data-class-id="${module["class_id"]}"
				data-class-code="${module["class_code"]}"
				data-class-name="${module["class_name"]}"
				data-module-id="${module["module_id"]}"
				data-module-code="${module["module_code"]}"
				data-module-name="${module["module_name"]}"
				data-teacher-code="${module["teacher_code"]}"
				data-teacher-name="${module["teacher_name"]}"
				data-semester-id="${module["semester_id"]}"
				data-semester="${module["semester_number"]}"
				data-start="${module["semester_start_date"]}"
				data-end="${module["semester_end_date"]}"
                id="btnSaveClass"
              >
                <i class="bi bi-list-ul"></i>
              </button>
      </td>
    `;
    moduleList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayModuleListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
// document.getElementById("searchInput").addEventListener("input", function () {
//   const keyword = this.value.trim().toLowerCase();

//   // filter dữ liệu từ danh sách sinh viên gốc
//   const filtered = teacherDatas.filter((teacher) => {
//     const fullName = `${teacher.teacher_name}`.toLowerCase();
//     return (
//       teacher.teacher_code.toLowerCase().includes(keyword) ||
//       fullName.includes(keyword) ||
//       teacher.teacher_phone?.toLowerCase().includes(keyword)
//     );
//   });

//   currentPage = 1;
//   renderTeacherList(filtered);
// });

document
  .getElementById("viewClassModal")
  .addEventListener("show.bs.modal", function (event) {
    const trigger = event.relatedTarget;

    const class_code = trigger.getAttribute("data-class-code") || "-";
    const class_name = trigger.getAttribute("data-class-name") || "-";
    const module_code = trigger.getAttribute("data-module-code") || "-";
    const module_name = trigger.getAttribute("data-module-name") || "-";
    const teacher_code = trigger.getAttribute("data-teacher-code") || "-";
    const teacher_name = trigger.getAttribute("data-teacher-name") || "-";
    const semester = trigger.getAttribute("data-semester") || "-";
    let start = trigger.getAttribute("data-start");
    let end = trigger.getAttribute("data-end");

    const formatStart = start ? dayjs(start).format("DD/MM/YYYY") : "-";
    const formatEnd = start ? dayjs(end).format("DD/MM/YYYY") : "-";

    document.getElementById("modal-class-code").textContent = class_code;
    document.getElementById("modal-class-name").textContent = class_name;
    document.getElementById("modal-module-code").textContent = module_code;
    document.getElementById("modal-module-name").textContent = module_name;
    document.getElementById("modal-teacher-code").textContent = teacher_code;
    document.getElementById("modal-teacher-name").textContent = teacher_name;
    document.getElementById("modal-semester").textContent = semester;
    document.getElementById("modal-start").textContent = formatStart;
    document.getElementById("modal-end").textContent = formatEnd;
  });

```

### frontend\js\Administrator\manage_class\admin_display_class_student.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getStudentNotInClass();
  displayClass();

  const { class_subject_id, class_name, module_name } = getParams();

  // Gán giá trị vào href
  const viewBtn = document.getElementById("viewClassListBtn");
  viewBtn.href = `page_list_student_in_class.html?class_subject_id=${class_subject_id}&class_name=${class_name}&module_name=${module_name}`;
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    class_subject_id: urlParams.get("class_subject_id"),
    class_name: urlParams.get("class_name"),
    module_name: urlParams.get("module_name"),
  };
}

function displayClass() {
  class_name = getParams();
  module_name = getParams();

  document.querySelector(".class_name").textContent = class_name.class_name;
  document.querySelector(".module_name").textContent = module_name.module_name;
}

/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getStudentNotInClass() {
  const API_BASE = "http://localhost:3000";
  const class_subject_id = getParams();
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/admin/getStudentNotInClass?class_subject_id=${class_subject_id.class_subject_id}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 10;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((student, index) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>
        <input class="form-check-input checkbox-input" type="checkbox" />
	  </td>
      <td><span>${start + index + 1}</span></td>
      <td><span>${student.student_code}</span></td>
      <td><span>${student.student_middle_name}
	  ${student.student_name}</span></td>
	`;
    studentList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
document.getElementById("searchInput").addEventListener("input", function () {
  const keyword = this.value.trim().toLowerCase();

  // filter dữ liệu từ danh sách sinh viên gốc
  const filtered = studentDatas.filter((student) => {
    const fullName =
      `${student.student_middle_name} ${student.student_name}`.toLowerCase();
    return (
      student.student_code.toLowerCase().includes(keyword) ||
      fullName.includes(keyword) ||
      student.student_phone?.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  renderStudentList(filtered);
});

```

### frontend\js\Administrator\manage_class\admin_student_in_class.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getStudentInClass();
  displayClass();
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    class_subject_id: urlParams.get("class_subject_id"),
    class_name: urlParams.get("class_name"),
    module_name: urlParams.get("module_name"),
  };
}

function displayClass() {
  const { class_name, module_name } = getParams();

  document.querySelector(".class_name").textContent = class_name;
  document.querySelector(".module_name").textContent = module_name;
}

/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getStudentInClass() {
  const API_BASE = "http://localhost:3000";
  const class_subject_id = getParams();
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/admin/getStudentInClass?class_subject_id=${class_subject_id.class_subject_id}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      console.log("Chưa Có Dữ Liệu!!!");
      //   Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 10;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((student, index) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><span>${start + index + 1}</span></td>
      <td><span>${student.student_code}</span></td>
      <td><span>${student.student_middle_name}
	  ${student.student_name}</span></td>
	`;
    studentList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
document.getElementById("searchInput").addEventListener("input", function () {
  const keyword = this.value.trim().toLowerCase();

  // filter dữ liệu từ danh sách sinh viên gốc
  const filtered = studentDatas.filter((student) => {
    const fullName =
      `${student.student_middle_name} ${student.student_name}`.toLowerCase();
    return (
      student.student_code.toLowerCase().includes(keyword) ||
      fullName.includes(keyword) ||
      student.student_phone?.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  renderStudentList(filtered);
});

```

### frontend\js\Administrator\manage_class\admin_update_class.js
```js
let classSubjectID = null;

document
  .getElementById("editClassModal")
  .addEventListener("show.bs.modal", async function (event) {
    const trigger = event.relatedTarget;
    classDataWithSemesters = await getClassCodeAndSemester();
    console.log("classDataWithSemesters", classDataWithSemesters);
    listTeacher = await getTeacherList();
    const teacherSelect = document.getElementById("editTeacher");
    teacherSelect.innerHTML = `<option value="" disabled>-- Chọn giảng viên --</option>`;
    listTeacher.forEach((item) => {
      const teacherItem = document.createElement("option");
      teacherItem.value = item.teacher_code;
      teacherItem.textContent = `${item.teacher_name}`;
      teacherSelect.appendChild(teacherItem);
    });

    // Lấy dữ liệu từ nút được click
    classSubjectID = trigger.getAttribute("data-class-subject-id");
    console.log("classSubjectID", classSubjectID);
    const classId = trigger.getAttribute("data-class-id");
    const classCode = trigger.getAttribute("data-class-code");
    const className = trigger.getAttribute("data-class-name");
    const moduleId = trigger.getAttribute("data-module-id");
    const moduleCode = trigger.getAttribute("data-module-code");
    const moduleName = trigger.getAttribute("data-module-name");
    const teacherCode = trigger.getAttribute("data-teacher-code");
    // const teacherName = trigger.getAttribute("data-teacher-name");
    const semesterId = trigger.getAttribute("data-semester-id");
    const status = trigger.getAttribute("data-status");

    document.getElementById(
      "editClassName"
    ).innerHTML = `<option value="${classId}">${classCode} - ${className}</option>`;

    document.getElementById(
      "editModule"
    ).innerHTML = `<option value="${moduleId}">${moduleCode} - ${moduleName}</option>`;

    document.getElementById("editTeacher").value = teacherCode;
    document.getElementById("editStatus").value = status;

    const semesterSelect = document.getElementById("editSemester");
    semesterSelect.innerHTML = `<option value="" disabled>-- Chọn học kỳ --</option>`;

    const selected = classDataWithSemesters.find(
      (item) => item.class.class_id.toString() === classId
    );

    console.log("selected: ", selected);

    if (selected) {
      selected.semesters.forEach((sem) => {
        const opt = document.createElement("option");
        opt.value = sem.semester_id;
        opt.textContent = `Học kỳ ${sem.semester_number}`;
        semesterSelect.appendChild(opt);
      });

      // Set giá trị mặc định học kỳ đang chọn
      semesterSelect.value = semesterId;
    }
  });

async function updateClass(payload) {
  if (!payload) {
    Swal.fire("Lỗi", "Thiếu thông tin để cập nhật!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/updateClass`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const data = await res.json();

    if (data.status === "success") {
      getModuleList();
      Swal.fire("Thành công", "Thông tin đã được cập nhật!", "success");
    } else {
      Swal.fire(
        "Lỗi",
        data.message || "Không thể cập nhật thông tin!",
        "error"
      );
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật!", "error");
  }
}

document
  .getElementById("editClassForm")
  .addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const moduleID = document.getElementById("editModule").value;
    const semesterID = document.getElementById("editSemester").value;
    const classStatus = document.getElementById("editStatus").value;
    const teacherCode = document.getElementById("editTeacher").value;
    const classID = document.getElementById("editClassName").value;
    const payload = {
      classSubjectID,
      semesterID,
      classStatus,
      teacherCode,
    };

    bootstrap.Modal.getInstance(
      document.getElementById("editClassModal")
    ).hide();

    updateClass(payload);
  });

```

### frontend\js\Administrator\manage_dashboard\admin_display_stats.js
```js
document.addEventListener("DOMContentLoaded", async function () {
  getDashboardStats();
});

async function getDashboardStats() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getDashboardStats`);
    const result = await res.json();

    if (result.status === "success") {
      const statDatas = result.data;
      console.log(statDatas);
      renderStatData(statDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderStatData(statDatas) {
  const total_class = statDatas.total_classes;
  const total_student = statDatas.total_students;
  const total_teacher = statDatas.total_teachers;
  const total_account = statDatas.total_accounts;
  document.getElementById("total-class").textContent = total_class;
  document.getElementById("total-student").textContent = total_student;
  document.getElementById("total-teacher").textContent = total_teacher;
  document.getElementById("total-account").textContent = total_account;
}

```

### frontend\js\Administrator\manage_dashboard\dashboard_chart.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getCountStudentInClass();
  getModuleCertificateStats();
});

async function getCountStudentInClass() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getCountStudentInClass`);
    const result = await res.json();

    if (result.status === "success") {
      const countDatas = result.data;
      console.log("Dữ liệu lớp:", countDatas);
      renderCountStudentInClass(countDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getModuleCertificateStats() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/admin/getModuleCertificateStats`
    );
    const result = await res.json();

    if (result.status === "success") {
      const stats = result.data;
      console.log("Dữ liệu lớp:", stats);

      // Tiếp tục render biểu đồ
      renderModuleChart(stats);
      renderPieChart(stats);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderPieChart(data) {
  const certifiedTotal = data.reduce(
    (sum, item) => sum + item.certified_students,
    0
  );
  const total = data.reduce((sum, item) => sum + item.total_students, 0);
  const uncertifiedTotal = total - certifiedTotal;

  const ctx = document.getElementById("certPieChart").getContext("2d");

  new Chart(ctx, {
    type: "pie",
    data: {
      labels: ["Đã cấp chứng chỉ", "Chưa cấp chứng chỉ"],
      datasets: [
        {
          data: [certifiedTotal, uncertifiedTotal],
          backgroundColor: ["#10B981", "#F87171"],
          borderWidth: 1,
        },
      ],
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: "bottom" },
        title: {
          display: true,
          text: "Tỷ lệ sinh viên đạt chứng chỉ",
        },
      },
    },
  });
}

function renderModuleChart(data) {
  const labels = data.map((item) => item.module_name);
  const totalStudents = data.map((item) => item.total_students);
  const certifiedStudents = data.map((item) => item.certified_students);

  const ctx = document.getElementById("moduleChart").getContext("2d");

  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Tổng số sinh viên",
          data: totalStudents,
          backgroundColor: "#3B82F6",
          borderRadius: 6,
        },
        {
          label: "Đã cấp chứng chỉ",
          data: certifiedStudents,
          backgroundColor: "#10B981",
          borderRadius: 6,
        },
      ],
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          labels: {
            font: {
              size: 10, // 🔽 Nhỏ hơn mặc định (~14)
            },
          },
        },
        title: {
          display: true,
          text: "Số sinh viên đạt theo lớp - môn",
          font: {
            size: 12, // 🔽 Nhỏ hơn
          },
        },
        tooltip: {
          bodyFont: {
            size: 12,
          },
          titleFont: {
            size: 13,
          },
        },
      },
      scales: {
        x: {
          ticks: {
            font: {
              size: 10,
            },
          },
        },
        y: {
          beginAtZero: true,
          ticks: {
            font: {
              size: 10,
            },
          },
        },
      },
    },
  });
}

function renderCountStudentInClass(data) {
  const labels = data.map((item) => item.class_name);
  const values = data.map((item) => item.student_count);

  const ctx = document.getElementById("classChart").getContext("2d");
  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Số sinh viên",
          data: values,
          backgroundColor: "#3B82F6",
          borderRadius: 5,
        },
      ],
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false },
      },
      scales: {
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: "Số lượng sinh viên",
          },
        },
        x: {
          ticks: {
            autoSkip: false,
            maxRotation: 45,
            minRotation: 0,
          },
        },
      },
    },
  });
}

```

### frontend\js\Administrator\manage_student\admin_add_student.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  const newCode = await getNewCode();
  console.log("after format code: " + newCode);
});

/**
 * Gửi yêu cầu đến backend để lấy mã học viên cuối cùng hiện tại.
 * @returns {Promise<string|undefined>} - Mã học viên cuối nếu thành công
 */

async function getLastStudentCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getLastStudentCode`);

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const lastStudentCode = result.data.student_code;
      return lastStudentCode;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

/**
 * Tăng số thứ tự của mã học viên lên 1 và định dạng lại.
 * @param {string} studentCode - Mã học viên hiện tại dạng chuỗi
 * @returns {string|null} - Mã mới được định dạng hoặc null nếu lỗi
 */

function formatStudentCode(studentCode) {
  if (!studentCode) {
    Swal.fire("Thông báo", "Không lấy được mã học viên cuối!", "warning");
    return null;
  }

  const oldCode = studentCode;
  const numberPart = oldCode.slice(0, 4);
  let newNumber = Number(numberPart) + 1;

  const formattedNumber = String(newNumber).padStart(4, "0");
  const newCode = `${formattedNumber}/25-THUD`;
  return newCode;
}

/**
 * Lấy mã học viên cuối và tạo mã học viên mới.
 * @returns {Promise<string|null>} - Mã mới được tạo
 */
async function getNewCode() {
  const beforeFormat = await getLastStudentCode();
  const afterFormat = formatStudentCode(beforeFormat);
  return afterFormat;
}

/**
 * Khi modal thêm học viên hiển thị, tự động gán mã học viên mới vào input.
 */
document
  .getElementById("addStudentModal")
  .addEventListener("show.bs.modal", async function (event) {
    // const button = event.relatedTarget; // nút gọi modal
    const newCode = await getNewCode();
    const student_code = document.getElementById("maSo");
    student_code.value = newCode; // gán giá trị vào input
  });

/**
 * Gửi thông tin học viên mới đến backend để thêm vào hệ thống.
 * @param {Object} student - Đối tượng học viên chứa các trường cần thiết
 */

async function addNewStudent(student) {
  if (!student) {
    Swal.fire("Cảnh Báo", "Không nhận được dữ liệu nhập vào!!!", "error");
    console.error("Thiếu dữ liệu cần thiết");
    return;
  }

  console.log(student);

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/addNewStudent`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(student),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Thêm dữ liệu thành công!", "success");
      getStudentList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể thêm dữ liệu!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

/**
 * Lắng nghe sự kiện submit form thêm học viên.
 * Tạo object học viên, gọi hàm thêm và reset form sau khi hoàn tất.
 */
document.getElementById("studentForm").addEventListener("submit", async (e) => {
  e.preventDefault(); // Ngăn form reload trang

  const student = {
    student_code: document.getElementById("maSo").value.trim(),
    student_middle_name: document.getElementById("hoDem").value.trim(),
    student_name: document.getElementById("tenHocVien").value.trim(),
    student_phone: document.getElementById("sdt").value.trim(),
  };

  // Gửi dữ liệu lên server
  await addNewStudent(student);

  // Đóng modal sau khi thêm
  const modal = bootstrap.Modal.getInstance(
    document.getElementById("addStudentModal")
  );
  modal.hide();

  // Reset form
  document.getElementById("studentForm").reset();
});

```

### frontend\js\Administrator\manage_student\admin_display_student.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getStudentList();
});

/**
 * Chuyển đổi các giá trị kỹ thuật thành dạng dễ đọc cho người dùng.
 * @param {*} value - Giá trị cần chuyển đổi (string, null, undefined)
 * @returns {string} - Giá trị đã chuyển đổi phù hợp để hiển thị
 */

function transferValue(value) {
  if (value === null || value === undefined || value === "") {
    return "-";
  } else if (value === "studying") {
    return "Đang học";
  } else if (value === "female") {
    return "Nữ";
  } else if (value === "male") {
    return "Nam";
  } else if (value === "other") {
    return "Khác";
  } else if (value === "inactive") {
    return "Tạm nghỉ";
  } else if (value === "graduated") {
    return "Đã tốt nghiệp";
  } else if (value === "dropout") {
    return "Bỏ học";
  } else {
    return value;
  }
}

/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getStudentList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getStudentList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 10;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("student_list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((student, index) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><span>${start + index + 1}</span></td>
      <td class="marquee-hover"><span>${student.student_code}</span></td>
      <td class="marquee-hover"><span>${student.student_middle_name} ${
      student.student_name
    }</span></td>
      <td class="marquee-hover"><span>${transferValue(student.student_gender)}</span></td>
      <td class="marquee-hover"><span>${transferValue(student.student_date_of_birth)}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        student.student_address
      )}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        student.student_email
      )}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        student.student_phone
      )}</span></td>
      <td class="marquee-hover"><span>${transferValue(student.student_status)}</span></td>
      <td >
        <button
      data-bs-toggle="modal"
      data-bs-target="#editModal"
      data-student-code="${student.student_code}"
      data-middle-name="${student.student_middle_name}"
      data-name="${student.student_name}"
      data-status="${student.student_status}"
      class="btn btn-sm btn-warning me-1 btn-edit">
      <i class="bi bi-pencil-square me-1"></i>Sửa
    </button>
      </td>
    `;
    studentList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
document.getElementById("searchInput").addEventListener("input", function () {
  const keyword = this.value.trim().toLowerCase();

  // filter dữ liệu từ danh sách sinh viên gốc
  const filtered = studentDatas.filter((student) => {
    const fullName =
      `${student.student_middle_name} ${student.student_name}`.toLowerCase();
    return (
      student.student_code.toLowerCase().includes(keyword) ||
      fullName.includes(keyword) ||
      student.student_phone?.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  renderStudentList(filtered);
});

```

### frontend\js\Administrator\manage_student\admin_import_student_list.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getLastStudentCode();
});

/**
 * Chuyển đổi mã ngày dạng số serial từ Excel sang định dạng dd/mm/yyyy.
 * @param {number} serial - Mã ngày dạng số (Excel serial date)
 * @returns {string} - Ngày ở định dạng dd/mm/yyyy
 */

function formatDate(serial) {
  const utc_days = Math.floor(serial - 25569); // Excel's base date offset
  const utc_value = utc_days * 86400; // seconds
  const date = new Date(utc_value * 1000);

  const day = String(date.getUTCDate()).padStart(2, "0");
  const month = String(date.getUTCMonth() + 1).padStart(2, "0"); // tháng bắt đầu từ 0
  const year = date.getUTCFullYear();

  return `${day}/${month}/${year}`;
}

/**
 * Đọc và phân tích nội dung file Excel để chuyển thành danh sách học viên.
 * @param {File} file - File Excel được chọn từ input
 * @returns {Promise<Array<Object>|null>} - Mảng học viên đã xử lý hoặc null nếu lỗi
 */

async function parseExcelFile(file) {
  if (!file) {
    console.error("Không có file Excel được chọn");
    Swal.fire("Lỗi", "Không có file Excel được chọn!", "");
    return null;
  }

  try {
    const data = await file.arrayBuffer();
    const workbook = XLSX.read(await file.arrayBuffer(), { type: "array" });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { range: 7 });

    if (rows.length === 0) {
      console.warn("File Excel không có dữ liệu.");
      Swal.fire("Lỗi", "File Excel không có dữ liệu!", "error");
      return null;
    }
    const formatDatas = rows.slice(1, -1);

    const lastStudentCode = await getLastStudentCode();
    const trimmed = lastStudentCode.slice(0, 4);
    let convertNumber = Number(trimmed);

    const parsed = formatDatas.map((row) => {
      let student_code = row["MÃ HS"] || row["MÃ\nHS"] || "";
      const student_middle_name = row["HỌ ĐỆM"] || row["Họ và tên đệm"] || "";
      const student_name = row["TÊN"] || "";
      let ngaySinh = row["NGÀY SINH"] || "";
      const student_date_of_birth = isNaN(ngaySinh)
        ? ngaySinh
        : formatDate(ngaySinh);

      if (!student_code || student_code.trim() === "") {
        convertNumber++;
        const formattedNumber = String(convertNumber).padStart(4, "0"); // → "0140"
        student_code = `${formattedNumber}/25-THUD`;
      }

      return {
        student_code,
        student_middle_name,
        student_name,
        student_date_of_birth,
      };
    });

    if (parsed.length === 0) {
      console.warn("Không có dữ liệu hợp lệ trong file Excel.");
      Swal.fire("Lỗi", "Không có dữ liệu hợp lệ trong file Excel!", "error");
      return null;
    }

    return parsed;
  } catch (err) {
    console.error("❌ Lỗi khi đọc file Excel:", err);
    return null;
  }
}

/**
 * Gọi API để lấy mã học viên cuối cùng hiện có trong hệ thống.
 * @returns {Promise<string|undefined>} - Mã học viên cuối nếu thành công
 */

async function getLastStudentCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getLastStudentCode`);

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const lastStudentCode = result.data.student_code;
      //   console.log("Student Code:", lastStudentCode);
      return lastStudentCode;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

/**
 * Gửi danh sách học viên đã xử lý lên server để thêm vào hệ thống.
 * @param {Array<Object>} payload - Danh sách học viên để import
 */

async function importStudentList(payload) {
  if (!payload || !Array.isArray(payload)) {
    Swal.fire("Lỗi", "Dữ liệu không hợp lệ!", "error");
    console.error("Dữ liệu không hợp lệ:", payload);
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/importStudentList`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();
    if (result.data.insertedCount === 0) {
      Swal.fire(
        "Thông báo",
        "Không có học sinh nào được thêm vào hệ thống!",
        "info"
      );
      return;
    }

    if (result.status === "success") {
      Swal.fire(
        "Thành công",
        `Đã thêm ${result.data.insertedCount}! vào hệ thống`,
        "success"
      ).then(() => {
        getStudentList();
      });
    } else {
      Swal.fire("Thông báo", "Không thể thêm dữ liệu!", "warning");
      console.error("Lỗi khi thêm dữ liệu:", result.message);
    }
  } catch (error) {
    console.error("❌ Lỗi khi thêm dữ liệu:", error);
    Swal.fire("Lỗi", "Lỗi khi thêm dữ liệu!", "error");
  }
}

/**
 * Bắt sự kiện chọn file Excel, xử lý và gửi dữ liệu lên server.
 */

document
  .getElementById("excelFile")
  .addEventListener("change", async function () {
    const file = this.files[0];
    const result = await parseExcelFile(file);
    // const studentCodes = await parseNametoStudentCode(result);
    console.log("📄 Danh sách sinh viên:", result);

    await importStudentList(result);
  });

```

### frontend\js\Administrator\manage_student\admin_update_student.js
```js
/**
 * Khi modal học viên hiển thị, tự động gán mã học viên vào input.
 */
document
  .getElementById("editModal")
  .addEventListener("show.bs.modal", async function (event) {
    const button = event.relatedTarget;
    const studentCode = button.getAttribute("data-student-code");
    const middle_name = button.getAttribute("data-middle-name");
    const name = button.getAttribute("data-name");
    const status = button.getAttribute("data-status");

    document.getElementById("editMaSV").value = studentCode;
    document.getElementById("editHoDem").value = middle_name;
    document.getElementById("editTen").value = name;
    document.getElementById("editTrangThai").value = status;
  });

document
  .getElementById("editStudentForm")
  .addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const code = document.getElementById("editMaSV").value.trim();
    const middle_name = document.getElementById("editHoDem").value.trim();
    const name = document.getElementById("editTen").value.trim();
    const stauts = document.getElementById("editTrangThai").value.trim();
    const student = {
      student_code: code,
      student_middle_name: middle_name,
      student_name: name,
      student_status: stauts,
    };

    bootstrap.Modal.getInstance(document.getElementById("editModal")).hide();

    updateStudentInfor(student);
  });

async function updateStudentInfor(student) {
  if (!student) {
    Swal.fire("Lỗi", "Thiếu thông tin của học viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/updateStudentInfor`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(student),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Thông tin đã được cập nhật!", "success");
      getStudentList();
    } else {
      Swal.fire(
        "Lỗi",
        data.message || "Không thể cập nhật thông tin học viên!",
        "error"
      );
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật!", "error");
  }
}

```

### frontend\js\Administrator\manage_teacher\admin_add_teacher.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  const newCode = await getNewCode();
  const oldCode = await getLastTeacherCode();
  console.log("after format code: " + newCode);
  console.log("old code: " + oldCode);
});

/**
 * Gửi yêu cầu đến backend để lấy mã học viên cuối cùng hiện tại.
 * @returns {Promise<string|undefined>} - Mã học viên cuối nếu thành công
 */

async function getLastTeacherCode() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getLastTeacherCode`);

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const lastTeacherCode = result.data.teacher_code;
      return lastTeacherCode;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

/**
 * Tăng số thứ tự của mã học viên lên 1 và định dạng lại.
 * @param {string} teacherCode - Mã học viên hiện tại dạng chuỗi
 * @returns {string|null} - Mã mới được định dạng hoặc null nếu lỗi
 */

function formatTeacherCode(teacherCode) {
  if (!teacherCode) {
    Swal.fire("Thông báo", "Không lấy được mã học viên cuối!", "warning");
    return null;
  }

  const oldCode = teacherCode;
  const numberPart = oldCode.slice(2); // bỏ 'GV'
  const newNumber = parseInt(numberPart, 10) + 1;

  // Format lại với padding
  const newCode = String(newNumber).padStart(5, "0");
  return `GV${newCode}`;
}

/**
 * Lấy mã học viên cuối và tạo mã học viên mới.
 * @returns {Promise<string|null>} - Mã mới được tạo
 */
async function getNewCode() {
  const beforeFormat = await getLastTeacherCode();
  const afterFormat = formatTeacherCode(beforeFormat);
  return afterFormat;
}

/**
 * Khi modal thêm học viên hiển thị, tự động gán mã học viên mới vào input.
 */
document
  .getElementById("addTeacherModal")
  .addEventListener("show.bs.modal", async function (event) {
    // const button = event.relatedTarget; // nút gọi modal
    const newCode = await getNewCode();
    const teacher_code = document.getElementById("maSo");
    teacher_code.value = newCode; // gán giá trị vào input
  });

/**
 * Gửi thông tin học viên mới đến backend để thêm vào hệ thống.
 * @param {Object} student - Đối tượng học viên chứa các trường cần thiết
 */

async function addNewTeacher(teacher) {
  if (!teacher) {
    Swal.fire("Cảnh Báo", "Không nhận được dữ liệu nhập vào!!!", "error");
    console.error("Thiếu dữ liệu cần thiết");
    return;
  }

  console.log(teacher);

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/addNewTeacher`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(teacher),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Thêm dữ liệu thành công!", "success");
      getTeacherList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể thêm dữ liệu!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

/**
 * Lắng nghe sự kiện submit form thêm học viên.
 * Tạo object học viên, gọi hàm thêm và reset form sau khi hoàn tất.
 */
document.getElementById("teacherForm").addEventListener("submit", async (e) => {
  e.preventDefault(); // Ngăn form reload trang

  const teacher = {
    teacher_code: document.getElementById("maSo").value.trim(),
    teacher_name: document.getElementById("hoTen").value.trim(),
    teacher_date_of_birth: document.getElementById("ngaySinh").value.trim(),
    teacher_gender: document.getElementById("gioiTinh").value.trim(),
    teacher_address: document.getElementById("diaChi").value.trim(),
    teacher_email: document.getElementById("email").value.trim(),
    teacher_phone: document.getElementById("sdt").value.trim(),
  };
  console.log(document.getElementById("ngaySinh").value.trim());

  // Gửi dữ liệu lên server
  await addNewTeacher(teacher);

  // Đóng modal sau khi thêm
  const modal = bootstrap.Modal.getInstance(
    document.getElementById("addTeacherModal")
  );
  modal.hide();

  // Reset form
  document.getElementById("teacherForm").reset();
});

```

### frontend\js\Administrator\manage_teacher\admin_display_teacher.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  getTeacherList();
});

/**
 * Chuyển đổi các giá trị kỹ thuật thành dạng dễ đọc cho người dùng.
 * @param {*} value - Giá trị cần chuyển đổi (string, null, undefined)
 * @returns {string} - Giá trị đã chuyển đổi phù hợp để hiển thị
 */

function transferValue(value) {
  if (value === null || value === undefined || value === "") {
    return "-";
  } else if (value === "female") {
    return "Nữ";
  } else if (value === "male") {
    return "Nam";
  } else if (value === "other") {
    return "Khác";
  } else if (value === "teaching") {
    return "Đang dạy";
  } else if (value === "on_leave") {
    return "Nghỉ phép";
  } else if (value === "resigned") {
    return "Nghỉ việc";
  } else if (value === "retired") {
    return "Nghỉ hưu";
  } else {
    return value;
  }
}

/**
 * Gửi request đến API backend để lấy danh sách học viên.
 * Nếu thành công sẽ gọi hàm hiển thị dữ liệu và phân trang.
 */
async function getTeacherList() {
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/getTeacherList`);
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Teacher List:", result.data);
      teacherDatas = result.data;
      filterDatas = [...teacherDatas];
      renderTeacherList(filterDatas);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 10;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let teacherDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} teachers - Mảng dữ liệu học viên từ server
 */
function renderTeacherList(teachers) {
  filterDatas = teachers;
  displayTeacherListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayTeacherListPage(page) {
  const teacherList = document.getElementById("teacherTableBody");
  teacherList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  items.forEach((teacher, index) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><span>${start + index + 1}</span></td>
      <td><span>${teacher.teacher_code}</span></td>
	  <td><span>${teacher.teacher_name} </span></td>
      <td><span>${transferValue(teacher.teacher_date_of_birth)}</span></td>
      <td><span>${transferValue(teacher.teacher_gender)}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        teacher.teacher_address
      )}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        teacher.teacher_email
      )}</span></td>
      <td class="marquee-hover"><span>${transferValue(
        teacher.teacher_phone
      )}</span></td>
      <td><span>${transferValue(teacher.teacher_status)}</span></td>
      <td>
        <button
                class="btn btn-sm btn-warning me-1"
                data-bs-toggle="modal"
                data-bs-target="#editTeacherModal"
				data-code = "${teacher["teacher_code"]}"
				data-name = "${teacher["teacher_name"]}"
				data-phone = "${teacher["teacher_phone"]}"
				data-gender = "${teacher["teacher_gender"]}"
				data-date-of-birth = "${teacher["teacher_date_of_birth"]}"
				data-email = "${teacher["teacher_email"]}"
				data-address = "${teacher["teacher_address"]}"
				data-status = "${teacher["teacher_status"]}">
				
                <i class="bi bi-pencil-square"></i> Sửa
              </button>
      </td>
    `;
    teacherList.appendChild(row);
  });
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

/**
 * Lắng nghe input ô tìm kiếm và lọc dữ liệu từ `studentDatas` gốc.
 * Hiển thị danh sách học viên phù hợp.
 */
document.getElementById("searchInput").addEventListener("input", function () {
  const keyword = this.value.trim().toLowerCase();

  // filter dữ liệu từ danh sách sinh viên gốc
  const filtered = teacherDatas.filter((teacher) => {
    const fullName = `${teacher.teacher_name}`.toLowerCase();
    return (
      teacher.teacher_code.toLowerCase().includes(keyword) ||
      fullName.includes(keyword) ||
      teacher.teacher_phone?.toLowerCase().includes(keyword)
    );
  });

  currentPage = 1;
  renderTeacherList(filtered);
});

```

### frontend\js\Administrator\manage_teacher\admin_update_teacher.js
```js
/**
 * Khi modal học viên hiển thị, tự động gán mã học viên vào input.
 */
document
  .getElementById("editTeacherModal")
  .addEventListener("show.bs.modal", async function (event) {
    const button = event.relatedTarget;
    const code = button.getAttribute("data-code");
    const name = button.getAttribute("data-name");
    const phone = button.getAttribute("data-phone");
    const gender = button.getAttribute("data-gender");
    const dateOfBirth = button.getAttribute("data-date-of-birth");
    const email = button.getAttribute("data-email");
    const address = button.getAttribute("data-address");
    const status = button.getAttribute("data-status");

    document.getElementById("editMaSo").value = code;
    document.getElementById("editHoTen").value = name;
    document.getElementById("editNgaySinh").value = dateOfBirth;
    document.getElementById("editGioiTinh").value = gender;
    document.getElementById("editDiaChi").value = address;
    document.getElementById("editEmail").value = email;
    document.getElementById("editSdt").value = phone;
    document.getElementById("editTrangThai").value = status;
  });

document
  .getElementById("editTeacherForm")
  .addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const code = document.getElementById("editMaSo").value.trim();
    const name = document.getElementById("editHoTen").value.trim();
    const dateOfBirth = document.getElementById("editNgaySinh").value.trim();
    const gender = document.getElementById("editGioiTinh").value.trim();
    const address = document.getElementById("editDiaChi").value.trim();
    const email = document.getElementById("editEmail").value.trim();
    const phone = document.getElementById("editSdt").value.trim();
    const status = document.getElementById("editTrangThai").value.trim();

    const teacher = {
      teacher_code: code,
      teacher_name: name,
      teacher_date_of_birth: dateOfBirth,
      teacher_gender: gender,
      teacher_address: address,
      teacher_email: email,
      teacher_phone: phone,
      teacher_status: status,
    };

    bootstrap.Modal.getInstance(
      document.getElementById("editTeacherModal")
    ).hide();
    document.getElementById("editTeacherForm").reset();
    updateTeacherInfor(teacher);
  });

async function updateTeacherInfor(teacher) {
  if (!teacher) {
    Swal.fire("Lỗi", "Thiếu thông tin của học viên!", "error");
    return;
  }
  console.log("teacher", teacher);
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/admin/updateTeacherInfor`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(teacher),
    });

    const data = await res.json();

    if (data.status === "success") {
      getTeacherList();
      Swal.fire("Thành công", "Thông tin đã được cập nhật!", "success");
    } else {
      Swal.fire(
        "Lỗi",
        data.message || "Không thể cập nhật thông tin giảng viên!",
        "error"
      );
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật!", "error");
  }
}

```

### frontend\js\Authentication\login.js
```js
const loginForm = document.getElementById("loginForm");
if (loginForm) {
  loginForm.addEventListener("submit", async function (event) {
    event.preventDefault();
    const username = loginForm.querySelector('input[type="text"]').value;
    const password = loginForm.querySelector('input[type="password"]').value;

    if (!username || !password) {
      showToast("Please enter complete information!", "warn");
      return;
    }
    try {
      const API_BASE = "http://localhost:3000";
      const response = await fetch(`${API_BASE}/api/v1/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      const result = await response.json();

      if (result.status === "success") {
        const { token, user } = result.data;
        Storage.saveUser(user, token);

        // Chuyển hướng theo phân quyền
        switch (user.role) {
          case 0:
            window.location.href = "../admin/page_admin.html";
            break;
          case 1:
            window.location.href = "../student/page_student.html";
            break;
          case 2:
            window.location.href = "../teacher/page_teacher_home.html";
            break;
          default:
            showToast("User role not determined!!!", "warn");
        }
      } else {
        showToast(`Login Fail: ${result.message}`, "error");
      }
    } catch (error) {
      console.error(error);
      showToast(`Unable to connect to server: ${error.message}`, "error");
    }
  });
} else {
  console.error("Không tìm thấy form đăng nhập!");
}

```

### frontend\js\Authentication\logout.js
```js
function handleLogout() {
  // Gọi API logout nếu muốn xoá session trên server
  fetch("http://localhost:3000/api/v1/auth/logout", {
    method: "POST",
    credentials: "include",
  }).catch((err) => {
    console.warn("Không thể gọi logout từ server:", err.message);
  });

  Storage.clear();
  window.location.href = "../login/login.html";
}

// Gắn tự động nếu có phần tử logout nào
window.addEventListener("DOMContentLoaded", () => {
  const btns = [
    document.getElementById("logoutBtn"),
    document.getElementById("sidebarLogout"),
  ];

  btns.forEach((btn) => {
    if (btn) {
      btn.addEventListener("click", handleLogout);
    }
  });
});

```

### frontend\js\Authentication\storage.js
```js
const Storage = {
  saveUser: (user, token) => {
    localStorage.setItem("user", JSON.stringify(user));
    localStorage.setItem("token", token);
  },
  getUser: () => {
    const user = localStorage.getItem("user");
    return user ? JSON.parse(user) : null;
  },
  getToken: () => localStorage.getItem("token"),
  getRole: () => {
    const user = Storage.getUser();
    return user ? user.role : null;
  },
  isLoggedIn: () => !!Storage.getToken(),
  clear: () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
  },
};

window.Storage = Storage;

```

### frontend\js\Student\student.js
```js
document.addEventListener("DOMContentLoaded", function () {
  fetchStudentScores();
  displayStudentName();
});

async function fetchStudentScores() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getScore?studentCode=${student.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("data: " + result.data);
      renderScoresToTable(result.data);
      summaryCard(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu điểm!", "error");
  }
}

function renderScoresToTable(scores) {
  const tbody = document.querySelector("table tbody");
  tbody.innerHTML = "";
  console.log(scores);

  scores.forEach((item, index) => {
    var KQ;
    if (item["Tổng điểm"] === null || item["Tổng điểm"] === undefined) {
      KQ = "-";
    } else if (item["Tổng điểm"] >= 4) {
      KQ = "Đạt";
    } else {
      KQ = "Không Đạt";
    }
    const row = document.createElement("tr");

    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${item["Mã Môn học"]}</td>
      <td>${item["Tên Môn học"]}</td>
      <td>${item["Đơn Vị Học"] ?? "-"}</td>
      <td>${item["Học kỳ"] ?? "-"}</td>
      <td>${item["Tổng điểm"] ?? "-"}</td>
      <td>${KQ}</td>
      <td>-</td>
    `;

    tbody.appendChild(row);
  });
}

function summaryCard(scores) {
  const avg10Score = document.querySelector(".card.yellow .h3");
  const avg4Score = document.querySelector(".card.red .h3");
  const result = document.querySelector(".card.blue .h3");
  const letterGrade = document.querySelector(".card.teal .h3");

  const validScores = scores
    .map((s) => parseFloat(s["Tổng điểm"]))
    .filter((score) => !isNaN(score));
  console.log("Điểm hợp lệ:", validScores);

  if (validScores.length !== scores.length || validScores.length === 0) {
    avg10Score.textContent = "-";
    avg4Score.textContent = "-";
    result.textContent = "-";
    letterGrade.textContent = "-";
    return;
  }

  const sum = validScores.reduce((a, b) => a + b, 0);
  const avg10 = sum / validScores.length;
  console.log("Tổng điểm:", sum);
  console.log("Điểm trung bình 10:", avg10);

  const avg4 =
    validScores
      .map((score) => convertToHeSo4(score))
      .reduce((a, b) => a + b, 0) / validScores.length;

  const passed = validScores.every((score) => score >= 4);
  const letter = convertToLetterGrade(avg10);

  avg10Score.textContent = avg10.toFixed(2);
  avg4Score.textContent = avg4.toFixed(2);
  result.textContent = passed ? "Đạt" : "Không đạt";
  letterGrade.textContent = letter;
}

function convertToHeSo4(score) {
  if (score >= 9) return 4.0;
  if (score >= 7.0) return 3.0;
  if (score >= 5.5) return 2.0;
  if (score >= 4.0) return 1.0;
  return 0.0;
}

function convertToLetterGrade(score) {
  if (score >= 8.5) return "A";
  if (score >= 8.0) return "B+";
  if (score >= 7.0) return "B";
  if (score >= 6.5) return "C+";
  if (score >= 5.5) return "C";
  if (score >= 5.0) return "D+";
  if (score >= 4.0) return "D";
  return "F";
}

async function filterStudentScores() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  const semesterInput = document.querySelector("#hocKy");
  const semester = semesterInput.value.trim();

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getScoreBySemester?studentCode=${student.username}&semester=${semester}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Dữ liệu sau khi lọc:", result.data);
      renderScoresToTable(result.data);
      summaryCard(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu điểm!", "error");
  }
}

async function displayStudentName() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getStudentInfo?studentCode=${student.username}`
    );

    const result = await res.json();

    if (result.status === "success") {
      document.querySelector(
        ".studentFullName"
      ).textContent = `${result.data.student_middle_name} ${result.data.student_name}`;
    } else {
      Swal.fire("Thông báo", "Không tìm thấy thông tin sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Không thể kết nối tới máy chủ!", "error");
  }
}

```

### frontend\js\Student\student_cert.js
```js
document.addEventListener("DOMContentLoaded", async () => {
  await getCertificatesOfStudent();
  await displayStudentName();
});

async function displayStudentName() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getStudentInfo?studentCode=${student.username}`
    );

    const result = await res.json();

    if (result.status === "success") {
      document.querySelector(
        ".studentFullName"
      ).textContent = `${result.data.student_middle_name} ${result.data.student_name}`;
    } else {
      Swal.fire("Thông báo", "Không tìm thấy thông tin sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Không thể kết nối tới máy chủ!", "error");
  }
}

async function getCertificatesOfStudent() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/student/getCertificatesOfStudent?studentCode=${student.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student List:", result.data);
      studentDatas = result.data;
      filterDatas = [...studentDatas];
      renderStudentList(filterDatas);
    } else {
      console.log("Chưa Có Dữ Liệu!!!");
      //   Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

// === Biến toàn cục ===
/** @type {number} */
const limitRows = 8;
/** @type {number} */
let currentPage = 1;
/** @type {Array<Object>} */
let studentDatas = []; // Dữ liệu gốc
/** @type {Array<Object>} */
let filterDatas = []; // Dữ liệu sẽ hiển thị khi tìm kiếm

/**
 * Gán dữ liệu và hiển thị danh sách học viên trên giao diện kèm phân trang.
 * @param {Array<Object>} students - Mảng dữ liệu học viên từ server
 */
function renderStudentList(students) {
  filterDatas = students;
  displayStudentListPage(currentPage);
  renderPagination();
}

/**
 * Hiển thị học viên cho một trang cụ thể.
 * @param {number} page - Số trang cần hiển thị
 */
function displayStudentListPage(page) {
  const studentList = document.getElementById("form-list");
  studentList.innerHTML = ""; // Clear existing rows
  const start = (page - 1) * limitRows;
  const end = start + limitRows;
  const items = filterDatas.slice(start, end);

  if (items.length > 0) {
    items.forEach((student, index) => {
      let date = student.ngay_cap;
      formatDate = date ? dayjs(date).format("DD/MM/YYYY") : "-";
      const row = document.createElement("tr");
      row.innerHTML = `
			  <td>${index + start + 1}</td>
			<td>${student.so_hieu}</td>
			<td>${student.ma_so}</td>
			<td>${student.ten}</td>
			<td>${student.lop}</td>
			<td>${student.ten_mon}</td>
			<td>${formatDate}</td>
		`;
      studentList.appendChild(row);
    });
  } else {
    studentList.innerHTML = `
		<tr>
			<td colspan="7" class="text-center text-muted bg-body-secondary">Chưa Có Chứng Chỉ Được Cấp</td>
		</tr>
	`;
  }
}

/**
 * Vẽ thanh phân trang phía dưới bảng.
 * Tự động thêm các nút trang, dấu "..." và nút chuyển trang trước/sau.
 */
function renderPagination() {
  const totalPages = Math.ceil(filterDatas.length / limitRows);
  const pagination = document.getElementById("pagination");
  pagination.innerHTML = "";

  const maxVisible = 3; // Số nút trang muốn hiển thị xung quanh trang hiện tại
  let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
  let endPage = Math.min(totalPages, startPage + maxVisible - 1);

  // Điều chỉnh nếu cuối danh sách
  if (endPage - startPage < maxVisible - 1) {
    startPage = Math.max(1, endPage - maxVisible + 1);
  }

  // Nút "«" ← previous
  if (currentPage > 1) {
    pagination.appendChild(createPageItem("«", currentPage - 1));
  }

  // Nút trang đầu + dấu ...
  if (startPage > 1) {
    pagination.appendChild(createPageItem(1, 1));
    if (startPage > 2) {
      pagination.appendChild(createEllipsis());
    }
  }

  // Các nút trang chính giữa
  for (let i = startPage; i <= endPage; i++) {
    const li = createPageItem(i, i);
    if (i === currentPage) li.classList.add("active");
    pagination.appendChild(li);
  }

  // Dấu ... + trang cuối
  if (endPage < totalPages) {
    if (endPage < totalPages - 1) {
      pagination.appendChild(createEllipsis());
    }
    pagination.appendChild(createPageItem(totalPages, totalPages));
  }

  // Nút "»" → next
  if (currentPage < totalPages) {
    pagination.appendChild(createPageItem("»", currentPage + 1));
  }
}

/**
 * Tạo một nút trang (số hoặc điều hướng).
 * @param {string|number} label - Nội dung hiển thị của nút
 * @param {number} pageNum - Số trang tương ứng khi click
 * @returns {HTMLLIElement} - Phần tử <li> chứa nút
 */
function createPageItem(label, pageNum) {
  const li = document.createElement("li");
  li.className = "page-item";
  const a = document.createElement("a");
  a.className = "page-link";
  a.href = "#";
  a.textContent = label;
  a.addEventListener("click", (e) => {
    e.preventDefault();
    currentPage = pageNum;
    displayStudentListPage(currentPage);
    renderPagination();
  });
  li.appendChild(a);
  return li;
}

/**
 * Tạo một phần tử phân trang dạng "..." (dấu ba chấm).
 * @returns {HTMLLIElement} - Phần tử <li> disabled
 */
function createEllipsis() {
  const li = document.createElement("li");
  li.className = "page-item disabled";
  li.innerHTML = `<span class="page-link">...</span>`;
  return li;
}

```

### frontend\js\Student\student_information.js
```js
document.addEventListener("DOMContentLoaded", function () {
  fetchStudentInfo();
  updateStudentInfo();
});

async function fetchStudentInfo() {
  const student = Storage.getUser();
  if (!student || !student.username) {
    Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
    return;
  }

  try {
    const API_BASE = "http://localhost:3000";
    const res = await fetch(
      `${API_BASE}/api/v1/student/getStudentInfo?studentCode=${student.username}`
    );
    const result = await res.json();

    if (result.status === "success") {
      displayStudentInfo(result.data);
      displayStudentInfoInModal(result.data);
    } else {
      Swal.fire("Thông báo", "Không tìm thấy thông tin sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Không thể kết nối tới máy chủ!", "error");
  }
}

function displayStudentInfo(info) {
  // Họ tên + mã số
  document.querySelector(
    ".studentFullName"
  ).textContent = `${info.student_middle_name} ${info.student_name}`;
  document.querySelector(".studentCode").textContent = info.student_code;

  // Thông tin cá nhân cơ bản
  document.querySelector(".studentMiddleName").textContent =
    info.student_middle_name;
  document.querySelector(".studentName").textContent = info.student_name;
  document.querySelector(".studentGender").textContent = formatGender(
    info.student_gender
  );
  document.querySelector(".studentDateOfBirth").textContent = formatDate(
    info.student_date_of_birth
  );

  // Thông tin liên hệ
  document.querySelector(".studentPhone").textContent = info.student_phone;
  document.querySelector(".studentIDCard").textContent = info.student_IDCard;
  document.querySelector(".studentAddress").textContent = info.student_address;
  document.querySelector(".studentEmail").textContent = info.student_email;
  document.querySelector(".studentCountry").textContent = info.student_country;
  document.querySelector(".studentBorn").textContent = info.student_country;

  // Trạng thái
  document.querySelector(".studentStatus").textContent = formatStatus(
    info.student_status
  );
}

function formatDate(dateStr) {
  if (!dateStr) return "-";
  const date = new Date(dateStr);
  return date.toLocaleDateString("vi-VN");
}

function formatGender(gender) {
  return gender === "male" ? "Nam" : gender === "female" ? "Nữ" : "Khác";
}

function formatStatus(status) {
  switch (status) {
    case "studying":
      return "Đang học";
    case "graduated":
      return "Đã tốt nghiệp";
    case "inactive":
      return "Ngừng học";
    default:
      return "Không rõ";
  }
}

function displayStudentInfoInModal(info) {
  document.getElementById("inputMiddleName").value =
    info.student_middle_name || "";
  document.getElementById("inputName").value = info.student_name || "";
  document.getElementById("inputGender").value = info.student_gender || "other";

  // Định dạng ngày sinh về yyyy-MM-dd cho input type="date"
  const dob = info.student_date_of_birth
    ? new Date(info.student_date_of_birth).toISOString().split("T")[0]
    : "";
  document.getElementById("inputDOB").value = dob;

  document.getElementById("inputPhone").value = info.student_phone || "";
  document.getElementById("inputEmail").value = info.student_email || "";
  document.getElementById("inputIDCard").value = info.student_IDCard || "";
  document.getElementById("inputBorn").value = info.student_country || "";
  document.getElementById("inputCountry").value = info.student_country || "";
  document.getElementById("inputAddress").value = info.student_address || "";
}

function updateStudentInfo() {
  document
    .getElementById("updateStudentForm")
    .addEventListener("submit", async function (e) {
      e.preventDefault();

      const student = Storage.getUser();
      if (!student || !student.username) {
        Swal.fire("Lỗi", "Không xác định được sinh viên!", "error");
        return;
      }

      const updatedData = {
        student_gender: document.getElementById("inputGender").value,
        student_date_of_birth: document.getElementById("inputDOB").value,
        student_phone: document.getElementById("inputPhone").value.trim(),
        student_email: document.getElementById("inputEmail").value.trim(),
        student_IDCard: document.getElementById("inputIDCard").value.trim(),
        student_country: document.getElementById("inputCountry").value.trim(),
        student_address: document.getElementById("inputAddress").value.trim(),
      };

      if (!updatedData.student_email.includes("@")) {
        Swal.fire("Lỗi", "Email không hợp lệ!", "error");
        return;
      }
      console.log("Sending data:", updatedData);

      try {
        const API_BASE = "http://localhost:3000";
        const res = await fetch(
          `${API_BASE}/api/v1/student/updateStudentInfo?studentCode=${student.username}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(updatedData),
          }
        );

        const result = await res.json();

        if (result.status === "success") {
          Swal.fire(
            "Thành công",
            "Cập nhật thông tin thành công!",
            "success"
          ).then(() => {
            // Đóng modal, reload lại trang hoặc gọi fetch lại dữ liệu
            const modal = bootstrap.Modal.getInstance(
              document.getElementById("updateModal")
            );
            modal.hide();
            fetchStudentInfo(); // Gọi lại hàm để cập nhật UI
          });
        } else {
          Swal.fire("Thất bại", "Không thể cập nhật thông tin!", "error");
        }
      } catch (error) {
        console.error(error);
        Swal.fire("Lỗi", "Có lỗi khi gửi yêu cầu đến máy chủ!", "error");
      }
    });
}

```

### frontend\js\Teacher\teacher_chart.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentPassing();
  getPassingPropotion();
  getAvgScore();
  getScoreProgress();
  getCountTeaching();
  getLastUpdate();
});

async function getStudentPassing() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentPassing?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Student Passing Data:", result.data);
      renderStudentPassingChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getPassingPropotion() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getPassingPropotion?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && result.data) {
      console.log("Passing Proportion Data:", result.data);
      renderPieChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu tổng thể!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getAvgScore() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getAvgScore?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      console.log("Average Score Data:", result.data);
      renderAvgScoreChart(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được điểm trung bình!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function getScoreProgress() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getScoreProgress?teacherCode=${teacher.username}`
    );
    const result = await res.json();
    console.log("Score Progress Result:", result);

    if (result.status === "success") {
      console.log("Score Progress Data:", result.data);
      renderScoreProgress(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được tiến độ điểm!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu tiến độ điểm!", "error");
  }
}

function renderScoreProgress(datas) {
  const score = document.querySelector(".score_progress");

  if (datas.length === 0) {
    score.textContent = "Không có dữ liệu tiến độ điểm!!";
    return;
  }

  const totalClasses = datas.tong_sinh_vien;
  const enteredScores = datas.so_diem_da_nhap;
  const progressPercentage = ((enteredScores / totalClasses) * 100).toFixed(2);

  score.textContent = progressPercentage + "%";
}

async function getCountTeaching() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getCountTeaching?teacherCode=${teacher.username}`
    );
    const result = await res.json();
    console.log("Count Teaching Result:", result);
    if (result.status === "success" && result.data) {
      console.log("Count Teaching Data:", result.data);
      renderCountTeaching(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được số lượng lớp dạy!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu số lượng lớp dạy!", "error");
  }
}

function renderCountTeaching(data) {
  const countElement = document.querySelector(".count_teaching");
  if (data) {
    countElement.textContent = data;
  } else {
    countElement.textContent = "Không có dữ liệu!";
  }
  console.log("Count Teaching Data:", data);
}

async function getLastUpdate() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getLastUpdate?teacherCode=${teacher.username}`
    );
    const result = await res.json();

    if (result.status === "success" && result.data) {
      console.log("Last Update Data:", result.data);
      renderLastUpdate(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được lần cuối cập nhật!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu lần cuối cập nhật!", "error");
  }
}

function renderLastUpdate(data) {
  const lastUpdateElement = document.querySelector(".last_update");
  if (data) {
    lastUpdateElement.textContent = ` ${data}`;
  } else {
    lastUpdateElement.textContent = "Không có dữ liệu cập nhật!";
  }
}

function renderStudentPassingChart(datas) {
  const ctx = document.getElementById("studentPassingChart").getContext("2d");
  const labels = datas.map((item) => `${item.subject}`);
  const totals = datas.map((item) => item.total_students);
  const passed = datas.map((item) => item.passed_students);
  console.log("Labels:", labels);
  console.log("Total Students:", totals);
  console.log("Passed Students:", passed);
  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Tổng học viên",
          data: totals,
          backgroundColor: "#42A5F5",
        },
        {
          label: "Học viên đạt",
          data: passed,
          backgroundColor: "#66BB6A",
        },
      ],
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
        },
      },
    },
  });
}

function renderPieChart(data) {
  const ctx = document.getElementById("pieChart").getContext("2d");

  const passedCount = data.passed_students;
  const notPassedCount = data.total_students - data.passed_students;

  new Chart(ctx, {
    type: "pie",
    data: {
      labels: ["Đạt (≥ 4.0)", "Không đạt (< 4.0)"],
      datasets: [
        {
          data: [passedCount, notPassedCount],
          backgroundColor: ["#4CAF50", "#FF6F61"],
        },
      ],
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          position: "top",
        },
      },
    },
  });
}

function renderAvgScoreChart(datas) {
  const ctx = document.getElementById("avgScoreChart").getContext("2d");

  const labels = datas.map((item) => `${item.class} - ${item.subject}`);
  const scores = datas.map((item) => item.average_score);

  new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Điểm trung bình",
          data: scores,
          borderColor: "#FFA726",
          backgroundColor: "rgba(255, 167, 38, 0.6)",
          borderWidth: 1,
        },
      ],
    },
    options: {
      indexAxis: "y", // ✅ vẽ ngang
      responsive: true,
      plugins: {
        legend: {
          position: "top",
        },
        tooltip: {
          callbacks: {
            label: (ctx) => ` ${ctx.raw.toFixed(2)} điểm`,
          },
        },
      },
      scales: {
        x: {
          beginAtZero: true,
          max: 10,
          title: {
            display: true,
            text: "Thang điểm 10",
          },
        },
        y: {
          ticks: {
            autoSkip: false,
            maxRotation: 0,
            minRotation: 0,
          },
        },
      },
    },
  });
}

```

### frontend\js\Teacher\teacher_home_page.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getModules();
});

async function getModules() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getModuleTeaching?teacherCode=${teacher.username}`
    );

    const result = await res.json();

    if (result.status === "success" && Array.isArray(result.data)) {
      const modules = result.data;
      renderModulesList(modules);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderModulesList(modules) {
  const moduleList = document.querySelector(".module-list");
  moduleList.innerHTML = ""; // Xoá nội dung cũ

  modules.forEach((module) => {
    const div = document.createElement("div");
    div.className = "col-md-3 col-sm-6";
    div.innerHTML = `
	<div class="card shadow-sm ">
        <img
          src="../images/b1.jpg"
          class="card-img-top"
          alt="..."
        />
        <div class="card-body">
          <h5 class="card-title marquee-hover">
            <span>${module["module_code"]} - ${module["module_name"]}</span>
          </h5>
          <p class="card-text marquee-hover">
            <span>${module["teacher_name"]}</span>
          </p>
          <p class="card-text card_class_name marquee-hover">
            <span>Class: ${module["class_name"]}</span>
          </p>
          <button class="btn btn-primary"
			onclick="location.href='page_student_list.html?module=${module["module_code"]}&class=${module["class_code"]}&class_subject=${module["class_subject_id"]}&class_name=${module["class_name"]}&module_name=${module["module_name"]}'">
			Access
		  </button>
        </div>
	</div>
	`;
    moduleList.appendChild(div);
  });
}

```

### frontend\js\Teacher\teacher_import_excel.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentList();
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    moduleCode: urlParams.get("module"),
    classCode: urlParams.get("class"),
    classSubjectId: urlParams.get("class_subject"),
    className: urlParams.get("class_name"),
    moduleName: urlParams.get("module_name"),
  };
}

async function getStudentCode(studentMiddleName, studentName) {
  if (!studentMiddleName || !studentName) {
    Swal.fire("Lỗi", "Không nhận được tên của sinh viên!", "error");
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentCodeByName?studentMiddleName=${studentMiddleName}&studentName=${studentName}`
    );

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const studentCode = result.data;
      //   console.log("Student Code:", studentCode);
      return studentCode;
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

async function parseExcelFile(file) {
  if (!file) {
    console.error("Không có file Excel được chọn");
    Swal.fire("Lỗi", "Không có file Excel được chọn!", "");
    return null;
  }

  try {
    const data = await file.arrayBuffer();
    const workbook = XLSX.read(await file.arrayBuffer(), { type: "array" });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet, { range: 7 });

    if (rows.length === 0) {
      console.warn("File Excel không có dữ liệu.");
      Swal.fire("Lỗi", "File Excel không có dữ liệu!", "error");
      return null;
    }

    const parsed = rows.map((row) => {
      const student_code = row["MÃ HS"] || row["MÃ\nHS"] || "";
      const hoDem = row["HỌ ĐỆM"] || row["Họ và tên đệm"] || "";
      const ten = row["TÊN"] || "";
      const score = row["Tổng điểm"] ?? row["Tổng\nđiểm"] ?? null;

      return { student_code, hoDem, ten, score };
    });

    if (parsed.length === 0) {
      console.warn("Không có dữ liệu hợp lệ trong file Excel.");
      Swal.fire("Lỗi", "Không có dữ liệu hợp lệ trong file Excel!", "error");
      return null;
    }

    return parsed;
  } catch (err) {
    console.error("❌ Lỗi khi đọc file Excel:", err);
    return null;
  }
}

async function parseNametoStudentCode(names) {
  names = names.slice(1); // Bỏ qua dòng tiêu đề
  if (!Array.isArray(names) || names.length === 0) {
    console.error("Danh sách tên không hợp lệ");
    Swal.fire("Lỗi", "Danh sách tên không hợp lệ!", "error");
    return [];
  }

  console.log("📄 Danh sách tên:", names);
  const studentCodes = [];

  for (const name of names) {
    if (name["hoDem"] && name["ten"]) {
      try {
        const studentCode = await getStudentCode(name["hoDem"], name["ten"]);
        if (!studentCode) {
          console.warn("⚠️ Không tìm thấy mã sinh viên cho:", name);
          Swal.fire(
            "Thông báo",
            `Không tìm thấy mã sinh viên cho: ${name.hoDem} ${name.ten}`,
            "warning"
          );
          continue;
        }
        studentCodes.push({
          student_code: studentCode,
          score: name.score ?? null,
        });
      } catch (err) {
        console.error("❌ Lỗi khi lấy mã sinh viên:", err);
        Swal.fire("Lỗi", "Không thể lấy mã sinh viên!", "error");
      }
    } else {
      console.warn("⚠️ Tên không hợp lệ:", name);
    }
  }

  return studentCodes;
}

async function importStudentScores(payload) {
  if (!payload || !payload.classSubjectId || !Array.isArray(payload.students)) {
    Swal.fire("Lỗi", "Dữ liệu không hợp lệ!", "error");
    console.error("Dữ liệu không hợp lệ:", payload);
    return;
  }

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(`${API_BASE}/api/v1/teacher/importStudentScores`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await res.json();
    if (result.data.updatedCount === 0) {
      Swal.fire(
        "Thông báo",
        "Không có học sinh nào được cập nhật điểm!",
        "info"
      );
      return;
    }

    if (result.status === "success") {
      Swal.fire(
        "Thành công",
        `Nhập điểm thành công thành công cho ${result.data.updatedCount}! học sinh`,
        "success"
      ).then(() => {
        getStudentList();
      });
    } else {
      Swal.fire("Thông báo", "Không thể nhập điểm!", "warning");
      console.error("Lỗi khi nhập điểm:", result.message);
    }
  } catch (error) {
    console.error("❌ Lỗi khi gửi yêu cầu nhập điểm:", error);
    Swal.fire("Lỗi", "Lỗi khi gửi yêu cầu nhập điểm!", "error");
  }
}

document
  .getElementById("excelFile")
  .addEventListener("change", async function () {
    const file = this.files[0];
    const result = await parseExcelFile(file);
    const studentCodes = await parseNametoStudentCode(result);
    console.log("📄 Danh sách mã sinh viên:", studentCodes);
    const { classSubjectId } = getParams(); // lấy từ URL
    if (!classSubjectId) {
      Swal.fire("Lỗi", "Không xác định được mã lớp học!", "error");
      return;
    }

    const payload = {
      classSubjectId: classSubjectId,
      students: studentCodes,
    };
    await importStudentScores(payload);
  });

```

### frontend\js\Teacher\teacher_information.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getTeacherInformation();
});

async function getTeacherInformation() {
  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }
  console.log("Teacher Information:", teacher.username);
  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getTeacherInfo?teacherCode=${teacher.username}`
    );

    const result = await res.json();

    if (result.status === "success" && result.data) {
      const teacherInfo = result.data;
      console.log("Teacher Information Data:", teacherInfo);
      renderDropdownMenu(teacherInfo);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu!", "error");
  }
}

function renderDropdownMenu(teacherInfo) {
  const name = teacherInfo.teacher_name || "Giảng viên";
  document.querySelectorAll(".teacher_name").forEach((el) => {
    el.textContent = name;
  });
}

```

### frontend\js\Teacher\teacher_student_list.js
```js
document.addEventListener("DOMContentLoaded", function () {
  getStudentList();
});

function getParams() {
  const urlParams = new URLSearchParams(window.location.search);
  return {
    moduleCode: urlParams.get("module"),
    classCode: urlParams.get("class"),
    classSubjectId: urlParams.get("class_subject"),
    className: urlParams.get("class_name"),
    moduleName: urlParams.get("module_name"),
  };
}

function getStudentList() {
  const { moduleCode, classCode, classSubjectId, className, moduleName } =
    getParams();
  if (!moduleCode || !classCode) {
    Swal.fire("Lỗi", "Không xác định được thông tin lớp học!", "error");
    return;
  }

  const teacher = Storage.getUser();
  if (!teacher || !teacher.username) {
    Swal.fire("Lỗi", "Không xác định được giảng viên!", "error");
    return;
  }

  console.log("Module Code:", moduleCode);
  console.log("Class Code:", classCode);
  console.log("Class Subject ID:", classSubjectId);
  console.log("Teacher Username:", teacher.username);
  console.log("Class Name:", className);
  console.log("Module Name:", moduleName);

  fetchStudentList(
    teacher.username,
    moduleCode,
    classCode,
    className,
    moduleName
  );
}

async function fetchStudentList(
  teacherCode,
  moduleCode,
  classCode,
  className,
  moduleName
) {
  const class_name = document.querySelector(".class_name");
  const module_name = document.querySelector(".module_name");

  if (!className || !moduleName) {
    Swal.fire("Lỗi", "Không xác định được tên lớp học hoặc môn học!", "error");
    return;
  }

  class_name.textContent = className;
  module_name.textContent = moduleName;

  const API_BASE = "http://localhost:3000";
  try {
    const res = await fetch(
      `${API_BASE}/api/v1/teacher/getStudentInClass?teacherCode=${teacherCode}&moduleCode=${moduleCode}&classCode=${classCode}`
    );

    const result = await res.json();
    console.log("API Response:", result);

    if (result.status === "success" && Array.isArray(result.data)) {
      renderStudentList(result.data);
    } else {
      Swal.fire("Thông báo", "Không lấy được dữ liệu sinh viên!", "warning");
    }
  } catch (error) {
    console.error(error);
    Swal.fire("Lỗi", "Lỗi khi lấy dữ liệu sinh viên!", "error");
  }
}

function renderStudentList(students) {
  const tbody = document.getElementById("studentTable");
  tbody.innerHTML = "";

  students.forEach((student, index) => {
    var score = 0;
    if (student["score"] === null || student["score"] === undefined) {
      score = "-";
    } else {
      score = student["score"];
    }
    const row = document.createElement("tr");
    row.innerHTML = `
	  		<td>${index + 1}</td>
            <td>${student["student_code"]}</td>
            <td>${student["student_middle_name"]}</td>
            <td>${student["student_name"]}</td>
            <td>${student["class_name"]}-1</td>
            <td>${score}</td>
            <td>
              <button
                class="btn btn-sm btn-primary"
                data-bs-toggle="modal"
                data-bs-target="#editModal"
				data-student-code="${student["student_code"]}"
                data-name="${student["student_middle_name"]} ${
      student["student_name"]
    }"
                data-class="${student["class_name"]}"
                data-score="${score}"
              >
                <i class="bi bi-pencil-square"></i> Sửa
              </button>
            </td>
	`;
    tbody.appendChild(row);
  });
}

async function updateStudentScore(studentCode, score) {
  const { classSubjectId } = getParams();

  const API_BASE = "http://localhost:3000";
  console.log("Updating score for:", {
    classSubjectId,
    studentCode,
    score,
  });
  if (!classSubjectId || !studentCode || score === "") {
    Swal.fire("Lỗi", "Thiếu dữ liệu để cập nhật điểm!", "error");
    return;
  }

  try {
    const res = await fetch(`${API_BASE}/api/v1/teacher/updateStudentScore`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        classSubjectId,
        studentCode,
        score: parseFloat(score),
      }),
    });

    const data = await res.json();

    if (data.status === "success") {
      Swal.fire("Thành công", "Điểm đã được cập nhật!", "success");
      getStudentList();
    } else {
      Swal.fire("Lỗi", data.message || "Không thể cập nhật điểm!", "error");
    }
  } catch (error) {
    console.error("Error:", error);
    Swal.fire("Lỗi", "Có lỗi xảy ra khi cập nhật điểm!", "error");
  }
}

let currentStudentCode = "";

const editModal = document.getElementById("editModal");
editModal.addEventListener("show.bs.modal", function (event) {
  const button = event.relatedTarget;
  const name = button.getAttribute("data-name");
  const className = button.getAttribute("data-class");
  const score = button.getAttribute("data-score");
  const studentCode = button.getAttribute("data-student-code");
  currentStudentCode = studentCode;
  console.log("Current Student Code:", currentStudentCode);
  document.getElementById("studentName").value = name;
  document.getElementById("studentClass").value = className;
  document.getElementById("studentScore").value = score;
});

document
  .getElementById("editScoreForm")
  .addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn reload trang
    const score = document.getElementById("studentScore").value;
    updateStudentScore(currentStudentCode, score);
  });

```
