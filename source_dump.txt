# ==================================================
# Path: D:\VSCode\bach-nghe-student-management-website
# Detected tech: docker, javascript, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
bach-nghe-student-management-website/
├── .git/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── controllers/
│   │   │   ├── admin.controller.js
│   │   │   ├── auth.controller.js
│   │   │   ├── errors.controller.js
│   │   │   ├── student.controller.js
│   │   │   └── teacher.controller.js
│   │   ├── database/
│   │   ├── middlewares/
│   │   │   └── auth.middleware.js
│   │   ├── models/
│   │   │   ├── admin.model.js
│   │   │   ├── auth.model.js
│   │   │   ├── student.model.js
│   │   │   └── teacher.model.js
│   │   ├── routes/
│   │   │   ├── admin.router.js
│   │   │   ├── auth.router.js
│   │   │   ├── student.router.js
│   │   │   └── teacher.router.js
│   │   ├── api-error.js
│   │   ├── app.js
│   │   └── jsend.js
│   ├── .env
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
├── database/
├── frontend/
│   ├── admin/
│   │   ├── page_admin.html
│   │   ├── page_admin_statistics.html
│   │   ├── page_class_management.html
│   │   ├── page_create_account.html
│   │   ├── page_student_management.html
│   │   └── page_teacher_management.html
│   ├── css/
│   │   ├── admin.css
│   │   ├── info_student.css
│   │   ├── login.css
│   │   ├── page_student_list_teacher.css
│   │   ├── student.css
│   │   └── teacher.css
│   ├── images/
│   │   ├── bg_login.jpg
│   │   └── logo_Truong_Bach_Nghe.png
│   ├── js/
│   │   ├── Administrator/
│   │   │   ├── class_management.js
│   │   │   ├── student_management.js
│   │   │   └── teacher_management.js
│   │   ├── Authentication/
│   │   │   ├── login.js
│   │   │   ├── logout.js
│   │   │   └── storage.js
│   │   ├── Student/
│   │   ├── Teacher/
│   │   │   └── teacher.js
│   │   ├── test_chart.js
│   │   └── toast.js
│   ├── login/
│   │   └── login.html
│   ├── student/
│   │   ├── page_info_student.html
│   │   └── page_student.html
│   └── teacher/
│       ├── page_score_statistics.html
│       ├── page_student_list.html
│       └── page_teacher_home.html
├── .gitignore
├── README.md
└── source_dump.txt
```

## FILE CONTENTS

### backend\server.js
```js
require("dotenv").config();
const app = require("./src/app");

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}.`);
});

```

### backend\src\api-error.js
```js
class ApiError extends Error {
    constructor(statusCode, message, headers = {}) {
        super();
        this.statusCode = statusCode;
        this.message = message;
        this.headers = headers;
    }
}

module.exports = ApiError;
```

### backend\src\app.js
```js
const express = require("express");
const cors = require("cors");
const JSend = require("./jsend");
const knex = require("./database/knex");
const session = require("express-session");

const authRouter = require("./routes/auth.router");
const studentRouter = require("./routes/student.router");
const teacherRouter = require("./routes/teacher.router");
const adminRouter = require("./routes/admin.router");

const {
  resourceNotFound,
  handleError,
} = require("./controllers/errors.controller");
const app = express();

app.use(
  cors({
    origin: [
      "http://localhost:5501",
      "http://localhost",
      "http://127.0.0.1:5501",
    ],
    credentials: true, // Cho phép gửi cookie qua CORS
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false },
  })
);

app.get("/api/check-connection", async (req, res) => {
  try {
    await knex.raw("SELECT 1");
    res.json({ message: "Connect Successfully!" });
  } catch (error) {
    res.status(500).json({
      error: "Cannot Connect Successfully!",
      details: error.message,
    });
  }
});

app.get("/", (req, res) => {
  return res.json(JSend.success());
});

app.use("/public", express.static("public"));

authRouter.setup(app);
studentRouter.setup(app);
teacherRouter.setup(app);
adminRouter.setup(app);

//handle 404 response
app.use(resourceNotFound);

app.use(handleError);

module.exports = app;

```

### backend\src\jsend.js
```js
/**
 * @param {object | null} data
 * @returns {{status: 'success', data: object | null}}
 */
function success(data = "Welcome to Bach Nghe Student Management Website!") {
  return {
    status: "success",
    data: data,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'fail', message: string, data: object | undefined}}
 */
function fail(message, data = null) {
  if (data) {
    return {
      status: "fail",
      message,
      data,
    };
  }
  return {
    status: "fail",
    message,
  };
}

/**
 * @param {string} message
 * @param {object | null} [data]
 * @returns {{status: 'error', message: string, data: object | undefined}}
 */
function error(message, data = null) {
  if (data) {
    return {
      status: "error",
      message,
      data,
    };
  }
  return {
    status: "error",
    message,
  };
}

module.exports = {
  success,
  fail,
  error,
};

```

### backend\src\controllers\admin.controller.js
```js
const adminService = require("../models/admin.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const { as } = require("../database/knex");

async function createStudentAccount(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const student = await adminService.createStudentAccount({
      username,
      password,
    });

    if (!student) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(student));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function createTeacherAccount(req, res, next) {
  const { username, password, role } = req.body;

  if (!username || !password) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    // Kiểm tra tài khoản đã tồn tại
    const existing = await adminService.checkUserAccount(username);
    if (existing) {
      return res.status(400).json(JSend.fail("Account already exists"));
    }

    const teacher = await adminService.createTeacherAccount({
      username,
      password,
    });

    if (!teacher) {
      return next(new ApiError(401, "Create account failed"));
    }

    return res.status(201).json(JSend.success(teacher));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getStudentAccount(req, res, next) {
  try {
    const students = await adminService.getStudentAccount();
    if (!students) {
      return next(new ApiError(404, "No student accounts found"));
    }
    return res.status(200).json(JSend.success(students));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function getTeacherAccount(req, res, next) {
  try {
    const students = await adminService.getTeacherAccount();
    if (!students) {
      return next(new ApiError(404, "No student accounts found"));
    }
    return res.status(200).json(JSend.success(students));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function createClassWithTeacher(req, res, next) {
  const { classID, moduleID, semesterID, teacherCode } = req.body;

  if (!classID || !moduleID || !semesterID || !teacherCode) {
    return res.status(400).json(JSend.fail("All fields are required"));
  }

  try {
    const newClass = await adminService.createClassWithTeacher({
      classID,
      moduleID,
      semesterID,
      teacherCode,
    });

    if (!newClass) {
      return next(new ApiError(401, "Create class failed"));
    }

    return res.status(201).json(JSend.success(newClass));
  } catch (err) {
    console.error(err);
    return res.status(500).json(JSend.error("Internal server error", err));
  }
}

async function addStudentsToClass(req, res, next) {
  const { class_subject_id, student_codes } = req.body;

  if (
    typeof class_subject_id === "undefined" ||
    class_subject_id === null ||
    !Array.isArray(student_codes) ||
    student_codes.length === 0
  ) {
    return res.status(400).json(JSend.fail("Missing or invalid data"));
  }

  try {
    const result = await adminService.addStudentsToClass({
      class_subject_id,
      student_codes,
    });

    return res.status(201).json(JSend.success({ added: result }));
  } catch (err) {
    console.error(err);
    return next(new ApiError(500, "Internal server error"));
  }
}
module.exports = {
  createStudentAccount,
  createTeacherAccount,
  getStudentAccount,
  getTeacherAccount,
  createClassWithTeacher,
  addStudentsToClass,
};

```

### backend\src\controllers\auth.controller.js
```js
const authService = require("../models/auth.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const jwt = require("jsonwebtoken");

async function login(req, res, next) {
  const { username, password } = req.body;

  if (!username || !password) {
    return next(new ApiError(400, "Username and password are required"));
  }

  try {
    const user = await authService.login(username, password);

    if (!user) {
      return next(new ApiError(401, "Invalid username or password"));
    }

    // Tạo JWT token (bạn có thể điều chỉnh secret và thời gian hết hạn)
    const token = jwt.sign(
      {
        id: user.user_id,
        username: user.user_username,
        role: user.user_role,
        status: user.user_status,
      },
      process.env.JWT_SECRET,
      {
        expiresIn: "48h",
      }
    );

    res.json(
      JSend.success({
        message: "Login successful",
        token,
        user: {
          id: user.user_id,
          username: user.user_username,
          role: user.user_role,
          status: user.user_status,
        },
      })
    );
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid username or password"));
  }
}

async function logout(req, res) {
  req.session.destroy();
  return res.status(200).json(JSend.success({ message: "Logout successful" }));
}

module.exports = {
  login,
  logout,
};

```

### backend\src\controllers\errors.controller.js
```js
const ApiError = require('../api-error');
const JSend = require('../jsend');

function methodNotAllowed(req, res, next) {
    if (req.route) {
        // Determine which HTTP methods are supported
        const httpMethods = Object.keys(req.route.methods)
            .filter((method) => method !== '_all')
            .map((method) => method.toUpperCase());
        return next(
            new ApiError(405, 'Method Not Allowed', {
                Allow: httpMethods.join(', '),
            })
        );
    }
    return next();
}

function resourceNotFound(req, res, next) {
    // Handler for unknown URL path.
    // Call next() to pass to the error handling function.
    return next(new ApiError(404, 'Resource not found'));
}

function handleError(error, req, res, next) {
    // The centralized error handling function.
    // In any route handler, calling next(error)
    // will pass to this error handling function.
    if (res.headersSent) {
        return next(error);
    }
    const statusCode = error.statusCode || 500;
    const message = error.message || 'Internal Server Error';
    return res
        .status(statusCode)
        .set(error.headers || {})
        .json(
            statusCode >= 500 ? JSend.error(message) : JSend.fail(message)
        );
}

module.exports = {
    methodNotAllowed,
    resourceNotFound,
    handleError,
};
```

### backend\src\controllers\student.controller.js
```js
const studentService = require("../models/student.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");

async function getScore(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const score = await studentService.getAllSubjectScore(studentCode);

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getScoreBySemester(req, res, next) {
  const { studentCode, semester } = req.query;

  if (!studentCode || !semester) {
    return next(new ApiError(400, "Student code and Semester is required"));
  }

  try {
    const score = await studentService.filterSubjectScoreBySemester(
      studentCode,
      semester
    );

    if (!score) {
      return next(new ApiError(401, "Data not found"));
    }

    if (score.length === 0) {
      return next(
        new ApiError(
          404,
          "The student don't have scores found in this semester"
        )
      );
    }

    return res.json(JSend.success(score));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function getStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;

  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  try {
    const studentInfo = await studentService.getStudentInfo(studentCode);

    if (!studentInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(studentInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid student code or data not found"));
  }
}

async function updateStudentInfo(req, res, next) {
  const studentCode = req.query.studentCode;
  if (!studentCode) {
    return next(new ApiError(400, "Student code is required"));
  }

  const {
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
  } = req.body;

  if (
    !student_address ||
    !student_email ||
    !student_phone ||
    !student_IDCard ||
    !student_country
  ) {
    return next(new ApiError(400, "All fields are required"));
  }

  const updateData = {
    student_address,
    student_email,
    student_phone,
    student_IDCard,
    student_country,
  };

  try {
    const updatedStudent = await studentService.updateStudentInfo(
      studentCode,
      updateData
    );
    if (!updatedStudent) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

module.exports = {
  getScore,
  getScoreBySemester,
  getStudentInfo,
  updateStudentInfo,
};

```

### backend\src\controllers\teacher.controller.js
```js
const teacherService = require("../models/teacher.model");
const JSend = require("../jsend");
const ApiError = require("../api-error");
const moment = require("moment");

async function getTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const teacherInfo = await teacherService.getTeacherInfo(teacherCode);

    if (!teacherInfo) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(teacherInfo));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function updateTeacherInfo(req, res, next) {
  const teacherCode = req.query.teacherCode;
  if (!teacherCode) {
    return next(new ApiError(400, "Teacher code is required"));
  }

  const {
    teacher_date_of_birth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  } = req.body;

  if (
    !teacher_date_of_birth ||
    !teacher_gender ||
    !teacher_address ||
    !teacher_email ||
    !teacher_phone
  ) {
    return next(new ApiError(400, "All fields are required"));
  }
  let dateOfBirth = null;
  if (teacher_date_of_birth) {
    dateOfBirth = moment(teacher_date_of_birth, "DD-MM-YYYY").format(
      "YYYY-MM-DD"
    );
    // console.log(dateOfBirth);
  }

  const updateData = {
    teacher_date_of_birth: dateOfBirth,
    teacher_gender,
    teacher_address,
    teacher_email,
    teacher_phone,
  };

  try {
    const updatedTeacher = await teacherService.updateTeacherInfo(
      teacherCode,
      updateData
    );
    if (!updatedTeacher) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(updateData));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Infomation not valid or data not found"));
  }
}

async function getModuleTeaching(req, res, next) {
  const teacherCode = req.query.teacherCode;

  if (!teacherCode) {
    return next(new ApiError(400, "teacher code is required"));
  }

  try {
    const moduleTeaching = await teacherService.getModuleTeaching(teacherCode);

    if (!moduleTeaching) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(moduleTeaching));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid teacher code or data not found"));
  }
}

async function getStudentInClass(req, res, next) {
  const { teacherCode, moduleCode, classCode } = req.query;

  if (!teacherCode || !moduleCode || !classCode) {
    return next(new ApiError(400, "All parameters are required"));
  }

  try {
    const students = await teacherService.getStudentInClass({
      teacherCode,
      moduleCode,
      classCode,
    });

    if (!students) {
      return next(new ApiError(401, "Data not found"));
    }

    return res.json(JSend.success(students));
  } catch (error) {
    console.log(error);
    return next(new ApiError(401, "Invalid parameters or data not found"));
  }
}

module.exports = {
  getTeacherInfo,
  updateTeacherInfo,
  getModuleTeaching,
  getStudentInClass,
};

```

### backend\src\middlewares\auth.middleware.js
```js

```

### backend\src\models\admin.model.js
```js
const knex = require("../database/knex");
const admin = {
  createStudentAccount: async ({ username, password }) => {
    const student = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
    });

    if (student.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedStudent = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedStudent;
    }

    return null;
  },

  createTeacherAccount: async ({ username, password }) => {
    const teacher = await knex("system_user").insert({
      user_username: username,
      user_pass: password,
      user_role: 2, // Assuming a role field exists
    });

    if (teacher.length > 0) {
      // Knex insert returns an array of IDs for MySQL; fetch the inserted record
      const insertedTeacher = await knex("system_user")
        .where({ user_username: username })
        .first();
      return insertedTeacher;
    }

    return null;
  },

  checkUserAccount: async (username) => {
    const user = await knex("system_user")
      .where({ user_username: username })
      .first();

    if (user) {
      return user;
    }

    return null;
  },

  getStudentAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 1, // Assuming 1 is the role for students
    });

    if (users.length === 0) {
      return null;
    }

    return users;
  },

  getStudentAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 1, // Assuming 1 is the role for students
    });

    if (users.length === 0) {
      return null;
    }

    return users;
  },

  getTeacherAccount: async () => {
    const users = await knex("system_user").select("*").where({
      user_role: 2, // Assuming 2 is the role for teachers
    });

    if (users.length === 0) {
      return null;
    }

    return users;
  },

  createClassWithTeacher: async ({
    classID,
    moduleID,
    semesterID,
    teacherCode,
  }) => {
    const trx = await knex.transaction();
    try {
      const [clsId] = await trx("class_subject").insert({
        class_id: classID,
        module_id: moduleID,
        semester_id: semesterID,
      });

      if (!clsId) {
        throw new Error("Failed to insert class_subject");
      }

      await trx("teacher_subject_class").insert({
        teacher_code: teacherCode,
        class_subject_id: clsId,
      });

      await trx.commit();
      const newClass = await knex("class_subject")
        .where("class_subject.class_subject_id", clsId)
        .join("class", "class_subject.class_id", "class.class_id")
        .join("module", "class_subject.module_id", "module.module_id")
        .join("semester", "class_subject.semester_id", "semester.semester_id")
        .join(
          "teacher_subject_class",
          "class_subject.class_subject_id",
          "teacher_subject_class.class_subject_id"
        )
        .join(
          "teacher",
          "teacher_subject_class.teacher_code",
          "teacher.teacher_code"
        )
        .select(
          "class_subject.class_subject_id",
          "module.module_name",
          "class.class_name",
          "semester.semester_number",
          "teacher.teacher_name"
        )
        .first();

      return newClass;
    } catch (error) {
      await trx.rollback();
      console.error("Error creating class_subject:", error.message);
      throw error;
    }
  },

  addStudentsToClass: async ({ class_subject_id, student_codes }) => {
    const trx = await knex.transaction();
    try {
      // Check if class_subject_id exists
      const classSubject = await trx("class_subject")
        .where({ class_subject_id })
        .first();

      if (!classSubject) {
        throw new Error("Class subject not found");
      }

      const students = [];
      // Insert each student code into the class_subject_student table
      for (const studentCode of student_codes) {
        try {
          await trx("class_student").insert({
            class_subject_id,
            student_code: studentCode,
          });
          students.push(studentCode);
        } catch (err) {
          // Bỏ qua duplicate entry (đã tồn tại)
          console.error("Error adding students to class_subject:", err.message);
          throw err;
        }
      }

      await trx.commit();
      return students;
    } catch (error) {
      await trx.rollback();
      console.error("Error adding students to class subject:", error.message);
      throw error;
    }
  },
};

module.exports = admin;

```

### backend\src\models\auth.model.js
```js
const knex = require("../database/knex");

const auth = {
  login: async (username, password) => {
    const user = await knex("system_user")
      .where("user_username", username)
      .andWhere("user_pass", password)
      .select("user_username", "user_role", "user_status", "user_id")
      .limit(1);

    if (user.length > 0) {
      return user[0];
    }
    return null;
  },

  checkAccount: async (username) => {
    const user = await knex("system_user")
      .where("user_name", username)
      .select("user_name")
      .first();
    return user || null;
  },

  register: async (RegisterData) => {
    return knex("userInfo").insert({
      user_name: RegisterData.username,
      user_passwd: RegisterData.password,
      user_phoneNum: RegisterData.userPhone,
    });
  },
};

module.exports = auth;

```

### backend\src\models\student.model.js
```js
const knex = require("../database/knex");

const student = {
  getAllSubjectScore: async (studentCode) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .leftJoin("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  filterSubjectScoreBySemester: async (studentCode, semester) => {
    const result = await knex("student as s")
      .join("class_student as cs", "s.student_code", "cs.student_code")
      .join(
        "class_subject as csub",
        "cs.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .leftJoin("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("s.student_code", studentCode)
      .andWhere("se.semester_number", semester)
      .distinct(
        "s.student_code as MÃ HS",
        "s.student_middle_name as HỌ ĐỆM",
        "s.student_name as TÊN",
        "m.module_code as Mã Môn học",
        "m.module_name as Tên Môn học",
        "se.semester_number as Học kỳ",
        "se.semester_start_date as Ngày bắt đầu",
        "se.semester_end_date as Ngày kết thúc",
        "sc.score as Tổng điểm"
      )
      .orderBy("m.module_code");

    return result;
  },

  getStudentInfo: async (studentCode) => {
    const result = await knex("student").where("student_code", studentCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateStudentInfo: async (studentCode, updateData) => {
    const result = await knex("student")
      .where("student_code", studentCode)
      .update({
        student_address: updateData.student_address,
        student_email: updateData.student_email,
        student_phone: updateData.student_phone,
        student_IDCard: updateData.student_IDCard,
        student_country: updateData.student_country,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },
};

module.exports = student;

```

### backend\src\models\teacher.model.js
```js
const knex = require("../database/knex");

const teacher = {
  getTeacherInfo: async (teacherCode) => {
    const result = await knex("teacher").where("teacher_code", teacherCode);

    if (result.length === 0) {
      return null;
    }

    return result[0];
  },

  updateTeacherInfo: async (teacherCode, updateData) => {
    const result = await knex("teacher")
      .where("teacher_code", teacherCode)
      .update({
        teacher_date_of_birth: updateData.teacher_date_of_birth,
        teacher_gender: updateData.teacher_gender,
        teacher_address: updateData.teacher_address,
        teacher_email: updateData.teacher_email,
        teacher_phone: updateData.teacher_phone,
      });

    if (result === 0) {
      return null;
    }
    return result;
  },

  getModuleTeaching: async (teacherCode) => {
    const result = await knex("teacher_subject_class as tsc")
      .join("teacher as t", "tsc.teacher_code", "t.teacher_code")
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .where("t.teacher_code", teacherCode)
      .distinct(
        "t.teacher_code",
        "t.teacher_name",
        "c.class_code",
        "c.class_name",
        "m.module_code",
        "m.module_name",
        "se.semester_number",
        "se.semester_start_date",
        "se.semester_end_date"
      )
      .orderBy("se.semester_number", "desc");

    if (result.length === 0) {
      return null;
    }

    return result;
  },

  getStudentInClass: async ({ teacherCode, moduleCode, classCode }) => {
    const result = await knex("teacher as t")
      .join(
        "teacher_subject_class as tsc",
        "t.teacher_code",
        "tsc.teacher_code"
      )
      .join(
        "class_subject as csub",
        "tsc.class_subject_id",
        "csub.class_subject_id"
      )
      .join("class as c", "csub.class_id", "c.class_id")
      .join("module as m", "csub.module_id", "m.module_id")
      .join("semester as se", "csub.semester_id", "se.semester_id")
      .join(
        "class_student as cs",
        "csub.class_subject_id",
        "cs.class_subject_id"
      )
      .join("student as s", "cs.student_code", "s.student_code")
      .leftJoin("score as sc", function () {
        this.on("cs.class_subject_id", "=", "sc.class_subject_id").andOn(
          "s.student_code",
          "=",
          "sc.student_code"
        );
      })
      .where("t.teacher_code", teacherCode)
      .andWhere("m.module_code", moduleCode)
      .andWhere("c.class_code", classCode)
      .distinct(
        "t.teacher_name",
        "c.class_name",
        "m.module_name",
        "s.student_code",
        "s.student_middle_name",
        "s.student_name",
        "sc.score"
      )
      .orderBy([{ column: "s.student_code" }]);

    return result;
  },
};

module.exports = teacher;

```

### backend\src\routes\admin.router.js
```js
const express = require("express");
const adminController = require("../controllers/admin.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");

const router = express.Router();

router.post("/createStudentAccount", adminController.createStudentAccount);
router.all("/createStudentAccount", methodNotAllowed);
router.post("/createTeacherAccount", adminController.createTeacherAccount);
router.all("/createTeacherAccount", methodNotAllowed);
router.get("/getStudentAccount", adminController.getStudentAccount);
router.all("/getStudentAccount", methodNotAllowed);
router.get("/getTeacherAccount", adminController.getTeacherAccount);
router.all("/getTeacherAccount", methodNotAllowed);
router.post("/createClass", adminController.createClassWithTeacher);
router.all("/createClass", methodNotAllowed);
router.post("/addStudentsToClass", adminController.addStudentsToClass);
router.all("/addStudentsToClass", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/admin", router);
};

```

### backend\src\routes\auth.router.js
```js
const express = require("express");
const authController = require("../controllers/auth.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.post("/login", authController.login);
router.post("/logout", authController.logout);
router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/auth", router);
};

```

### backend\src\routes\student.router.js
```js
const express = require("express");
const studentController = require("../controllers/student.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getScore", studentController.getScore);
router.all("/getScore", methodNotAllowed);
router.get("/getScoreBySemester", studentController.getScoreBySemester);
router.all("/getScoreBySemester", methodNotAllowed);
router.get("/getStudentInfo", studentController.getStudentInfo);
router.all("/getStudentInfo", methodNotAllowed);
router.put("/updateStudentInfo", studentController.updateStudentInfo);
router.all("/updateStudentInfo", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/student", router);
};

```

### backend\src\routes\teacher.router.js
```js
const express = require("express");
const teacherController = require("../controllers/teacher.controller");
const { methodNotAllowed } = require("../controllers/errors.controller");
// const authorization = require("../middlewares/authorization");

const router = express.Router();

router.get("/getTeacherInfo", teacherController.getTeacherInfo);
router.all("/getTeacherInfo", methodNotAllowed);
router.put("/updateTeacherInfo", teacherController.updateTeacherInfo);
router.all("/updateTeacherInfo", methodNotAllowed);
router.get("/getModuleTeaching", teacherController.getModuleTeaching);
router.all("/getModuleTeaching", methodNotAllowed);
router.get("/getStudentInClass", teacherController.getStudentInClass);
router.all("/getStudentInClass", methodNotAllowed);

router.all("/", methodNotAllowed);

module.exports.setup = (app) => {
  app.use("/api/v1/teacher", router);
};

```

### frontend\js\test_chart.js
```js
document.addEventListener("DOMContentLoaded", function () {
  const ctx = document.getElementById("classChart").getContext("2d");
  const chart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: ["Lớp A", "Lớp B", "Lớp C", "Lớp D", "Lớp E"],
      datasets: [{
        label: "Số sinh viên",
        data: [30, 45, 25, 50, 40],
        backgroundColor: "#3B82F6",
        borderRadius: 5
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
});

```

### frontend\js\toast.js
```js
function showToast(message, type = "info") {
  const bgColors = {
    success: "linear-gradient(to right, #00b09b, #96c93d)",
    error: "linear-gradient(to right, #e52d27, #b31217)",
    info: "linear-gradient(to right, #2193b0, #6dd5ed)",
    warn: "linear-gradient(to right, #f7971e, #ffd200)",
  };

  const icons = {
    success: "✅",
    error: "❌",
    info: "ℹ️",
    warn: "⚠️",
  };

  const icon = icons[type] || "";
  const textWithIcon = `<span style="display:flex;align-items:center;gap:6px;">${icon} ${message}</span>`;

  Toastify({
    text: textWithIcon,
    duration: 3000,
    close: false,
    gravity: "top",
    position: "right",
    backgroundColor: bgColors[type] || bgColors.info,
    stopOnFocus: true,
    escapeMarkup: false, // <--- Cho phép hiển thị HTML
  }).showToast();
}

window.showToast = showToast;

```

### frontend\js\Administrator\class_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".btn-edit").forEach(btn => {
    btn.addEventListener("click", handleEdit);
  });

  document.querySelectorAll(".btn-delete").forEach(btn => {
    btn.addEventListener("click", handleDelete);
  });

  document.getElementById("btnAddClass").addEventListener("click", function () {
    const maLop = document.getElementById("newMaLop").value.trim();
    const tenLop = document.getElementById("newTenLop").value.trim();
    const khoaHoc = document.getElementById("newKhoaHoc").value.trim();
    const cvht = document.getElementById("newCVHT").value.trim();

    if (!maLop || !tenLop || !khoaHoc || !cvht) {
      alert("Vui lòng điền đầy đủ thông tin lớp học.");
      return;
    }

    const table = document.querySelector("table tbody");
    const newRow = document.createElement("tr");
    const currentRows = table.querySelectorAll("tr").length;

    newRow.innerHTML = `
      <td>${currentRows + 1}</td>
      <td>${maLop}</td>
      <td>${tenLop}</td>
      <td>${khoaHoc}</td>
      <td>${cvht}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1 btn-edit"><i class="bi bi-pencil-square"></i> Sửa</button>
        <button class="btn btn-sm btn-danger btn-delete"><i class="bi bi-trash"></i> Xóa</button>
      </td>
    `;

    table.appendChild(newRow);
    document.getElementById("createClassForm").reset();
    bootstrap.Modal.getInstance(document.getElementById("createClassModal")).hide();

    newRow.querySelector(".btn-edit").addEventListener("click", handleEdit);
    newRow.querySelector(".btn-delete").addEventListener("click", handleDelete);
  });

  function handleEdit() {
    const row = this.closest("tr");
    const cells = row.querySelectorAll("td");

    document.getElementById("maLop").value = cells[1].textContent.trim();
    document.getElementById("tenLop").value = cells[2].textContent.trim();
    document.getElementById("khoaHoc").value = cells[3].textContent.trim();
    document.getElementById("cvht").value = cells[4].textContent.trim();

    bootstrap.Modal.getOrCreateInstance(document.getElementById("editClassModal")).show();
  }

  function handleDelete() {
    if (confirm("Bạn có chắc chắn muốn xóa lớp học này?")) {
      this.closest("tr").remove();
    }
  }
});

```

### frontend\js\Administrator\student_management.js
```js
let selectedRow = null;
const editModal = new bootstrap.Modal(document.getElementById('editModal'));

document.addEventListener('DOMContentLoaded', () => {
  // Xử lý nút Sửa
  document.querySelectorAll('.btn-edit').forEach(button => {
    button.addEventListener('click', function () {
      selectedRow = this.closest('tr');

      // Gán dữ liệu từ bảng vào form modal
      document.getElementById('editHoDem').value = selectedRow.children[1].textContent;
      document.getElementById('editTen').value = selectedRow.children[2].textContent;
      document.getElementById('editGioiTinh').value = selectedRow.children[3].textContent;
      document.getElementById('editDVHT').value = selectedRow.children[4].textContent;
      document.getElementById('editCVHT').value = selectedRow.children[5].textContent;
      document.getElementById('editDiaChi').value = selectedRow.children[6].textContent;
      document.getElementById('editSDT').value = selectedRow.children[7].textContent;

      editModal.show();
    });
  });

  // Xử lý nút Lưu trong modal
  document.getElementById('btnSaveChanges').addEventListener('click', function () {
    if (selectedRow) {
      selectedRow.children[1].textContent = document.getElementById('editHoDem').value;
      selectedRow.children[2].textContent = document.getElementById('editTen').value;
      selectedRow.children[3].textContent = document.getElementById('editGioiTinh').value;
      selectedRow.children[4].textContent = document.getElementById('editDVHT').value;
      selectedRow.children[5].textContent = document.getElementById('editCVHT').value;
      selectedRow.children[6].textContent = document.getElementById('editDiaChi').value;
      selectedRow.children[7].textContent = document.getElementById('editSDT').value;

      editModal.hide();
    }
  });

  // Xử lý nút Xóa
  document.querySelectorAll('.btn-delete').forEach(button => {
    button.addEventListener('click', function () {
      const row = this.closest('tr');
      const hoTen = row.children[1].textContent + ' ' + row.children[2].textContent;
      if (confirm(`Bạn có chắc muốn xóa học viên "${hoTen}" không?`)) {
        row.remove();
      }
    });
  });
});

```

### frontend\js\Administrator\teacher_management.js
```js
document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById("teacherForm");
  const tableBody = document.getElementById("teacherTableBody");

  form.addEventListener("submit", function (e) {
    e.preventDefault();

    const hoTen = document.getElementById("hoTen").value.trim();
    const chuyenMon = document.getElementById("chuyenMon").value.trim();
    const sdt = document.getElementById("sdt").value.trim();
    const email = document.getElementById("email").value.trim();
    const diaChi = document.getElementById("diaChi").value.trim();

    const rowCount = tableBody.querySelectorAll("tr").length;

    const newRow = document.createElement("tr");
    newRow.innerHTML = `
      <td>${rowCount + 1}</td>
      <td>${hoTen}</td>
      <td>${chuyenMon}</td>
      <td>${sdt}</td>
      <td>${email}</td>
      <td>${diaChi}</td>
      <td>
        <button class="btn btn-sm btn-warning me-1"><i class="bi bi-pencil-square"></i> Sửa</button>
        <button class="btn btn-sm btn-danger"><i class="bi bi-trash"></i> Xóa</button>
      </td>
    `;

    tableBody.appendChild(newRow);
    form.reset();

    const modalElement = document.getElementById("addTeacherModal");
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    modalInstance.hide();
  });
});

```

### frontend\js\Authentication\login.js
```js
const loginForm = document.getElementById("loginForm");
if (loginForm) {
  loginForm.addEventListener("submit", async function (event) {
    event.preventDefault();
    const username = loginForm.querySelector('input[type="text"]').value;
    const password = loginForm.querySelector('input[type="password"]').value;

    if (!username || !password) {
      showToast("Please enter complete information!", "warn");
      return;
    }
    try {
      const API_BASE = "http://localhost:3000";
      const response = await fetch(`${API_BASE}/api/v1/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      const result = await response.json();

      if (result.status === "success") {
        const { token, user } = result.data;
        Storage.saveUser(user, token);

        // Chuyển hướng theo phân quyền
        switch (user.role) {
          case 0:
            window.location.href = "../admin/page_admin.html";
            break;
          case 1:
            window.location.href = "../student/page_student.html";
            break;
          case 2:
            window.location.href = "../teacher/page_teacher_home.html";
            break;
          default:
            showToast("User role not determined!!!", "warn");
        }
      } else {
        showToast(`Login Fail: ${result.message}`, "error");
      }
    } catch (error) {
      console.error(error);
      showToast(`Unable to connect to server: ${error.message}`, "error");
    }
  });
} else {
  console.error("Không tìm thấy form đăng nhập!");
}

```

### frontend\js\Authentication\logout.js
```js
function handleLogout() {
  // Gọi API logout nếu muốn xoá session trên server
  fetch("http://localhost:3000/api/v1/auth/logout", {
    method: "POST",
    credentials: "include",
  }).catch((err) => {
    console.warn("Không thể gọi logout từ server:", err.message);
  });

  Storage.clear();
  window.location.href = "../login/login.html";
}

// Gắn tự động nếu có phần tử logout nào
window.addEventListener("DOMContentLoaded", () => {
  const btns = [
    document.getElementById("logoutBtn"),
    document.getElementById("sidebarLogout"),
  ];

  btns.forEach((btn) => {
    if (btn) {
      btn.addEventListener("click", handleLogout);
    }
  });
});

```

### frontend\js\Authentication\storage.js
```js
const Storage = {
  saveUser: (user, token) => {
    localStorage.setItem("user", JSON.stringify(user));
    localStorage.setItem("token", token);
  },
  getUser: () => {
    const user = localStorage.getItem("user");
    return user ? JSON.parse(user) : null;
  },
  getToken: () => localStorage.getItem("token"),
  getRole: () => {
    const user = Storage.getUser();
    return user ? user.role : null;
  },
  isLoggedIn: () => !!Storage.getToken(),
  clear: () => {
    localStorage.removeItem("user");
    localStorage.removeItem("token");
  },
};

window.Storage = Storage;

```

### frontend\js\Teacher\teacher.js
```js
document.addEventListener('DOMContentLoaded', function () {
  const filter = document.getElementById('classFilter');
  const tableRows = document.querySelectorAll('#studentTable tr');

  filter.addEventListener('change', () => {
    const selectedClass = filter.value;
    tableRows.forEach(row => {
      const classCell = row.cells[2].textContent;
      row.style.display = (selectedClass === 'all' || classCell === selectedClass) ? '' : 'none';
    });
  });

});

    const editModal = document.getElementById('editModal');
    editModal.addEventListener('show.bs.modal', function (event) {
      const button = event.relatedTarget;
      const name = button.getAttribute('data-name');
      const className = button.getAttribute('data-class');
      const score = button.getAttribute('data-score');

      document.getElementById('studentName').value = name;
      document.getElementById('studentClass').value = className;
      document.getElementById('studentScore').value = score;
    });

    document.getElementById('editScoreForm').addEventListener('submit', function (e) {
      e.preventDefault();

      alert('Điểm đã được cập nhật!');
      const modal = bootstrap.Modal.getInstance(editModal);
      modal.hide();
    });
```
